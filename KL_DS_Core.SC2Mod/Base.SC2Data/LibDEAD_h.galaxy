include "LibECLP"

//--------------------------------------------------------------------------------------------------
// Library: Core (Dead)
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libDEAD_ge_DS_WeaponType_Main = 0;
const int libDEAD_ge_DS_WeaponType_Secondary = 1;
const int libDEAD_ge_ConfirmType_None = 0;
const int libDEAD_ge_ConfirmType_Discard = 1;
const int libDEAD_ge_EQUIPUNEQUIP_EQUIP = 0;
const int libDEAD_ge_EQUIPUNEQUIP_UNEQUIP = 1;
const int libDEAD_ge_ContextButton_Examine = 0;
const int libDEAD_ge_ContextButton_Use = 1;
const int libDEAD_ge_ContextButton_Equip = 2;
const int libDEAD_ge_ContextButton_Transfer = 3;
const int libDEAD_ge_ContextButton_Placeholder1 = 4;
const int libDEAD_ge_ContextButton_Placeholder2 = 5;
const int libDEAD_ge_ContextButton_Discard = 6;
const int libDEAD_ge_ContextTarget_NoTarget = 0;
const int libDEAD_ge_ContextTarget_Inventory = 1;
const int libDEAD_ge_ContextTarget_Stash = 2;
const int libDEAD_ge_ContextTarget_Crate = 3;
const int libDEAD_ge_DS_DamageType_Water = 0;
const int libDEAD_ge_DS_DamageType_Food = 1;
const int libDEAD_ge_DS_DamageType_BrokenLegs = 2;
const int libDEAD_ge_DS_DamageType_BrokenArms = 3;
const int libDEAD_ge_DS_DamageType_Bleeding = 4;
const int libDEAD_ge_DS_LimbType_Head = 0;
const int libDEAD_ge_DS_LimbType_Torso = 1;
const int libDEAD_ge_DS_LimbType_Legs = 2;
const int libDEAD_ge_InteractType_Gate = 0;
const int libDEAD_ge_InteractType_GateLocked = 1;
const int libDEAD_ge_InteractType_Loot = 2;
const int libDEAD_ge_InteractType_LootLocked = 3;
const int libDEAD_ge_ButtonType_Control = 0;
const int libDEAD_ge_ButtonType_LootChest = 1;
const int libDEAD_ge_ObjectType_DoodadGate = 0;
const int libDEAD_ge_ObjectType_UnitGate = 1;
const int libDEAD_ge_CrateType_Generic = 0;
const int libDEAD_ge_CrateType_Medical = 1;
const int libDEAD_ge_CrateType_Military = 2;
const int libDEAD_ge_CrateTier_Legendary = 0;
const int libDEAD_ge_CrateTier_Epic = 1;
const int libDEAD_ge_CrateTier_Rare = 2;
const int libDEAD_ge_CrateTier_Uncommon = 3;
const int libDEAD_ge_CrateTier_Common = 4;

// Constants
const int libDEAD_gv_dS_MaxPlayers = 2;
const int libDEAD_gv_baseArmor = 0;
const int libDEAD_gv_baseHP = 440;
const fixed libDEAD_gv_baseO2 = 60.0;
const int libDEAD_gv_baseInventory = 5;
const fixed libDEAD_gv_dS_WaterLossRate = 7.95;
const fixed libDEAD_gv_dS_FoodLossRate = 10.5;
const int libDEAD_gv_eCL_Item_width = 80;
const int libDEAD_gv_eCL_Item_height = 80;
const int libDEAD_gv_eCL__maxslots = 289;
const int libDEAD_gv_eCL__inventoryslots = 49;
const int libDEAD_gv_eCL__stashslots = 231;
const int libDEAD_gv_dS_CraftingListboxSize = 6;
const fixed libDEAD_gv_dS_CameraDistanceNormal = 24.0;
const fixed libDEAD_gv_dS_CameraDistanceInventory = 20.0;
const fixed libDEAD_gv_dS_ObjectPowerDelay = 3.5;

// Structures
struct libDEAD_gs_DS_PlayerData {
    bool lv_running;
    int lv_maxFood;
    int lv_currentFood;
    int lv_maxWater;
    int lv_currentWater;
    fixed lv_moveSpeedMax;
    string lv_equippedMainWpn;
    string lv_equippedSecondaryWpn;
    string lv_equippedSuit;
    string lv_equippedAug;
    string lv_equippedBack;
    int lv_weaponInUse;
    int lv_weaponMagSize;
    int lv_weaponAmmo;
    int lv_weaponAmmoReserve;
    fixed lv_weaponCooldown;
};

struct libDEAD_gs_DS_Confirmation {
    int lv_panel;
    int lv_confirmButton;
    int lv_cancelButton;
    int lv_title;
    int lv_desc;
};

struct libDEAD_gs_DS_Inspect {
    int lv_panel;
    int lv_backgroundButton;
    int lv_closeButton;
    int lv_title;
    int lv_type;
    int lv_quantity;
    int lv_durability;
    int lv_icon;
    int lv_useType;
    int lv_useDesc;
    int lv_lore;
    int lv_inspectWindow;
};

struct libDEAD_gs_ECL__Inventory {
    int lv__DROPZONE;
    int lv__INV;
    int[libDEAD_gv_eCL__maxslots + 1] lv_sLOT;
    int[libDEAD_gv_eCL__maxslots + 1] lv_sLOT_bg;
    int[libDEAD_gv_eCL__maxslots + 1] lv_sLOT_item;
    bool[libDEAD_gv_eCL__maxslots + 1] lv_sLOT_locked;
    int[libDEAD_gv_eCL__maxslots + 1] lv_iTEM;
    int[libDEAD_gv_eCL__maxslots + 1] lv_iTEM_anchor;
    int[libDEAD_gv_eCL__maxslots + 1] lv_iTEM_draggable;
    int[libDEAD_gv_eCL__maxslots + 1] lv_iTEM_state_box;
    int[libDEAD_gv_eCL__maxslots + 1] lv_iTEM_slot;
    bool[libDEAD_gv_eCL__maxslots + 1] lv_iTEM_context_open;
    int lv_n_items;
    int lv_iNV_slots;
    int lv_curr_item;
    int lv_curr_slot;
    bool lv_sWAPPING;
    bool lv_drop_to_ground;
};

struct libDEAD_gs_DS_Crafting {
    int lv_craftingPanel;
    int[101] lv_listboxItem;
    int[101] lv_listboxIcon;
    int[101] lv_listboxTitle;
    int[101] lv_listboxType;
    int lv_craftingInfoFrame;
    int lv_infoTitle;
    int lv_infoSubtitle;
    int lv_infoDesc;
    int lv_infoIcon;
    int lv_craftedItem;
    int[7] lv_dS_CraftingMaterialitem;
    int[7] lv_dS_CraftingMaterialItemIndex;
};

struct libDEAD_gs_DS_GameUI {
    int lv_gameUI;
};

struct libDEAD_gs_DS_HUD {
    int lv_panel;
    int lv_hPBar;
    int lv_uTF;
    int lv_magazine_main;
    int lv_weapon_main;
    int lv_weapon_icon;
    int lv_weapon_label;
    int lv_weaponPanel;
    int lv_mainWpnIcon;
    int lv_mainWpnName;
    int lv_mainWpnAmmoIcon;
    int lv_mainWpnAmmoCurrent;
    int lv_mainWpnAmmoReserve;
    int lv_eventLog;
    int[11] lv_logPanels;
    int[11] lv_logTitle;
    int[11] lv_logAmount;
    int[11] lv_logIcon;
    int lv_timerPanel;
    int[11] lv_timerWindow;
    int[11] lv_timerIcon;
    int[11] lv_timerProgress;
    int[11] lv_timerLabel;
};

struct libDEAD_gs_DS_Inventory {
    int lv_inventoryPanel;
    int lv_characterPanel;
    int lv_headPanel;
    int lv_headBar;
    int lv_lArmPanel;
    int lv_lArmBar;
    int lv_rArmPanel;
    int lv_rArmBar;
    int lv_torsoPanel;
    int lv_torsoBar;
    int lv_stomachPanel;
    int lv_stomachBar;
    int lv_lLegPanel;
    int lv_lLegBar;
    int lv_rLegPanel;
    int lv_rLegBar;
    int lv_vitalsFoodBar;
    int lv_vitalsWaterBar;
    int[6] lv_equipmentButton;
    int[6] lv_equipmentIcon;
    int[6] lv_equipmentName;
    int[6] lv_equipmentDurability;
    int[6] lv_equipmentCategory;
    int[6] lv_equipmentUse;
    int[6] lv_equipmentUseDesc;
    int[6] lv_equipmentLore;
    int lv_inventoryModule;
    int[libDEAD_gv_eCL__maxslots + 1] lv_itemSlots;
    int[libDEAD_gv_eCL__maxslots + 1] lv_itemName;
    int[libDEAD_gv_eCL__maxslots + 1] lv_itemType;
    int[libDEAD_gv_eCL__maxslots + 1] lv_itemUse;
    int[libDEAD_gv_eCL__maxslots + 1] lv_itemDesc;
    int[libDEAD_gv_eCL__maxslots + 1] lv_itemLore;
    int[libDEAD_gv_eCL__maxslots + 1] lv_itemIcon;
    int[libDEAD_gv_eCL__maxslots + 1] lv_itemQuantity;
    int[libDEAD_gv_eCL__maxslots + 1] lv_itemDurability;
    int lv_keyModule;
    int[libDEAD_gv_eCL__maxslots + 1] lv_keySlots;
    int[libDEAD_gv_eCL__maxslots + 1] lv_keyName;
    int[libDEAD_gv_eCL__maxslots + 1] lv_keyType;
    int[libDEAD_gv_eCL__maxslots + 1] lv_keyUse;
    int[libDEAD_gv_eCL__maxslots + 1] lv_keyDesc;
    int[libDEAD_gv_eCL__maxslots + 1] lv_keyLore;
    int[libDEAD_gv_eCL__maxslots + 1] lv_keyIcon;
    int[libDEAD_gv_eCL__maxslots + 1] lv_keyQuantity;
    int[libDEAD_gv_eCL__maxslots + 1] lv_keyDurability;
    int lv_lootPanel;
    int lv_lootPanelTitle;
    int[11] lv_lootSlots;
    int[11] lv_lootName;
    int[11] lv_lootType;
    int[11] lv_lootUse;
    int[11] lv_lootDesc;
    int[11] lv_lootLore;
    int[11] lv_lootIcon;
    int[11] lv_lootQuantity;
    int[11] lv_lootDurability;
    int lv_takeButton;
    int lv_lootAllButton;
    int lv_context_Examine;
    int lv_context_Use;
    int lv_context_Equip;
    int lv_context_Transfer;
    int lv_context_PH;
    int lv_context_PH2;
    int lv_context_Discard;
};

struct libDEAD_gs_DS_Character {
    bool lv_initialized;
    int lv_headMaxHP;
    int lv_headHP;
    string[6] lv_headAilments;
    int lv_torsoMaxHP;
    int lv_torsoHP;
    string[6] lv_torsoAilments;
    int lv_legsMaxHP;
    int lv_legsHP;
    string[6] lv_legsAilments;
    int lv_characterPanel;
    int lv_headPanel;
    int lv_headBar;
    int lv_torsoPanel;
    int lv_torsoBar;
    int lv_legsPanel;
    int lv_legsBar;
    int lv_vitalsFoodBar;
    int lv_vitalsWaterBar;
    int[6] lv_equipmentButton;
    int[6] lv_equipmentIcon;
    int[6] lv_equipmentName;
    int[6] lv_equipmentDurability;
    int[6] lv_equipmentCategory;
    int[6] lv_equipmentUse;
    int[6] lv_equipmentUseDesc;
    int[6] lv_equipmentLore;
};

struct libDEAD_gs_DS_InteractionPrompt {
    int lv_dialog;
    int lv_button;
    int lv_icon;
    int lv_hotkey;
};

// Variable Declarations
bool libDEAD_gv_dEBUGMode;
playergroup libDEAD_gv_dS_ActivePlayers;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_aimingDown;
unit[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_playerUnit;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_attackOnCooldown;
unit[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_targetUnit;
point[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_targetPoint;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_looting;
fixed libDEAD_gv_baseMoveSpeed;
int libDEAD_gv_baseVisionRange;
libDEAD_gs_DS_PlayerData[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_PlayerData;
libDEAD_gs_DS_Confirmation[3] libDEAD_gv_dS_Confirmation;
int[3] libDEAD_gv_dS_ConfirmType;
libDEAD_gs_DS_Inspect[3] libDEAD_gv_dS_Inspect;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_activeWeaponIndex;
string[libDEAD_gv_dS_MaxPlayers + 1][5] libDEAD_gv_activeWeaponInstance;
unit[libECLP_gv_eCL_MAX_P + 1] libDEAD_gv_eCL_STASH;
bool[libECLP_gv_eCL_MAX_P + 1] libDEAD_gv_eCL_STASH_morphin;
bool[libECLP_gv_eCL_MAX_P + 1] libDEAD_gv_eCL_STASH_open;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_eCL_CTRL;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_eCL_AmmoBack_Amount;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_eCL_AmmoBack_Type;
unitgroup[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_Loot;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_ShowHideLoot;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_reloading;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_disable_fire;
int libDEAD_gv_eCL__equipmentslots;
libDEAD_gs_ECL__Inventory[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_eCL__Inventory;
libDEAD_gs_DS_Crafting[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_Crafting;
int libDEAD_gv_dS_ListItemsinUse;
int[101] libDEAD_gv_dS_ListItemIndex;
int[7][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_CraftingMaterialitem;
int[7][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_CraftingMaterialItemIndex;
libDEAD_gs_DS_GameUI[3] libDEAD_gv_dS_GameUI;
int libDEAD_gv_dS_ItemSize;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_InventoryEnabled;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_InventoryOpened;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_CraftingOpened;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_Flashlight;
bool[11][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_EventsInUse;
bool[libDEAD_gv_dS_MaxPlayers + 1][11] libDEAD_gv_dS_TimersinUse;
fixed[libDEAD_gv_dS_MaxPlayers + 1][11] libDEAD_gv_dS_TimersTime;
timer[libDEAD_gv_dS_MaxPlayers + 1][11] libDEAD_gv_dS_Timer;
libDEAD_gs_DS_HUD[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_HUD;
string[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_ContextItem;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_ContextItemIndex;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_ContextItemAmount;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_ContextItemDurability;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_ContextTarget;
string[51][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_KeySlot;
int[51][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_KeyAmount;
bool[libDEAD_gv_eCL__maxslots + 1][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_InventoryLocked;
string[libDEAD_gv_eCL__maxslots + 1][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_InventoryItem;
string[libDEAD_gv_eCL__maxslots + 1][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_InventorySlot_Category;
int[libDEAD_gv_eCL__maxslots + 1][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_InventoryAmount;
int[libDEAD_gv_eCL__maxslots + 1][libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_InventoryDurability;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_ContextActive;
libDEAD_gs_DS_Inventory[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_Inventory;
int libDEAD_gv_dS_ActiveCrates;
unit[201] libDEAD_gv_dS_InteractableCrates;
int[201] libDEAD_gv_dS_CrateSize;
string[201] libDEAD_gv_dS_CrateLockItem;
string[201][19] libDEAD_gv_dS_CrateLoot;
int[201][19] libDEAD_gv_dS_LootAmount;
int[201][19] libDEAD_gv_dS_LootDurability;
trigger[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_FocusedUseTrigger;
unit[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_FocusedCrate;
string[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_FocusedItem;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_FocusedItemSlot;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_FocusedItemAmount;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_FocusedItemDurability;
libDEAD_gs_DS_Character[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_Character;
bank[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_PlayerBank;
unit libDEAD_gv_dS_TargetUnit;
point libDEAD_gv_dS_TargetPoint;
libDEAD_gs_DS_InteractionPrompt[3] libDEAD_gv_dS_InteractPrompt;
int libDEAD_gv_dS_ActiveControls;
unit[201] libDEAD_gv_dS_InteractableControls;
region[201] libDEAD_gv_dS_ObjectRegion;
unit[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_ClosestCrate;
bool[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_CrateinUse;
int[libDEAD_gv_dS_MaxPlayers + 1] libDEAD_gv_dS_LastUsedIndex;

// Function Declarations
void libDEAD_gf_DEBUG_GivePlayerItem (int lp_player, bool lp_displayMessage, string lp_item, int lp_amount);
void libDEAD_gf_DEBUG_GivePlayerItemToSlot (int lp_player, bool lp_displayMessage, string lp_item, int lp_amount, int lp_slot);
void libDEAD_gf_DEBUG_EnableDebug ();
void libDEAD_gf_SendDebugMessage (string lp_message);
void libDEAD_gf_ShowHideConfirmationWindow (int lp_player, bool lp_showHide, int lp_confirmType);
void libDEAD_gf_DS_CreateConfirm (int lp_player);
void libDEAD_gf_DS_CreateInspectWindow (int lp_player);
void libDEAD_gf_ShowHideInspectWindow (int lp_player, bool lp_showHide);
void libDEAD_gf_UpdateInspectWindow (int lp_player);
void libDEAD_gf_KL_SwapToWeapon (int lp_player, int lp_weaponIndex);
fixed libDEAD_gf_ReturnEquipmentPropertyMoveSpeed (string lp_item);
int libDEAD_gf_ReturnEquipmentPropertyInventory (string lp_item);
int libDEAD_gf_ReturnEquipmentPropertyHealth (string lp_item);
int libDEAD_gf_ReturnEquipmentPropertyVision (string lp_item);
void libDEAD_gf_CheckBaseStatModifiers ();
void libDEAD_gf_ECL_ITEM_add (int lp_player, string lp_item, int lp_amount, bool lp_displayMessage, int lp_exclude_Slot, int lp_sLOT_min, int lp_sLOT_max);
void libDEAD_gf_ECL_ITEM_remove (int lp_player, int lp_index);
void libDEAD_gf_ECL_SLOT_lock_unlock (int lp_player, int lp_slot_ID, bool lp_lockUnlock);
void libDEAD_gf_ECL_ITEM_drop_to_ground (int lp_player, string lp_item, int lp_amount, point lp_spawnPoint);
void libDEAD_gf_ECL__EQUIP (int lp_player, int lp_sLOT, int lp_eQUIPUNEQUIP);
string libDEAD_gf_ECL_ReturnEquippedItem (int lp_player, string lp_type);
string libDEAD_gf_ECL_ReturnWeaponItem (int lp_player, int lp_weaponIndex);
void libDEAD_gf_ECL_GroundItemData (int lp_quantity, string lp_itemData, unit lp_item);
void libDEAD_gf_ECL_Reload (fixed lp_reload_time, int lp_player);
string libDEAD_gf_ReturnAmmoRequired (string lp_instance);
void libDEAD_gf_DS_FireWeaponItem (int lp_player, string lp_weaponItem);
void libDEAD_gf_ECL__Hookup_Context (int lp_player, int lp_index);
bool libDEAD_gf_IsBlueprintDiscovered (string lp_item);
int libDEAD_gf_UsedListboxItem (int lp_player, int lp_dialogItem);
int libDEAD_gf_ReturnListboxItem (int lp_listboxIndex);
void libDEAD_gf_DS_CreateCraftingPanel (int lp_player);
void libDEAD_gf_DS_UpdateCraftingListboxData (int lp_player);
void libDEAD_gf_DS_SetInfoFrameItem (int lp_itemIndex, int lp_player);
void libDEAD_gf_ShowHideCraftingPanel (bool lp_showHide, int lp_player);
void libDEAD_gf_DiscoverRecipe (string lp_item, int lp_player);
void libDEAD_gf_DS_CreatePlayerUnit (int lp_player, fixed lp_angle, point lp_spawnPoint);
void libDEAD_gf_DS_TableSizeCheck ();
void libDEAD_gf_DS_ItemSizeCheck ();
void libDEAD_gf_DS_CreateHUD (int lp_player);
void libDEAD_gf_DS_DisplayLootEvent (int lp_player, int lp_amount, string lp_item);
void libDEAD_gf_DS_EquipWeapon (int lp_player, string lp_untitledParameter001);
void libDEAD_gf_DS_EquipSuit (int lp_player, string lp_suitItem);
void libDEAD_gf_DS_EquipAug (int lp_player, string lp_augItem);
void libDEAD_gf_DS_EquipPack (int lp_player, string lp_packItem);
void libDEAD_gf_DS_ReadMainWeaponData (int lp_player, string lp_untitledParameter001);
void libDEAD_gf_DS_UpdateHUDVitals (int lp_player);
void libDEAD_gf_DS_UpdateTimerUI (int lp_player, int lp_index);
void libDEAD_gf_StartTimer (int lp_player, fixed lp_time, string lp_icon);
void libDEAD_gf_DiscardItem (int lp_player);
void libDEAD_gf_HookContextMenuonDemand (int lp_player, int lp_slot);
void libDEAD_gf_SetupContextType (int lp_player, int lp_slot);
void libDEAD_gf_EnableDisableContextButton (int lp_player, bool lp_enableDisable, int lp_button);
void libDEAD_gf_ShowHideContextButton (int lp_player, bool lp_showHide, int lp_button);
void libDEAD_gf_FocusContextItem (int lp_player, int lp_slot);
string libDEAD_gf_ReturnInventoryItem (int lp_player, int lp_slot);
int libDEAD_gf_ReturnItemID (string lp_instance);
void libDEAD_gf_DS_CreateInventoryOld (int lp_player);
void libDEAD_gf_DS_CreateInventory (int lp_player);
void libDEAD_gf_RemoveItemFromInventorySlot (int lp_player, int lp_targetSlot);
void libDEAD_gf_ShowHideInventoryPanelOld (int lp_player, bool lp_showHide);
void libDEAD_gf_ShowHideInventoryPanel (int lp_player, bool lp_showHide);
void libDEAD_gf_LockUnlockInventorySlot (int lp_player, bool lp_lockUnlock, int lp_slot);
int libDEAD_gf_ReturnKeyItemAmount (int lp_player, int lp_slot);
bool libDEAD_gf_ItemInInventory (int lp_player, string lp_item);
bool libDEAD_gf_KeyInInventory (int lp_player, string lp_item);
int libDEAD_gf_ReturnCrateIndex (unit lp_crate);
int libDEAD_gf_ReturnCrateSize (int lp_index);
int libDEAD_gf_ReturnCrateItemAmount (unit lp_crate, int lp_item);
int libDEAD_gf_ReturnInventoryItemAmount (int lp_player, int lp_item);
int libDEAD_gf_ReturnInventoryItemDurability (int lp_player, int lp_item);
string libDEAD_gf_ReturnItemPropertyName (string lp_item);
int libDEAD_gf_ReturnItemPropertyMaxDurability (string lp_item);
int libDEAD_gf_ReturnItemPropertyMaxAmount (string lp_item);
string libDEAD_gf_ReturnItemPropertyCategory (string lp_item);
text libDEAD_gf_ReturnItemPropertyDescription (string lp_item);
string libDEAD_gf_ReturnItemPropertyUse (string lp_item);
text libDEAD_gf_ReturnItemPropertyLore (string lp_item);
string libDEAD_gf_ReturnItemPropertyIcon (string lp_item);
string libDEAD_gf_ReturnItemPropertyModel (string lp_item);
string libDEAD_gf_ReturnItemPropertyModelSize (string lp_item);
void libDEAD_gf_ShowHideLootPanel (int lp_player, bool lp_showHide);
void libDEAD_gf_DisplayCrateLoot (int lp_player, unit lp_crate);
void libDEAD_gf_UpdateInventoryPanel (int lp_player);
void libDEAD_gf_FocusNextItemInCrate (int lp_player, unit lp_crate);
void libDEAD_gf_FocusItemInCrate (int lp_player, int lp_index, unit lp_crate);
void libDEAD_gf_FocusItem (int lp_player, unit lp_crate, int lp_slot);
void libDEAD_gf_LootFocusedItem (int lp_player, unit lp_crate);
int libDEAD_gf_ReturnLimbHP (int lp_player, int lp_limb);
int libDEAD_gf_ReturnLimbHPMax (int lp_player, int lp_limb);
int libDEAD_gf_ReturnTotalHP (int lp_player);
int libDEAD_gf_ReturnTotalHPMax (int lp_player);
int libDEAD_gf_ReturnLimbHPPercent (int lp_player, int lp_limb);
void libDEAD_gf_DS_CreateInventoryPanel (int lp_player);
void libDEAD_gf_DS_UpdateVitalsUI (int lp_player);
void libDEAD_gf_DS_SetLimbState (int lp_player, int lp_limb);
void libDEAD_gf_DS_InitHPSystem (int lp_player);
void libDEAD_gf_SetFoodCurrent (int lp_player, int lp_amount);
void libDEAD_gf_SetWaterCurrent (int lp_player, int lp_amount);
void libDEAD_gf_AddRemoveFood (int lp_player, bool lp_addRemove, int lp_amount);
void libDEAD_gf_AddRemoveWater (int lp_player, bool lp_addRemove, int lp_amount);
void libDEAD_gf_ModifyLimbHealthMax (int lp_player, int lp_value, int lp_limb);
void libDEAD_gf_ModifyLimbHealth (int lp_player, int lp_value, int lp_limb);
void libDEAD_gf_DivideHealthToLimbs (int lp_player, int lp_hPAddition);
void libDEAD_gf_AddFood (int lp_player, int lp_amount);
void libDEAD_gf_RemoveFood (int lp_player, int lp_amount);
void libDEAD_gf_AddWater (int lp_player, int lp_amount);
void libDEAD_gf_RemoveWater (int lp_player, int lp_amount);
void libDEAD_gf_SetLimbHealth (int lp_player, int lp_value, int lp_limb);
void libDEAD_gf_AddDamagetoLimb (int lp_player, int lp_value, int lp_limb);
void libDEAD_gf_AddHealingtoLimb (int lp_player, int lp_value, int lp_limb);
void libDEAD_gf_TakeDamage (int lp_player, fixed lp_damageAmount, unit lp_attacker);
void libDEAD_gf_TakeDamageNoAttacker (int lp_player, fixed lp_damageAmount, int lp_damageType);
int libDEAD_gf_ReturnEmptyAilmentSlot (int lp_player, int lp_targetLimb);
void libDEAD_gf_AddAilmenttoLimb (int lp_player, string lp_ailment, int lp_targetLimb);
void libDEAD_gf_HealAilmentfromLimb (int lp_player, string lp_ailment, int lp_targetLimb);
void libDEAD_gf_DS_InitializeInventory (int lp_player);
void libDEAD_gf_DS_BankPopulation (int lp_player);
void libDEAD_gf_DS_Fire (int lp_player);
void libDEAD_gf_DS_ReloadWeapon (int lp_player);
void libDEAD_gf_DS_HookupInteractButton (unit lp_unit, int lp_player);
void libDEAD_gf_ShowHideInteractPrompt (int lp_type, bool lp_showHide, int lp_player);
bool libDEAD_gf_CrateItem ();
bool libDEAD_gf_ObjectisEnabled (unit lp_object);
bool libDEAD_gf_ObjectisUnlocked (unit lp_object);
bool libDEAD_gf_ObjectisPreplaced (unit lp_object);
fixed libDEAD_gf_ReturnObjectUseTime (unit lp_object);
bool libDEAD_gf_CrateIsEmpty (unit lp_object);
void libDEAD_gf_EnableDisableObject (bool lp_enableDisable, unit lp_object);
void libDEAD_gf_UseGateObject (int lp_player, unit lp_playerUnit, unit lp_object, bool lp_enableDisable);
void libDEAD_gf_ObjectInRange (int lp_player, unit lp_playerUnit, unit lp_object, bool lp_trueFalse, trigger lp_trigger);
void libDEAD_gf_ObjectInRangeGeneric (int lp_player, unit lp_playerUnit, unit lp_object, bool lp_trueFalse);
void libDEAD_gf_CreateConsoleObject (point lp_location, fixed lp_angle, int lp_type, bool lp_active, string lp_model, int lp_variation, fixed lp_scale, fixed lp_useTime);
void libDEAD_gf_CreateLootObject (string lp_name, trigger lp_triggerEnter, trigger lp_triggerExit, point lp_location, fixed lp_angle, bool lp_active, string lp_model, int lp_variation, fixed lp_scale, fixed lp_useTime, int lp_size, bool lp_locked, string lp_unlockItem);
void libDEAD_gf_CreateLootGenericObject (string lp_name, point lp_location, fixed lp_angle, bool lp_active, string lp_model, int lp_variation, fixed lp_scale, fixed lp_useTime, int lp_size, bool lp_locked, string lp_unlockItem, bool lp_preplaced);
void libDEAD_gf_DestroyLootObject (unit lp_unit);
void libDEAD_gf_AddLootItemtoCrate (string lp_item, unit lp_crate, int lp_amount);
void libDEAD_gf_AddRandomLoottoCrate (unit lp_crate, int lp_type);

// Trigger Declarations
trigger libDEAD_gt_DS_DiscoverRecipe;
trigger libDEAD_gt_DS_Unlock;
trigger libDEAD_gt_DS_HealthIncrease;
trigger libDEAD_gt_DS_ConfirmYesP1;
trigger libDEAD_gt_DS_ConfirmNoP1;
trigger libDEAD_gt_DS_ConfirmYesP2;
trigger libDEAD_gt_DS_ConfirmNoP2;
trigger libDEAD_gt_DS_ExamineCloseBackgroundP1;
trigger libDEAD_gt_DS_ExamineCloseEscP1;
trigger libDEAD_gt_DS_ExamineCloseBackgroundP2;
trigger libDEAD_gt_DS_ExamineCloseEscP2;
trigger libDEAD_gt_KL_SwapWeaponTest;
trigger libDEAD_gt_ECL__HOOKUPINVENTORYFRAMES;
trigger libDEAD_gt_DS_OpenCloseStash_unitclick;
trigger libDEAD_gt_ECL__DRAG_ON_OFF;
trigger libDEAD_gt_ECL__SETNEWOLDSLOT;
trigger libDEAD_gt_ECL__DROPZONE;
trigger libDEAD_gt_ECL__CTRLCLICKINVENTORY;
trigger libDEAD_gt_ECL__CTRLON;
trigger libDEAD_gt_ECL__CTRLOFF;
trigger libDEAD_gt_ECL__PICKUPLOOT;
trigger libDEAD_gt_ECL__PICKUPLOOT_directly;
trigger libDEAD_gt_ECL__PICKUPLOOT_highlight;
trigger libDEAD_gt_ECL__PICKUPLOOT_unhighlight;
trigger libDEAD_gt_DS_ShowLootOnGround;
trigger libDEAD_gt_DS_HideLootOnGround;
trigger libDEAD_gt_ECL_catch_permanentloot;
trigger libDEAD_gt_ECL_Reload;
trigger libDEAD_gt_ECL_FireNew;
trigger libDEAD_gt_ECL__CONTEXTMENU_OnRightClick;
trigger libDEAD_gt_DS_ListboxItemUsed;
trigger libDEAD_gt_DS_Initialization;
trigger libDEAD_gt_DS_OpenInventoryP1;
trigger libDEAD_gt_DS_CloseInventoryP1;
trigger libDEAD_gt_DS_OpenInventoryP2;
trigger libDEAD_gt_DS_CloseInventoryP2;
trigger libDEAD_gt_DS_OpenCraftingP1;
trigger libDEAD_gt_DS_CloseCraftingP1;
trigger libDEAD_gt_DS_OpenCraftingP2;
trigger libDEAD_gt_DS_CloseCraftingP2;
trigger libDEAD_gt_DS_PressFFlashlightP1;
trigger libDEAD_gt_DS_PressFFlashlightP2;
trigger libDEAD_gt_DS_UpdateTimers;
trigger libDEAD_gt_DS_ContextExamineP1;
trigger libDEAD_gt_DS_ContextDiscardP1;
trigger libDEAD_gt_DS_ContextUseP1;
trigger libDEAD_gt_DS_ContextEquipP1;
trigger libDEAD_gt_DS_ContextExamineP2;
trigger libDEAD_gt_DS_ContextDiscardP2;
trigger libDEAD_gt_DS_ContextUseP2;
trigger libDEAD_gt_DS_ContextEquipP2;
trigger libDEAD_gt_DS_CrateItemFocusedP1;
trigger libDEAD_gt_DS_TakeButtonPressedP1;
trigger libDEAD_gt_DS_LootAllButtonP1;
trigger libDEAD_gt_DS_CrateItemFocusedP2;
trigger libDEAD_gt_DS_TakeButtonPressedP2;
trigger libDEAD_gt_DS_LootAllButtonP2;
trigger libDEAD_gt_DS_FoodLossP1;
trigger libDEAD_gt_DS_WaterLossP1;
trigger libDEAD_gt_DS_FoodLossP2;
trigger libDEAD_gt_DS_WaterLossP2;
trigger libDEAD_gt_DS_DamageTaken;
trigger libDEAD_gt_DS_FireCooldownP1;
trigger libDEAD_gt_DS_Fire;
trigger libDEAD_gt_DS_Reload;
trigger libDEAD_gt_DS_RightClickRelease;
trigger libDEAD_gt_DS_RightClickDown;
trigger libDEAD_gt_DS_ClickFire;
trigger libDEAD_gt_DS_Crate_GenericUseP1;
trigger libDEAD_gt_DS_Crate_GenericEnterP1;
trigger libDEAD_gt_DS_Crate_GenericUseP2;
trigger libDEAD_gt_DS_Crate_GenericEnterP2;

// Library Initialization
void libDEAD_InitVariables ();

