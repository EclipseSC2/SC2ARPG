include "TriggerLibs/NativeLib"
include "Lib09BE6BA8"
include "LibECLP"

include "LibDEAD_h"

//--------------------------------------------------------------------------------------------------
// Library: Core (Dead)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libDEAD_InitLibraries () {
    libNtve_InitVariables();
    libECLP_InitVariables();
}

// Variable Initialization
bool libDEAD_InitVariables_completed = false;

void libDEAD_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;

    if (libDEAD_InitVariables_completed) {
        return;
    }

    libDEAD_InitVariables_completed = true;

    libDEAD_gv_dEBUGMode = true;
    libDEAD_gv_dS_ActivePlayers = PlayerGroupEmpty();
    libDEAD_gv_baseVisionRange = 8;
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        libDEAD_gv_dS_PlayerData[init_i].lv_maxFood = 100;
        libDEAD_gv_dS_PlayerData[init_i].lv_currentFood = 60;
        libDEAD_gv_dS_PlayerData[init_i].lv_maxWater = 100;
        libDEAD_gv_dS_PlayerData[init_i].lv_currentWater = 20;
        libDEAD_gv_dS_PlayerData[init_i].lv_weaponInUse = libDEAD_ge_DS_WeaponType_Main;
        libDEAD_gv_dS_PlayerData[init_i].lv_weaponCooldown = 1.1;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libDEAD_gv_dS_Confirmation[init_i].lv_panel = c_invalidDialogControlId;
        libDEAD_gv_dS_Confirmation[init_i].lv_confirmButton = c_invalidDialogControlId;
        libDEAD_gv_dS_Confirmation[init_i].lv_cancelButton = c_invalidDialogControlId;
        libDEAD_gv_dS_Confirmation[init_i].lv_title = c_invalidDialogControlId;
        libDEAD_gv_dS_Confirmation[init_i].lv_desc = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libDEAD_gv_dS_ConfirmType[init_i] = libDEAD_ge_ConfirmType_None;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libDEAD_gv_dS_Inspect[init_i].lv_panel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_backgroundButton = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_closeButton = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_title = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_type = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_quantity = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_durability = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_icon = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_useType = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_useDesc = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_lore = c_invalidDialogControlId;
        libDEAD_gv_dS_Inspect[init_i].lv_inspectWindow = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        libDEAD_gv_dS_Loot[init_i] = UnitGroupEmpty();
    }
    libDEAD_gv_eCL__equipmentslots = (libDEAD_gv_eCL__maxslots - libDEAD_gv_eCL__inventoryslots);
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        libDEAD_gv_eCL__Inventory[init_i].lv__DROPZONE = c_invalidDialogControlId;
        libDEAD_gv_eCL__Inventory[init_i].lv__INV = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_eCL__Inventory[init_i].lv_iTEM[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_eCL__Inventory[init_i].lv_iTEM_anchor[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_eCL__Inventory[init_i].lv_iTEM_draggable[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_eCL__Inventory[init_i].lv_iTEM_state_box[init_i1] = c_invalidDialogControlId;
        }
        libDEAD_gv_eCL__Inventory[init_i].lv_iNV_slots = (libDEAD_gv_eCL__equipmentslots + libDEAD_gv_baseInventory);
    }
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        libDEAD_gv_dS_Crafting[init_i].lv_craftingPanel = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 100; init_i1 += 1) {
            libDEAD_gv_dS_Crafting[init_i].lv_listboxItem[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 100; init_i1 += 1) {
            libDEAD_gv_dS_Crafting[init_i].lv_listboxIcon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 100; init_i1 += 1) {
            libDEAD_gv_dS_Crafting[init_i].lv_listboxTitle[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 100; init_i1 += 1) {
            libDEAD_gv_dS_Crafting[init_i].lv_listboxType[init_i1] = c_invalidDialogControlId;
        }
        libDEAD_gv_dS_Crafting[init_i].lv_craftingInfoFrame = c_invalidDialogControlId;
        libDEAD_gv_dS_Crafting[init_i].lv_infoTitle = c_invalidDialogControlId;
        libDEAD_gv_dS_Crafting[init_i].lv_infoSubtitle = c_invalidDialogControlId;
        libDEAD_gv_dS_Crafting[init_i].lv_infoDesc = c_invalidDialogControlId;
        libDEAD_gv_dS_Crafting[init_i].lv_infoIcon = c_invalidDialogControlId;
        libDEAD_gv_dS_Crafting[init_i].lv_craftedItem = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
            libDEAD_gv_dS_Crafting[init_i].lv_dS_CraftingMaterialitem[init_i1] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        for (init_j = 0; init_j <= libDEAD_gv_dS_MaxPlayers; init_j += 1) {
            libDEAD_gv_dS_CraftingMaterialitem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libDEAD_gv_dS_GameUI[init_i].lv_gameUI = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        libDEAD_gv_dS_InventoryEnabled[init_i] = true;
    }
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            libDEAD_gv_dS_Timer[init_i][init_j] = TimerCreate();
        }
    }
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        libDEAD_gv_dS_HUD[init_i].lv_panel = c_invalidDialogControlId;
        libDEAD_gv_dS_HUD[init_i].lv_hPBar = c_invalidDialogControlId;
        libDEAD_gv_dS_HUD[init_i].lv_uTF = c_invalidDialogControlId;
        libDEAD_gv_dS_HUD[init_i].lv_weaponPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_HUD[init_i].lv_mainWpnIcon = c_invalidDialogControlId;
        libDEAD_gv_dS_HUD[init_i].lv_mainWpnName = c_invalidDialogControlId;
        libDEAD_gv_dS_HUD[init_i].lv_mainWpnAmmoIcon = c_invalidDialogControlId;
        libDEAD_gv_dS_HUD[init_i].lv_mainWpnAmmoCurrent = c_invalidDialogControlId;
        libDEAD_gv_dS_HUD[init_i].lv_mainWpnAmmoReserve = c_invalidDialogControlId;
        libDEAD_gv_dS_HUD[init_i].lv_eventLog = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_HUD[init_i].lv_logPanels[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_HUD[init_i].lv_logTitle[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_HUD[init_i].lv_logAmount[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_HUD[init_i].lv_logIcon[init_i1] = c_invalidDialogControlId;
        }
        libDEAD_gv_dS_HUD[init_i].lv_timerPanel = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_HUD[init_i].lv_timerWindow[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_HUD[init_i].lv_timerIcon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_HUD[init_i].lv_timerProgress[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_HUD[init_i].lv_timerLabel[init_i1] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        libDEAD_gv_dS_ContextTarget[init_i] = libDEAD_ge_ContextTarget_NoTarget;
    }
    for (init_i = 0; init_i <= libDEAD_gv_eCL__maxslots; init_i += 1) {
        for (init_j = 0; init_j <= libDEAD_gv_dS_MaxPlayers; init_j += 1) {
            libDEAD_gv_dS_InventorySlot_Category[init_i][init_j] = "All";
        }
    }
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        libDEAD_gv_dS_Inventory[init_i].lv_inventoryPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_characterPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_headPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_headBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_lArmPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_lArmBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_rArmPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_rArmBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_torsoPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_torsoBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_stomachPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_stomachBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_lLegPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_lLegBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_rLegPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_rLegBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_vitalsFoodBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_vitalsWaterBar = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_equipmentButton[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_equipmentIcon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_equipmentName[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_equipmentDurability[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_equipmentCategory[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_equipmentUse[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_equipmentUseDesc[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_equipmentLore[init_i1] = c_invalidDialogControlId;
        }
        libDEAD_gv_dS_Inventory[init_i].lv_inventoryModule = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_itemSlots[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_itemName[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_itemType[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_itemUse[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_itemDesc[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_itemLore[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_itemIcon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_itemQuantity[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_itemDurability[init_i1] = c_invalidDialogControlId;
        }
        libDEAD_gv_dS_Inventory[init_i].lv_keyModule = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_keySlots[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_keyName[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_keyType[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_keyUse[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_keyDesc[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_keyLore[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_keyIcon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_keyQuantity[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libDEAD_gv_eCL__maxslots; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_keyDurability[init_i1] = c_invalidDialogControlId;
        }
        libDEAD_gv_dS_Inventory[init_i].lv_lootPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_lootPanelTitle = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_lootSlots[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_lootName[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_lootType[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_lootUse[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_lootDesc[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_lootLore[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_lootIcon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_lootQuantity[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
            libDEAD_gv_dS_Inventory[init_i].lv_lootDurability[init_i1] = c_invalidDialogControlId;
        }
        libDEAD_gv_dS_Inventory[init_i].lv_takeButton = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_lootAllButton = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_context_Examine = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_context_Use = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_context_Equip = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_context_Transfer = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_context_PH = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_context_PH2 = c_invalidDialogControlId;
        libDEAD_gv_dS_Inventory[init_i].lv_context_Discard = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 200; init_i += 1) {
        libDEAD_gv_dS_CrateSize[init_i] = 1;
    }
    for (init_i = 0; init_i <= libDEAD_gv_dS_MaxPlayers; init_i += 1) {
        libDEAD_gv_dS_Character[init_i].lv_characterPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Character[init_i].lv_headPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Character[init_i].lv_headBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Character[init_i].lv_torsoPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Character[init_i].lv_torsoBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Character[init_i].lv_legsPanel = c_invalidDialogControlId;
        libDEAD_gv_dS_Character[init_i].lv_legsBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Character[init_i].lv_vitalsFoodBar = c_invalidDialogControlId;
        libDEAD_gv_dS_Character[init_i].lv_vitalsWaterBar = c_invalidDialogControlId;
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Character[init_i].lv_equipmentButton[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Character[init_i].lv_equipmentIcon[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Character[init_i].lv_equipmentName[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Character[init_i].lv_equipmentDurability[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Character[init_i].lv_equipmentCategory[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Character[init_i].lv_equipmentUse[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Character[init_i].lv_equipmentUseDesc[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
            libDEAD_gv_dS_Character[init_i].lv_equipmentLore[init_i1] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libDEAD_gv_dS_InteractPrompt[init_i].lv_dialog = c_invalidDialogId;
        libDEAD_gv_dS_InteractPrompt[init_i].lv_button = c_invalidDialogControlId;
        libDEAD_gv_dS_InteractPrompt[init_i].lv_icon = c_invalidDialogControlId;
        libDEAD_gv_dS_InteractPrompt[init_i].lv_hotkey = c_invalidDialogControlId;
    }
}

// Presets
// Functions
void libDEAD_gf_DEBUG_GivePlayerItem (int lp_player, bool lp_displayMessage, string lp_item, int lp_amount) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto69C4BF4C_ae = 7;
    const int auto69C4BF4C_ai = 1;
    bool auto01007791_val;
    const int auto6DF5537F_ae = 7;
    const int auto6DF5537F_ai = 1;
    bool auto358AAC78_val;

    // Variable Initialization

    // Implementation
    if ((libDEAD_gf_ReturnItemPropertyCategory(lp_item) == "Key")) {
        lv_index = 1;
        for ( ; ( (auto6DF5537F_ai >= 0 && lv_index <= auto6DF5537F_ae) || (auto6DF5537F_ai < 0 && lv_index >= auto6DF5537F_ae) ) ; lv_index += auto6DF5537F_ai ) {
            if ((libDEAD_gv_dS_KeySlot[lv_index][lp_player] == null)) {
                libDEAD_gv_dS_KeySlot[lv_index][lp_player] = lp_item;
                libDEAD_gv_dS_KeyAmount[lv_index][lp_player] = lp_amount;
                auto358AAC78_val = lp_displayMessage;
                if (auto358AAC78_val == true) {
                    libDEAD_gf_DS_DisplayLootEvent(lp_player, lp_amount, lp_item);
                }
                else {
                }
                break;
            }

        }
        libDEAD_gf_UpdateInventoryPanel(lp_player);
        return ;
    }
    else {
        lv_index = 1;
        for ( ; ( (auto69C4BF4C_ai >= 0 && lv_index <= auto69C4BF4C_ae) || (auto69C4BF4C_ai < 0 && lv_index >= auto69C4BF4C_ae) ) ; lv_index += auto69C4BF4C_ai ) {
            if ((libDEAD_gv_dS_InventoryItem[lv_index][lp_player] == null)) {
                libDEAD_gv_dS_InventoryItem[lv_index][lp_player] = lp_item;
                libDEAD_gv_dS_InventoryAmount[lv_index][lp_player] = lp_amount;
                libDEAD_gv_dS_InventoryDurability[lv_index][lp_player] = libDEAD_gf_ReturnItemPropertyMaxDurability(lp_item);
                auto01007791_val = lp_displayMessage;
                if (auto01007791_val == true) {
                    libDEAD_gf_DS_DisplayLootEvent(lp_player, lp_amount, lp_item);
                }
                else {
                }
                break;
            }

        }
        libDEAD_gf_UpdateInventoryPanel(lp_player);
        return ;
    }
}

void libDEAD_gf_DEBUG_GivePlayerItemToSlot (int lp_player, bool lp_displayMessage, string lp_item, int lp_amount, int lp_slot) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libDEAD_gv_dS_InventoryItem[lp_slot][lp_player] = lp_item;
    libDEAD_gv_dS_InventoryAmount[lp_slot][lp_player] = lp_amount;
    libDEAD_gv_dS_InventoryDurability[lp_slot][lp_player] = libDEAD_gf_ReturnItemPropertyMaxDurability(lp_item);
    if ((lp_displayMessage == true)) {
        libDEAD_gf_DS_DisplayLootEvent(lp_player, lp_amount, lp_item);
    }
    libDEAD_gf_UpdateInventoryPanel(lp_player);
}

void libDEAD_gf_DEBUG_EnableDebug () {
    // Automatic Variable Declarations
    // Implementation
    libDEAD_gv_dEBUGMode = true;
}

void libDEAD_gf_SendDebugMessage (string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    if ((libDEAD_gv_dEBUGMode != true)) {
        return ;
    }
    TextExpressionSetToken("Param/Expression/lib_DEAD_A9F6A2E0", "A", StringToText(lp_message));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_DEAD_A9F6A2E0"));
}

void libDEAD_gf_ShowHideConfirmationWindow (int lp_player, bool lp_showHide, int lp_confirmType) {
    // Automatic Variable Declarations
    bool auto059EBF52_val;
    int auto0F4E260B_val;
    int autoAA618B52_val;

    // Implementation
    DialogControlSetVisible(libDEAD_gv_dS_Confirmation[lp_player].lv_panel, PlayerGroupAll(), lp_showHide);
    libDEAD_gv_dS_ConfirmType[lp_player] = libDEAD_ge_ConfirmType_None;
    auto059EBF52_val = lp_showHide;
    if (auto059EBF52_val == true) {
        auto0F4E260B_val = lp_player;
        if (auto0F4E260B_val == 1) {
            TriggerEnable(libDEAD_gt_DS_ConfirmYesP1, true);
            TriggerEnable(libDEAD_gt_DS_ConfirmNoP1, true);
        }
        else if (auto0F4E260B_val == 2) {
            TriggerEnable(libDEAD_gt_DS_ConfirmYesP2, true);
            TriggerEnable(libDEAD_gt_DS_ConfirmNoP2, true);
        }
        else {
        }
        autoAA618B52_val = lp_confirmType;
        if (autoAA618B52_val == libDEAD_ge_ConfirmType_Discard) {
            libDEAD_gv_dS_ConfirmType[lp_player] = libDEAD_ge_ConfirmType_Discard;
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Confirmation[lp_player].lv_title, StringExternal("Param/Value/lib_DEAD_7763CBE0"), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_DEAD_AC304D94", "A", IntToText(libDEAD_gv_dS_ContextItemAmount[lp_player]));
            TextExpressionSetToken("Param/Expression/lib_DEAD_AC304D94", "B", StringToText(libDEAD_gf_ReturnItemPropertyName(libDEAD_gv_dS_ContextItem[lp_player])));
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Confirmation[lp_player].lv_desc, TextExpressionAssemble("Param/Expression/lib_DEAD_AC304D94"), PlayerGroupAll());
        }
        else {
        }
    }
    else {
    }
}

void libDEAD_gf_DS_CreateConfirm (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(libDEAD_gv_dS_GameUI[lp_player].lv_gameUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("ConfirmPanel"));
    libDEAD_gv_dS_Confirmation[lp_player].lv_panel = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Confirmation[lp_player].lv_panel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ConfirmWindow/Confirm"));
    libDEAD_gv_dS_Confirmation[lp_player].lv_confirmButton = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Confirmation[lp_player].lv_panel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("ConfirmWindow/Deny"));
    libDEAD_gv_dS_Confirmation[lp_player].lv_cancelButton = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Confirmation[lp_player].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("ConfirmWindow/Header/HeaderTitle"));
    libDEAD_gv_dS_Confirmation[lp_player].lv_title = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Confirmation[lp_player].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("ConfirmWindow/Desc"));
    libDEAD_gv_dS_Confirmation[lp_player].lv_desc = DialogControlLastCreated();
}

void libDEAD_gf_DS_CreateInspectWindow (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(libDEAD_gv_dS_GameUI[lp_player].lv_gameUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("InspectPanel"));
    libDEAD_gv_dS_Inspect[lp_player].lv_panel = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("FullScreenButton"));
    libDEAD_gv_dS_Inspect[lp_player].lv_backgroundButton = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("InfoFrame/Icon"));
    libDEAD_gv_dS_Inspect[lp_player].lv_icon = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("InfoFrame/Quantity"));
    libDEAD_gv_dS_Inspect[lp_player].lv_quantity = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("InfoFrame/Durability"));
    libDEAD_gv_dS_Inspect[lp_player].lv_durability = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("InfoFrame/Quality"));
    libDEAD_gv_dS_Inspect[lp_player].lv_type = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("InfoFrame/Name"));
    libDEAD_gv_dS_Inspect[lp_player].lv_title = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("InfoFrame/UseType"));
    libDEAD_gv_dS_Inspect[lp_player].lv_useType = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("InfoFrame/UseDesc"));
    libDEAD_gv_dS_Inspect[lp_player].lv_useDesc = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("InfoFrame/Lore"));
    libDEAD_gv_dS_Inspect[lp_player].lv_lore = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inspect[lp_player].lv_panel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("InspectWindow"));
    libDEAD_gv_dS_Inspect[lp_player].lv_inspectWindow = DialogControlLastCreated();
    DialogControlSetAnimationState(libDEAD_gv_dS_Inspect[lp_player].lv_inspectWindow, PlayerGroupAll(), "ItemType", "Invalid");
}

void libDEAD_gf_ShowHideInspectWindow (int lp_player, bool lp_showHide) {
    // Automatic Variable Declarations
    bool autoE803EDAD_val;

    // Implementation
    autoE803EDAD_val = lp_showHide;
    if (autoE803EDAD_val == true) {
        libDEAD_gf_UpdateInspectWindow(lp_player);
        DialogControlSetVisible(libDEAD_gv_dS_Inspect[lp_player].lv_panel, PlayerGroupAll(), lp_showHide);
    }
    else if (autoE803EDAD_val == false) {
        DialogControlSetVisible(libDEAD_gv_dS_Inspect[lp_player].lv_panel, PlayerGroupAll(), lp_showHide);
    }
    else {
    }
}

void libDEAD_gf_UpdateInspectWindow (int lp_player) {
    // Automatic Variable Declarations
    string auto4B2E49FE_val;

    // Implementation
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inspect[lp_player].lv_title, StringToText(libDEAD_gf_ReturnItemPropertyName(libDEAD_gv_dS_ContextItem[lp_player])), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inspect[lp_player].lv_type, StringToText(libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_ContextItem[lp_player])), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inspect[lp_player].lv_useType, StringToText(libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_ContextItem[lp_player])), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inspect[lp_player].lv_useDesc, libDEAD_gf_ReturnItemPropertyDescription(libDEAD_gv_dS_ContextItem[lp_player]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inspect[lp_player].lv_lore, libDEAD_gf_ReturnItemPropertyLore(libDEAD_gv_dS_ContextItem[lp_player]), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Inspect[lp_player].lv_icon, libDEAD_gf_ReturnItemPropertyIcon(libDEAD_gv_dS_ContextItem[lp_player]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inspect[lp_player].lv_durability, IntToText(libDEAD_gv_dS_ContextItemDurability[lp_player]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inspect[lp_player].lv_quantity, IntToText(libDEAD_gv_dS_ContextItemAmount[lp_player]), PlayerGroupAll());
    DialogControlSetAnimationState(libDEAD_gv_dS_Inspect[lp_player].lv_inspectWindow, PlayerGroupAll(), "ItemType", libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_ContextItem[lp_player]));
    auto4B2E49FE_val = libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_ContextItem[lp_player]);
    if (auto4B2E49FE_val == "Drink") {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inspect[lp_player].lv_inspectWindow, PlayerGroupAll(), "ItemUse", "Water");
    }
    else if (auto4B2E49FE_val == "Heal") {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inspect[lp_player].lv_inspectWindow, PlayerGroupAll(), "ItemUse", "Medicine");
    }
    else if (auto4B2E49FE_val == "Eat") {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inspect[lp_player].lv_inspectWindow, PlayerGroupAll(), "ItemUse", "Food");
    }
    else {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inspect[lp_player].lv_inspectWindow, PlayerGroupAll(), "ItemUse", "Any");
    }
    if ((libDEAD_gv_dS_ContextItemAmount[lp_player] > 1)) {
        DialogControlSetVisible(libDEAD_gv_dS_Inspect[lp_player].lv_quantity, PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(libDEAD_gv_dS_Inspect[lp_player].lv_quantity, PlayerGroupAll(), true);
    }
}

void libDEAD_gf_KL_SwapToWeapon (int lp_player, int lp_weaponIndex) {
    // Variable Declarations
    int lv_currentWeaponIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentWeaponIndex = libDEAD_gv_activeWeaponIndex[lp_player];
    if ((lv_currentWeaponIndex == lp_weaponIndex)) {
        return ;
    }
    if ((libDEAD_gv_activeWeaponIndex[lp_player] == 0) && (libDEAD_gv_activeWeaponInstance[lp_player][lp_weaponIndex] != null)) {
        libDEAD_gv_activeWeaponIndex[lp_player] = lp_weaponIndex;
        return ;
    }

    if ((libDEAD_gv_activeWeaponInstance[lp_player][lp_weaponIndex] != null)) {
        libDEAD_gv_activeWeaponIndex[lp_player] = lp_weaponIndex;
    }
    else {
        libDEAD_gv_activeWeaponIndex[lp_player] = lv_currentWeaponIndex;
    }
}

fixed libDEAD_gf_ReturnEquipmentPropertyMoveSpeed (string lp_item) {
    // Variable Declarations
    string lv_itemStats;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_itemStats = UserDataGetUserInstance("Items", lp_item, "Item Stats", 1);
    if ((lv_itemStats == null)) {
        return 0;
    }
    return UserDataGetFixed("ModifierStats", lv_itemStats, "Move Speed", 1);
}

int libDEAD_gf_ReturnEquipmentPropertyInventory (string lp_item) {
    // Variable Declarations
    string lv_itemStats;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_itemStats = UserDataGetUserInstance("Items", lp_item, "Item Stats", 1);
    if ((lv_itemStats == null)) {
        return 0;
    }
    return UserDataGetInt("ModifierStats", lv_itemStats, "InventorySize", 1);
}

int libDEAD_gf_ReturnEquipmentPropertyHealth (string lp_item) {
    // Variable Declarations
    string lv_itemStats;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_itemStats = UserDataGetUserInstance("Items", lp_item, "Item Stats", 1);
    if ((lv_itemStats == null)) {
        return 0;
    }
    return UserDataGetInt("ModifierStats", lv_itemStats, "Health", 1);
}

int libDEAD_gf_ReturnEquipmentPropertyVision (string lp_item) {
    // Variable Declarations
    string lv_itemStats;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_itemStats = UserDataGetUserInstance("Items", lp_item, "Item Stats", 1);
    if ((lv_itemStats == null)) {
        return 0;
    }
    return UserDataGetInt("ModifierStats", lv_itemStats, "Vision Range", 1);
}

void libDEAD_gf_CheckBaseStatModifiers () {
    // Automatic Variable Declarations
    // Implementation
    libDEAD_gv_baseMoveSpeed = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "Separatist", "Speed", c_playerAny);
    libDEAD_gv_baseVisionRange = CatalogFieldValueGetAsInt(c_gameCatalogUnit, "Separatist", "Sight", c_playerAny);
}

trigger auto_libDEAD_gf_UpdateStatModifiers_Trigger = null;
int auto_libDEAD_gf_UpdateStatModifiers_lp_player;

void libDEAD_gf_UpdateStatModifiers (int lp_player) {
    auto_libDEAD_gf_UpdateStatModifiers_lp_player = lp_player;

    if (auto_libDEAD_gf_UpdateStatModifiers_Trigger == null) {
        auto_libDEAD_gf_UpdateStatModifiers_Trigger = TriggerCreate("auto_libDEAD_gf_UpdateStatModifiers_TriggerFunc");
    }

    TriggerExecute(auto_libDEAD_gf_UpdateStatModifiers_Trigger, false, false);
}

bool auto_libDEAD_gf_UpdateStatModifiers_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libDEAD_gf_UpdateStatModifiers_lp_player;

    // Variable Declarations
    string lv_item;
    int lv_index;
    fixed lv_moveSpeed;
    int lv_armor;
    int lv_hP;
    fixed lv_oxygen;
    int lv_inventory;
    int lv_vision;

    // Automatic Variable Declarations
    const int auto1CE59428_ae = 5;
    const int auto1CE59428_ai = 1;
    int autoA8336584_val;
    const int autoEDFCF186_ae = libDEAD_gv_eCL__maxslots;
    const int autoEDFCF186_ai = 1;
    const int auto58356EBA_ae = 4;
    const int auto58356EBA_ai = 1;
    const int auto0345824F_ae = 4;
    const int auto0345824F_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(0.1, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto1CE59428_ai >= 0 && lv_index <= auto1CE59428_ae) || (auto1CE59428_ai < 0 && lv_index >= auto1CE59428_ae) ) ; lv_index += auto1CE59428_ai ) {
        autoA8336584_val = lv_index;
        if (autoA8336584_val == 1) {
            lv_item = libDEAD_gf_ECL_ReturnEquippedItem(lp_player, "Head");
        }
        else if (autoA8336584_val == 2) {
            lv_item = libDEAD_gf_ECL_ReturnEquippedItem(lp_player, "Suit");
        }
        else if (autoA8336584_val == 3) {
            lv_item = libDEAD_gf_ECL_ReturnEquippedItem(lp_player, "Boots");
        }
        else if (autoA8336584_val == 4) {
            lv_item = libDEAD_gf_ECL_ReturnEquippedItem(lp_player, "Pack");
        }
        else if (autoA8336584_val == 5) {
            lv_item = libDEAD_gf_ECL_ReturnEquippedItem(lp_player, "Augment");
        }
        else {
        }
        if ((lv_item != null)) {
            lv_vision += libDEAD_gf_ReturnEquipmentPropertyVision(lv_item);
            lv_moveSpeed += libDEAD_gf_ReturnEquipmentPropertyMoveSpeed(lv_item);
            lv_inventory += libDEAD_gf_ReturnEquipmentPropertyInventory(lv_item);
        }
    }
    lv_vision += libDEAD_gv_baseVisionRange;
    lv_moveSpeed += libDEAD_gv_baseMoveSpeed;
    lv_inventory += libDEAD_gv_baseInventory;
    UnitSetPropertyFixed(libDEAD_gv_playerUnit[lp_player], c_unitPropBaseMovementSpeed, lv_moveSpeed);
    UnitSetPropertyFixed(libDEAD_gv_playerUnit[lp_player], c_unitPropMovementSpeed, lv_moveSpeed);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, UnitGetType(libDEAD_gv_playerUnit[lp_player]), "Sight", lp_player, IntToFixed(lv_vision));
    lv_index = 10;
    for ( ; ( (autoEDFCF186_ai >= 0 && lv_index <= autoEDFCF186_ae) || (autoEDFCF186_ai < 0 && lv_index >= autoEDFCF186_ae) ) ; lv_index += autoEDFCF186_ai ) {
        if (((libDEAD_gv_eCL__equipmentslots + lv_inventory) < lv_index)) {
            libDEAD_gf_ECL_SLOT_lock_unlock(lp_player, lv_index, true);
        }
        else {
            libDEAD_gf_ECL_SLOT_lock_unlock(lp_player, lv_index, false);
        }
    }
    lv_index = 1;
    for ( ; ( (auto58356EBA_ai >= 0 && lv_index <= auto58356EBA_ae) || (auto58356EBA_ai < 0 && lv_index >= auto58356EBA_ae) ) ; lv_index += auto58356EBA_ai ) {
        if ((libDEAD_gf_ECL_ReturnWeaponItem(lp_player, lv_index) != null)) {
            libDEAD_gv_activeWeaponInstance[lp_player][lv_index] = libDEAD_gf_ECL_ReturnWeaponItem(lp_player, lv_index);
        }
        else {
            libDEAD_gv_activeWeaponInstance[lp_player][lv_index] = null;
        }
    }
    lv_index = 1;
    for ( ; ( (auto0345824F_ai >= 0 && lv_index <= auto0345824F_ae) || (auto0345824F_ai < 0 && lv_index >= auto0345824F_ae) ) ; lv_index += auto0345824F_ai ) {
        if ((libDEAD_gf_ECL_ReturnWeaponItem(lp_player, lv_index) != null)) {
            libDEAD_gf_KL_SwapToWeapon(EventPlayer(), lv_index);
            break;
        }

    }
    return true;
}

void libDEAD_gf_ECL_ITEM_add (int lp_player, string lp_item, int lp_amount, bool lp_displayMessage) {
    // Variable Declarations
    bool lv_fREE;
    int lv_item_width;
    int lv_item_height;
    int lv_item_Index;
    int lv_d_quantity;
    int lv_quantity;
    bool lv_noOtherStackFound;
    int lv_firstFreeSlot;

    // Automatic Variable Declarations
    int autoFA7D2691_ae;
    int autoFA7D2691_var;
    int auto55CCDCEF_ae;
    int auto55CCDCEF_var;
    int auto8CAFA1D0_ae;
    const int auto8CAFA1D0_ai = 1;
    string auto04793D7E_val;

    // Variable Initialization
    lv_item_width = libDEAD_gv_eCL_Item_width;
    lv_item_height = libDEAD_gv_eCL_Item_height;
    lv_quantity = lp_amount;
    lv_noOtherStackFound = true;

    // Implementation
    autoFA7D2691_ae = libDEAD_gv_eCL__Inventory[lp_player].lv_iNV_slots;
    autoFA7D2691_var = 1;
    for ( ; autoFA7D2691_var <= autoFA7D2691_ae; autoFA7D2691_var += 1 ) {
        if ((libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var] > 0) && (lv_quantity > 0) && (libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]][lp_player] == lp_item) && (libDEAD_gf_ReturnItemPropertyMaxAmount(libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]][lp_player]) > 1)) {
            lv_d_quantity = libNtve_gf_ArithmeticIntClamp((libDEAD_gf_ReturnItemPropertyMaxAmount(libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]][lp_player]) - libDEAD_gf_ReturnInventoryItemAmount(lp_player, libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var])), 0, lv_quantity);
            libDEAD_gv_dS_InventoryAmount[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]][lp_player] += lv_d_quantity;
            if ((libDEAD_gf_ReturnInventoryItemAmount(lp_player, libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]) > 1)) {
                DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]], PlayerGroupAll(), "State", "Stack");
            }
            else {
                DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]], PlayerGroupAll(), "State", "SingleItem");
            }
            TextExpressionSetToken("Param/Expression/lib_DEAD_CAAA28BE", "A", IntToText(libDEAD_gf_ReturnInventoryItemAmount(lp_player, libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var])));
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemQuantity[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]], TextExpressionAssemble("Param/Expression/lib_DEAD_CAAA28BE"), PlayerGroupAll());
            DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]], PlayerGroupAll(), "ItemType", UserDataGetString("Items", libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[autoFA7D2691_var]][lp_player], "Category", 1));
            lv_quantity -= lv_d_quantity;
            if ((lv_quantity > 0)) {
            }
            else {
                break;
            }
        }

    }
    if ((lv_quantity > 0)) {
        auto55CCDCEF_ae = libDEAD_gv_eCL__Inventory[lp_player].lv_iNV_slots;
        auto55CCDCEF_var = 1;
        for ( ; auto55CCDCEF_var <= auto55CCDCEF_ae; auto55CCDCEF_var += 1 ) {
            if ((libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[auto55CCDCEF_var] == 0) && (libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_locked[auto55CCDCEF_var] == false) && ((libDEAD_gf_ReturnItemPropertyCategory(lp_item) == libDEAD_gv_dS_InventorySlot_Category[auto55CCDCEF_var][lp_player]) || (libDEAD_gv_dS_InventorySlot_Category[auto55CCDCEF_var][lp_player] == "All"))) {
                auto8CAFA1D0_ae = libDEAD_gv_eCL__Inventory[lp_player].lv_n_items;
                lv_item_Index = 1;
                for ( ; ( (auto8CAFA1D0_ai >= 0 && lv_item_Index <= auto8CAFA1D0_ae) || (auto8CAFA1D0_ai < 0 && lv_item_Index >= auto8CAFA1D0_ae) ) ; lv_item_Index += auto8CAFA1D0_ai ) {
                    if ((libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM_slot[lv_item_Index] == 0)) {
                        lv_item_Index = lv_item_Index;
                        lv_fREE = true;
                        break;
                    }

                }
                if ((lv_fREE == false)) {
                    libDEAD_gv_eCL__Inventory[lp_player].lv_n_items += 1;
                    lv_item_Index = libDEAD_gv_eCL__Inventory[lp_player].lv_n_items;
                }

                DialogControlCreateInPanelFromTemplate(libDEAD_gv_eCL__Inventory[lp_player].lv__INV, c_triggerControlTypeButton, "ECL_DRAGGABLE/Item_Template");
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupSingle(lp_player), lv_item_width, lv_item_height);
                libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index] = DialogControlLastCreated();
                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeEditBox, libNtve_gf_ConvertStringToUILayoutFrameName("DragState_Box"));
                libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM_state_box[lv_item_Index] = DialogControlLastCreated();
                TriggerAddEventDialogControl(libDEAD_gt_ECL__DRAG_ON_OFF, lp_player, libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM_state_box[lv_item_Index], c_triggerControlEventTypeTextChanged);
                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quantity"));
                libDEAD_gv_dS_Inventory[lp_player].lv_itemQuantity[lv_item_Index] = DialogControlLastCreated();
                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Icon"));
                libDEAD_gv_dS_Inventory[lp_player].lv_itemIcon[lv_item_Index] = DialogControlLastCreated();
                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Name"));
                libDEAD_gv_dS_Inventory[lp_player].lv_itemName[lv_item_Index] = DialogControlLastCreated();
                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quality"));
                libDEAD_gv_dS_Inventory[lp_player].lv_itemType[lv_item_Index] = DialogControlLastCreated();
                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseType"));
                libDEAD_gv_dS_Inventory[lp_player].lv_itemUse[lv_item_Index] = DialogControlLastCreated();
                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseDesc"));
                libDEAD_gv_dS_Inventory[lp_player].lv_itemDesc[lv_item_Index] = DialogControlLastCreated();
                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Lore"));
                libDEAD_gv_dS_Inventory[lp_player].lv_itemLore[lv_item_Index] = DialogControlLastCreated();
                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Durability"));
                libDEAD_gv_dS_Inventory[lp_player].lv_itemDurability[lv_item_Index] = DialogControlLastCreated();
                libDEAD_gv_dS_InventoryItem[lv_item_Index][lp_player] = lp_item;
                libDEAD_gv_dS_InventoryAmount[lv_item_Index][lp_player] = lv_quantity;
                libDEAD_gv_dS_InventoryDurability[lv_item_Index][lp_player] = libDEAD_gf_ReturnItemPropertyMaxDurability(lp_item);
                if ((lp_displayMessage == true)) {
                    libDEAD_gf_DS_DisplayLootEvent(lp_player, lv_quantity, lp_item);
                }
                libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Inventory[lp_player].lv_itemIcon[lv_item_Index], UserDataGetImagePath("Items", libDEAD_gv_dS_InventoryItem[lv_item_Index][lp_player], "Icon", 1), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemName[lv_item_Index], StringToText(UserDataGetString("Items", libDEAD_gv_dS_InventoryItem[lv_item_Index][lp_player], "Name", 1)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemType[lv_item_Index], StringToText(UserDataGetString("Items", libDEAD_gv_dS_InventoryItem[lv_item_Index][lp_player], "Category", 1)), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemDesc[lv_item_Index], UserDataGetText("Items", libDEAD_gv_dS_InventoryItem[lv_item_Index][lp_player], "Description", 1), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemLore[lv_item_Index], UserDataGetText("Items", libDEAD_gv_dS_InventoryItem[lv_item_Index][lp_player], "Lore", 1), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemUse[lv_item_Index], StringToText(libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_InventoryItem[lv_item_Index][lp_player])), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/lib_DEAD_84F65ECB", "A", IntToText(libDEAD_gf_ReturnInventoryItemDurability(lp_player, lv_item_Index)));
                libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemDurability[lv_item_Index], TextExpressionAssemble("Param/Expression/lib_DEAD_84F65ECB"), PlayerGroupAll());
                auto04793D7E_val = libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_InventoryItem[lv_item_Index][lp_player]);
                if (auto04793D7E_val == "Drink") {
                    DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], PlayerGroupAll(), "ItemUse", "Water");
                }
                else if (auto04793D7E_val == "Heal") {
                    DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], PlayerGroupAll(), "ItemUse", "Medicine");
                }
                else if (auto04793D7E_val == "Eat") {
                    DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], PlayerGroupAll(), "ItemUse", "Food");
                }
                else {
                    DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], PlayerGroupAll(), "ItemUse", "Any");
                }
                if ((libDEAD_gf_ReturnInventoryItemAmount(lp_player, lv_item_Index) != 0)) {
                    if ((libDEAD_gf_ReturnInventoryItemAmount(lp_player, lv_item_Index) > 1)) {
                        DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], PlayerGroupAll(), "State", "Stack");
                    }
                    else {
                        DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], PlayerGroupAll(), "State", "SingleItem");
                    }
                    TextExpressionSetToken("Param/Expression/lib_DEAD_DDD94F7C", "A", IntToText(libDEAD_gf_ReturnInventoryItemAmount(lp_player, lv_item_Index)));
                    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemQuantity[lv_item_Index], TextExpressionAssemble("Param/Expression/lib_DEAD_DDD94F7C"), PlayerGroupAll());
                    DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], PlayerGroupAll(), "ItemType", UserDataGetString("Items", libDEAD_gv_dS_InventoryItem[lv_item_Index][lp_player], "Category", 1));
                }

                DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], c_triggerControlTypeImage, "CardAnchorImage");
                libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM_anchor[lv_item_Index] = DialogControlLastCreated();
                DialogControlSetPositionRelative(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM_anchor[lv_item_Index], PlayerGroupSingle(lp_player), c_anchorCenter, libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT[auto55CCDCEF_var], c_anchorCenter, 0, 0);
                DialogControlSetPositionRelative(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], PlayerGroupSingle(lp_player), c_anchorCenter, libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM_anchor[lv_item_Index], c_anchorCenter, 0, 0);
                DialogControlSetSize(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lv_item_Index], PlayerGroupSingle(lp_player), lv_item_width, lv_item_height);
                libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM_slot[lv_item_Index] = auto55CCDCEF_var;
                libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[auto55CCDCEF_var] = lv_item_Index;
                libDEAD_gf_ECL__EQUIP(lp_player, auto55CCDCEF_var, libDEAD_ge_EQUIPUNEQUIP_EQUIP);
                lv_quantity = 0;
                break;
            }

        }
    }

    if ((lv_quantity > 0)) {
        libDEAD_gf_ECL_ITEM_drop_to_ground(lp_player, lp_item, lv_quantity, UnitGetPosition(libDEAD_gv_playerUnit[lp_player]));
    }

}

void libDEAD_gf_ECL_ITEM_remove (int lp_player, int lp_index) {
    // Variable Declarations
    bool lv_fREE;
    int lv_item_width;
    int lv_item_height;
    int lv_slot_Index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item_width = libDEAD_gv_eCL_Item_width;
    lv_item_height = libDEAD_gv_eCL_Item_height;

    // Implementation
    DialogControlDestroy(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lp_index]);
    lv_slot_Index = libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM_slot[lp_index];
    libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM_slot[lp_index] = 0;
    libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[lv_slot_Index] = 0;
    libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[lv_slot_Index] = 0;
}

void libDEAD_gf_ECL_ITEM_drop_to_ground (int lp_player, string lp_item, int lp_amount, point lp_spawnPoint) {
    // Variable Declarations
    bool lv_fREE;
    int lv_item_width;
    int lv_item_height;
    int lv_slot_Index;
    unit lv_uNIT_item;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_item_width = libDEAD_gv_eCL_Item_width;
    lv_item_height = libDEAD_gv_eCL_Item_height;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PLootPermanent", c_unitCreateIgnorePlacement, lp_player, lp_spawnPoint);
    lv_uNIT_item = UnitLastCreated();
    UnitGroupAdd(libDEAD_gv_dS_Loot[lp_player], lv_uNIT_item);
    libDEAD_gf_ECL_GroundItemData(lp_amount, lp_item, lv_uNIT_item);
    DialogControlHookupUnitStatus(c_triggerControlTypeCommandPanel, "CommandPanel", lv_uNIT_item);
    libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(lv_uNIT_item), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ItemLabel", lv_uNIT_item);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(libDEAD_gf_ReturnItemPropertyName(lp_item)), PlayerGroupAll());
    UnitCreateEffectPoint(lv_uNIT_item, "ECLDROPLOOT", RegionRandomPoint(RegionCircle(lp_spawnPoint, 2.0)));
    if ((libDEAD_gv_dS_ShowHideLoot[lp_player] == true)) {
        UnitStatusBarOverride(lv_uNIT_item, c_unitStatusGroupOwner);
    }

}

void libDEAD_gf_ECL_SLOT_lock_unlock (int lp_player, int lp_slot_ID, bool lp_lockUnlock) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_lockUnlock == true)) {
        libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_locked[lp_slot_ID] = true;
        DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_bg[lp_slot_ID], PlayerGroupSingle(lp_player), "SlotState", "LOCKED");
    }
    else {
        libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_locked[lp_slot_ID] = false;
        DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_bg[lp_slot_ID], PlayerGroupSingle(lp_player), "SlotState", "UNLOCKED");
    }
}

void libDEAD_gf_ECL__EQUIP (int lp_player, int lp_sLOT, int lp_eQUIPUNEQUIP) {
    // Variable Declarations
    string lv_item;
    string lv_itemStats;
    int lv_index;
    fixed lv_moveSpeed;
    int lv_armor;
    int lv_hP;
    int lv_hP_percent;
    int lv_hP_reg;
    int lv_shields;
    int lv_shields_percent;
    int lv_shields_reg;
    fixed lv_oxygen;
    int lv_inventory;
    int lv_vision;
    string lv_bEHAVIOR_EQUIPMENT;

    // Automatic Variable Declarations
    string auto7F1DCA8C_val;
    string auto30B42D06_val;
    const int auto52B48827_ae = libDEAD_gv_eCL__maxslots;
    const int auto52B48827_ai = 1;
    const int autoF9C6E11C_ae = 4;
    const int autoF9C6E11C_ai = 1;
    const int auto999CB00D_ae = 4;
    const int auto999CB00D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_item = libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[lp_sLOT]][lp_player];
    lv_itemStats = UserDataGetUserInstance("Items", lv_item, "Item Stats", 1);
    if ((lp_eQUIPUNEQUIP == libDEAD_ge_EQUIPUNEQUIP_EQUIP)) {
        auto7F1DCA8C_val = libDEAD_gv_dS_InventorySlot_Category[lp_sLOT][lp_player];
        if (auto7F1DCA8C_val == "Head") {
            lv_bEHAVIOR_EQUIPMENT = "HEAD";
        }
        else if (auto7F1DCA8C_val == "Suit") {
            lv_bEHAVIOR_EQUIPMENT = "SUIT";
        }
        else if (auto7F1DCA8C_val == "Pack") {
            lv_bEHAVIOR_EQUIPMENT = "PACK";
            lv_inventory += libDEAD_gf_ReturnEquipmentPropertyInventory(lv_item);
        }
        else if (auto7F1DCA8C_val == "Boots") {
            lv_bEHAVIOR_EQUIPMENT = "BOOTS";
        }
        else if (auto7F1DCA8C_val == "Augment") {
            lv_bEHAVIOR_EQUIPMENT = "AUGMENT";
        }
        else if (auto7F1DCA8C_val == "Weapon") {
        }
        else {
        }
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, lv_bEHAVIOR_EQUIPMENT, "Modification.LifeArmorBonus", lp_player, UserDataGetFixed("ModifierStats", lv_itemStats, "Armor", 1));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, lv_bEHAVIOR_EQUIPMENT, "Modification.VitalMaxArray[" + IntToString(0) + "]", lp_player, UserDataGetInt("ModifierStats", lv_itemStats, "Health", 1));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, lv_bEHAVIOR_EQUIPMENT, "Modification.VitalMaxFractionArray[" + IntToString(0) + "]", lp_player, UserDataGetFixed("ModifierStats", lv_itemStats, "Health Percent", 1));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, lv_bEHAVIOR_EQUIPMENT, ("Modification.VitalRegenArray[0]"), lp_player, UserDataGetFixed("ModifierStats", lv_itemStats, "Health Regeneration", 1));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, lv_bEHAVIOR_EQUIPMENT, "Modification.MoveSpeedBonus", lp_player, UserDataGetFixed("ModifierStats", lv_itemStats, "Move Speed", 1));
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, lv_bEHAVIOR_EQUIPMENT, "Modification.MoveSpeedMultiplier", lp_player, UserDataGetFixed("ModifierStats", lv_itemStats, "Move Speed", 1));
        if ((UnitHasBehavior2(libDEAD_gv_playerUnit[lp_player], lv_bEHAVIOR_EQUIPMENT) == false)) {
            UnitBehaviorAdd(libDEAD_gv_playerUnit[lp_player], lv_bEHAVIOR_EQUIPMENT, libDEAD_gv_playerUnit[lp_player], 1);
        }

    }
    else if ((lp_eQUIPUNEQUIP == libDEAD_ge_EQUIPUNEQUIP_UNEQUIP)) {
        auto30B42D06_val = libDEAD_gv_dS_InventorySlot_Category[lp_sLOT][lp_player];
        if (auto30B42D06_val == "Head") {
            lv_bEHAVIOR_EQUIPMENT = "HEAD";
        }
        else if (auto30B42D06_val == "Suit") {
            lv_bEHAVIOR_EQUIPMENT = "SUIT";
        }
        else if (auto30B42D06_val == "Pack") {
            lv_bEHAVIOR_EQUIPMENT = "PACK";
            lv_inventory -= libDEAD_gf_ReturnEquipmentPropertyInventory(lv_item);
        }
        else if (auto30B42D06_val == "Boots") {
            lv_bEHAVIOR_EQUIPMENT = "BOOTS";
        }
        else if (auto30B42D06_val == "Augment") {
            lv_bEHAVIOR_EQUIPMENT = "AUGMENT";
        }
        else if (auto30B42D06_val == "Weapon") {
        }
        else {
        }
        UnitBehaviorRemove(libDEAD_gv_playerUnit[lp_player], lv_bEHAVIOR_EQUIPMENT, 1);
    }
    libDEAD_gv_eCL__Inventory[lp_player].lv_iNV_slots += lv_inventory;
    lv_index = (libDEAD_gv_eCL__equipmentslots + 1);
    for ( ; ( (auto52B48827_ai >= 0 && lv_index <= auto52B48827_ae) || (auto52B48827_ai < 0 && lv_index >= auto52B48827_ae) ) ; lv_index += auto52B48827_ai ) {
        if ((libDEAD_gv_eCL__Inventory[lp_player].lv_iNV_slots < lv_index)) {
            libDEAD_gf_ECL_SLOT_lock_unlock(lp_player, lv_index, true);
            if ((libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[lv_index] > 0)) {
                libDEAD_gf_ECL_ITEM_drop_to_ground(EventPlayer(), libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[lv_index]][lp_player], libDEAD_gv_dS_InventoryAmount[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[lv_index]][lp_player], UnitGetPosition(libDEAD_gv_playerUnit[lp_player]));
                libDEAD_gf_ECL_ITEM_remove(lp_player, libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[lv_index]);
            }

        }
        else {
            libDEAD_gf_ECL_SLOT_lock_unlock(lp_player, lv_index, false);
        }
    }
    lv_index = 1;
    for ( ; ( (autoF9C6E11C_ai >= 0 && lv_index <= autoF9C6E11C_ae) || (autoF9C6E11C_ai < 0 && lv_index >= autoF9C6E11C_ae) ) ; lv_index += autoF9C6E11C_ai ) {
        if ((libDEAD_gf_ECL_ReturnWeaponItem(lp_player, lv_index) != null)) {
            libDEAD_gv_activeWeaponInstance[lp_player][lv_index] = libDEAD_gf_ECL_ReturnWeaponItem(lp_player, lv_index);
        }
        else {
            libDEAD_gv_activeWeaponInstance[lp_player][lv_index] = null;
        }
    }
    lv_index = 1;
    for ( ; ( (auto999CB00D_ai >= 0 && lv_index <= auto999CB00D_ae) || (auto999CB00D_ai < 0 && lv_index >= auto999CB00D_ae) ) ; lv_index += auto999CB00D_ai ) {
        if ((libDEAD_gf_ECL_ReturnWeaponItem(lp_player, lv_index) != null)) {
            libDEAD_gf_KL_SwapToWeapon(EventPlayer(), lv_index);
            break;
        }

    }
}

string libDEAD_gf_ECL_ReturnEquippedItem (int lp_player, string lp_type) {
    // Automatic Variable Declarations
    string auto67D415F6_val;

    // Implementation
    auto67D415F6_val = lp_type;
    if (auto67D415F6_val == "Head") {
        return libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[1]][lp_player];
    }
    else if (auto67D415F6_val == "Suit") {
        return libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[2]][lp_player];
    }
    else if (auto67D415F6_val == "Boots") {
        return libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[3]][lp_player];
    }
    else if (auto67D415F6_val == "Pack") {
        return libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[4]][lp_player];
    }
    else if (auto67D415F6_val == "Augment") {
        return libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[5]][lp_player];
    }
    else {
        return null;
    }
}

string libDEAD_gf_ECL_ReturnWeaponItem (int lp_player, int lp_weaponIndex) {
    // Automatic Variable Declarations
    int auto378DC8E0_val;

    // Implementation
    auto378DC8E0_val = lp_weaponIndex;
    if (auto378DC8E0_val == 1) {
        return libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[6]][lp_player];
    }
    else if (auto378DC8E0_val == 2) {
        return libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[7]][lp_player];
    }
    else if (auto378DC8E0_val == 3) {
        return libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[8]][lp_player];
    }
    else if (auto378DC8E0_val == 4) {
        return libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[lp_player].lv_sLOT_item[9]][lp_player];
    }
    else {
        return null;
    }
}

trigger auto_libDEAD_gf_ECL_GroundItemData_Trigger = null;
int auto_libDEAD_gf_ECL_GroundItemData_lp_quantity;
string auto_libDEAD_gf_ECL_GroundItemData_lp_itemData;
unit auto_libDEAD_gf_ECL_GroundItemData_lp_item;

void libDEAD_gf_ECL_GroundItemData (int lp_quantity, string lp_itemData, unit lp_item) {
    auto_libDEAD_gf_ECL_GroundItemData_lp_quantity = lp_quantity;
    auto_libDEAD_gf_ECL_GroundItemData_lp_itemData = lp_itemData;
    auto_libDEAD_gf_ECL_GroundItemData_lp_item = lp_item;

    if (auto_libDEAD_gf_ECL_GroundItemData_Trigger == null) {
        auto_libDEAD_gf_ECL_GroundItemData_Trigger = TriggerCreate("auto_libDEAD_gf_ECL_GroundItemData_TriggerFunc");
    }

    TriggerExecute(auto_libDEAD_gf_ECL_GroundItemData_Trigger, false, false);
}

bool auto_libDEAD_gf_ECL_GroundItemData_TriggerFunc (bool testConds, bool runActions) {
    int lp_quantity = auto_libDEAD_gf_ECL_GroundItemData_lp_quantity;
    string lp_itemData = auto_libDEAD_gf_ECL_GroundItemData_lp_itemData;
    unit lp_item = auto_libDEAD_gf_ECL_GroundItemData_lp_item;

    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_item, 6, libNtve_gf_UserDataInstanceGetIndex("Items", lp_itemData));
    UnitSetCustomValue(lp_item, 7, IntToFixed(lp_quantity));
    UnitSetCustomValue(lp_item, 8, libDEAD_gf_ReturnItemPropertyMaxDurability(lp_itemData));
    ActorSend(libNtve_gf_MainActorofUnit(lp_item), libNtve_gf_ModelSwap(libDEAD_gf_ReturnItemPropertyModel(lp_itemData), 1));
    return true;
}

void libDEAD_gf_DS_FireWeaponItem (int lp_player, string lp_weaponItem) {
    // Variable Declarations
    string lv_weaponData;
    int lv_launchArt;
    int lv_projectileN;
    int lv_bursts;
    fixed lv_velocity;
    fixed lv_cooldown;
    fixed lv_cooldown_burst;
    fixed lv_angle;
    fixed lv_range;
    string lv_impact;
    int lv_damage_min;
    int lv_damage_max;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_launchArt = libECLP_ge_ECL_WEAPON_LAUNCH_TYPE_BULLET;
    lv_impact = "PAttackBulletImpactNEW";

    // Implementation
    if (((lp_weaponItem == "Slugger") || (lp_weaponItem == "CPG11"))) {
        lv_launchArt = libECLP_ge_ECL_WEAPON_LAUNCH_TYPE_BULLET;
    }
    lv_weaponData = UserDataGetUserInstance("Items", lp_weaponItem, "Weapon Data", 1);
    lv_projectileN = UserDataGetInt("WeaponTypes", lp_weaponItem, "ProjectileCount", 1);
    lv_velocity = UserDataGetFixed("WeaponTypes", lp_weaponItem, "Velocity", 1);
    lv_cooldown = UserDataGetFixed("WeaponTypes", lp_weaponItem, "Cooldown", 1);
    lv_angle = UserDataGetFixed("WeaponTypes", lp_weaponItem, "Angle", 1);
    lv_range = UserDataGetFixed("WeaponTypes", lp_weaponItem, "Range", 1);
    lv_impact = UserDataGetGameLink("WeaponTypes", lp_weaponItem, "ImpactEffect", 1);
    lv_damage_min = UserDataGetInt("WeaponTypes", lp_weaponItem, "DamageMin", 1);
    lv_damage_max = UserDataGetInt("WeaponTypes", lp_weaponItem, "DamageMax", 1);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, lv_impact, "Amount", lp_player, lv_damage_min);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, lv_impact, "Random", lp_player, (lv_damage_max - lv_damage_min));
    libECLP_gf_ECL_Fire(lp_player, lv_launchArt, lv_projectileN, lv_bursts, lv_velocity, lv_cooldown, lv_cooldown_burst, lv_angle, lv_impact, lv_range);
}

void libDEAD_gf_ECL__Hookup_Context (int lp_player, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto3FDBD606_ae = 7;
    const int auto3FDBD606_ai = 1;
    int autoA54B9064_val;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto3FDBD606_ai >= 0 && lv_index <= auto3FDBD606_ae) || (auto3FDBD606_ai < 0 && lv_index >= auto3FDBD606_ae) ) ; lv_index += auto3FDBD606_ai ) {
        DialogControlHookup(libDEAD_gv_eCL__Inventory[lp_player].lv_iTEM[lp_index], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Context/ContextButton" + IntToString(lv_index))));
        autoA54B9064_val = lv_index;
        if (autoA54B9064_val == 1) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine = DialogControlLastCreated();
        }
        else if (autoA54B9064_val == 2) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Use = DialogControlLastCreated();
        }
        else if (autoA54B9064_val == 3) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Equip = DialogControlLastCreated();
        }
        else if (autoA54B9064_val == 4) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer = DialogControlLastCreated();
        }
        else if (autoA54B9064_val == 5) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_PH = DialogControlLastCreated();
        }
        else if (autoA54B9064_val == 6) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_PH2 = DialogControlLastCreated();
        }
        else if (autoA54B9064_val == 7) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard = DialogControlLastCreated();
        }
        else {
        }
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
}

bool libDEAD_gf_IsBlueprintDiscovered (string lp_item) {
    // Variable Declarations
    string lv_recipe;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UserDataGetUserInstance("Items", lp_item, "Blueprint", 1) == null)) {
        libDEAD_gf_SendDebugMessage("Item has no Valid Blueprint");
        return false;
    }
    lv_recipe = UserDataGetUserInstance("Items", lp_item, "Blueprint", 1);
    if ((UserDataGetInt("Blueprints", lv_recipe, "Discovered", 1) == 1)) {
        libDEAD_gf_SendDebugMessage("Item is Discovered");
        return true;
    }
    else {
        libDEAD_gf_SendDebugMessage("Item is Undiscovered");
        return false;
    }
}

int libDEAD_gf_UsedListboxItem (int lp_player, int lp_dialogItem) {
    // Variable Declarations
    int lv_recipe;

    // Automatic Variable Declarations
    const int auto2BEB431E_ae = libDEAD_gv_dS_CraftingListboxSize;
    int auto2BEB431E_var;

    // Variable Initialization

    // Implementation
    auto2BEB431E_var = 1;
    for ( ; auto2BEB431E_var <= auto2BEB431E_ae; auto2BEB431E_var += 1 ) {
        if ((lp_dialogItem == libDEAD_gv_dS_Crafting[lp_player].lv_listboxItem[auto2BEB431E_var])) {
            return auto2BEB431E_var;
        }
    }
    return 0;
}

int libDEAD_gf_ReturnListboxItem (int lp_listboxIndex) {
    // Variable Declarations
    int lv_recipe;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return libDEAD_gv_dS_ListItemIndex[lp_listboxIndex];
}

void libDEAD_gf_DS_CreateCraftingPanel (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto19E251FB_ae = libDEAD_gv_dS_CraftingListboxSize;
    const int auto19E251FB_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlHookup(libDEAD_gv_dS_GameUI[lp_player].lv_gameUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("CraftingPanel"));
    libDEAD_gv_dS_Crafting[lp_player].lv_craftingPanel = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto19E251FB_ai >= 0 && lv_index <= auto19E251FB_ae) || (auto19E251FB_ai < 0 && lv_index >= auto19E251FB_ae) ) ; lv_index += auto19E251FB_ai ) {
        DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_craftingPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("ItemListbox/ListItem" + IntToString(lv_index))));
        libDEAD_gv_dS_Crafting[lp_player].lv_listboxItem[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_listboxItem[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Icon"));
        libDEAD_gv_dS_Crafting[lp_player].lv_listboxIcon[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_listboxItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Name"));
        libDEAD_gv_dS_Crafting[lp_player].lv_listboxTitle[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_listboxItem[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quality"));
        libDEAD_gv_dS_Crafting[lp_player].lv_listboxType[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_craftingPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("CraftingInfoFrame"));
    libDEAD_gv_dS_Crafting[lp_player].lv_craftingInfoFrame = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_craftingInfoFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Name"));
    libDEAD_gv_dS_Crafting[lp_player].lv_infoTitle = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_craftingInfoFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quality"));
    libDEAD_gv_dS_Crafting[lp_player].lv_infoSubtitle = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_craftingInfoFrame, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseDesc"));
    libDEAD_gv_dS_Crafting[lp_player].lv_infoDesc = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_craftingInfoFrame, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Icon"));
    libDEAD_gv_dS_Crafting[lp_player].lv_infoIcon = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Crafting[lp_player].lv_craftingInfoFrame, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("CraftedItem"));
    libDEAD_gv_dS_Crafting[lp_player].lv_craftedItem = DialogControlLastCreated();
    libDEAD_gf_ShowHideCraftingPanel(false, lp_player);
    libDEAD_gf_DS_UpdateCraftingListboxData(lp_player);
}

void libDEAD_gf_DS_UpdateCraftingListboxData (int lp_player) {
    // Variable Declarations
    int lv_index;
    string lv_userType;
    string lv_blueprint;
    string[7] lv_blueprintItems;

    // Automatic Variable Declarations
    const int auto6273DAB1_ae = 100;
    const int auto6273DAB1_ai = 1;
    const int auto55726371_ae = libDEAD_gv_dS_CraftingListboxSize;
    const int auto55726371_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto6273DAB1_ai >= 0 && lv_index <= auto6273DAB1_ae) || (auto6273DAB1_ai < 0 && lv_index >= auto6273DAB1_ae) ) ; lv_index += auto6273DAB1_ai ) {
        if ((UserDataInstance("Items", lv_index) == null)) {
            break;
        }

        if ((UserDataGetUserInstance("Items", UserDataInstance("Items", lv_index), "Blueprint", 1) != null)) {
            libDEAD_gv_dS_ListItemsinUse += 1;
            libDEAD_gv_dS_ListItemIndex[libDEAD_gv_dS_ListItemsinUse] = lv_index;
            lv_userType = UserDataInstance("Items", lv_index);
            lv_blueprint = UserDataGetUserInstance("Items", lv_userType, "Blueprint", 1);
            libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Crafting[lp_player].lv_listboxIcon[libDEAD_gv_dS_ListItemsinUse], libDEAD_gf_ReturnItemPropertyIcon(lv_userType), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Crafting[lp_player].lv_listboxTitle[libDEAD_gv_dS_ListItemsinUse], StringToText(libDEAD_gf_ReturnItemPropertyName(lv_userType)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Crafting[lp_player].lv_listboxType[libDEAD_gv_dS_ListItemsinUse], StringToText(libDEAD_gf_ReturnItemPropertyCategory(lv_userType)), PlayerGroupAll());
            DialogControlSetAnimationState(libDEAD_gv_dS_Crafting[lp_player].lv_listboxItem[libDEAD_gv_dS_ListItemsinUse], PlayerGroupAll(), "ItemType", libDEAD_gf_ReturnItemPropertyCategory(lv_userType));
        }

    }
    lv_index = 1;
    for ( ; ( (auto55726371_ai >= 0 && lv_index <= auto55726371_ae) || (auto55726371_ai < 0 && lv_index >= auto55726371_ae) ) ; lv_index += auto55726371_ai ) {
        DialogControlSetVisible(libDEAD_gv_dS_Crafting[lp_player].lv_listboxItem[lv_index], PlayerGroupAll(), false);
    }
}

void libDEAD_gf_DS_SetInfoFrameItem (int lp_itemIndex, int lp_player) {
    // Variable Declarations
    const int lv_range = 2;
    int lv_index;
    string lv_userInstance;
    string lv_blueprint;
    string[7] lv_blueprintItems;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_userInstance = UserDataInstance("Items", lp_itemIndex);
    libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Crafting[lp_player].lv_infoIcon, libDEAD_gf_ReturnItemPropertyIcon(lv_userInstance), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Crafting[lp_player].lv_infoTitle, StringToText(libDEAD_gf_ReturnItemPropertyName(lv_userInstance)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Crafting[lp_player].lv_infoSubtitle, StringToText(libDEAD_gf_ReturnItemPropertyCategory(lv_userInstance)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Crafting[lp_player].lv_infoDesc, libDEAD_gf_ReturnItemPropertyDescription(lv_userInstance), PlayerGroupAll());
    DialogControlSetAnimationState(libDEAD_gv_dS_Crafting[lp_player].lv_craftingPanel, PlayerGroupAll(), "ItemType", libDEAD_gf_ReturnItemPropertyCategory(lv_userInstance));
    DialogControlSetAnimationState(libDEAD_gv_dS_Crafting[lp_player].lv_craftedItem, PlayerGroupAll(), "ItemType", libDEAD_gf_ReturnItemPropertyCategory(lv_userInstance));
    DialogControlSetAnimationState(libDEAD_gv_dS_Crafting[lp_player].lv_craftedItem, PlayerGroupAll(), "ItemType", libDEAD_gf_ReturnItemPropertyCategory(lv_userInstance));
}

void libDEAD_gf_ShowHideCraftingPanel (bool lp_showHide, int lp_player) {
    // Variable Declarations
    const int lv_craftingItems = 6;
    int lv_index;

    // Automatic Variable Declarations
    bool auto56C2A17E_val;

    // Variable Initialization

    // Implementation
    auto56C2A17E_val = lp_showHide;
    if (auto56C2A17E_val == false) {
        DialogControlSetVisible(libDEAD_gv_dS_Crafting[lp_player].lv_craftingPanel, PlayerGroupAll(), false);
        Wait(0.0001, c_timeGame);
        libDEAD_gv_dS_CraftingOpened[lp_player] = false;
    }
    else if (auto56C2A17E_val == true) {
        DialogControlSetVisible(libDEAD_gv_dS_Crafting[lp_player].lv_craftingPanel, PlayerGroupAll(), true);
        Wait(0.0001, c_timeGame);
        libDEAD_gv_dS_CraftingOpened[lp_player] = true;
    }
    else {
    }
}

void libDEAD_gf_DiscoverRecipe (string lp_item, int lp_player) {
    // Variable Declarations
    int lv_itemIndex;
    string lv_recipe;
    const int lv_craftingItems = 6;
    int lv_index;

    // Automatic Variable Declarations
    int auto2C1D4905_ae;
    const int auto2C1D4905_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UserDataGetUserInstance("Items", lp_item, "Blueprint", 1) == null)) {
        libDEAD_gf_SendDebugMessage("Item has no Valid Blueprint");
        return ;
    }
    lv_recipe = UserDataGetUserInstance("Items", lp_item, "Blueprint", 1);
    UserDataSetInt("Blueprints", lv_recipe, "Discovered", 1, 1);
    lv_itemIndex = libNtve_gf_UserDataInstanceGetIndex("Items", lp_item);
    auto2C1D4905_ae = libDEAD_gv_dS_ListItemsinUse;
    lv_index = 1;
    for ( ; ( (auto2C1D4905_ai >= 0 && lv_index <= auto2C1D4905_ae) || (auto2C1D4905_ai < 0 && lv_index >= auto2C1D4905_ae) ) ; lv_index += auto2C1D4905_ai ) {
        if ((UserDataInstance("Items", libDEAD_gv_dS_ListItemIndex[lv_index]) == lp_item)) {
            DialogControlSetVisible(libDEAD_gv_dS_Crafting[lp_player].lv_listboxItem[lv_index], PlayerGroupAll(), true);
        }
    }
}

void libDEAD_gf_DS_CreatePlayerUnit (int lp_player, fixed lp_angle, point lp_spawnPoint) {
    // Variable Declarations
    const string lv_unitType = "Separatist";
    unit lv_localUnit;
    point lv_point;

    // Automatic Variable Declarations
    int autoABB10909_val;

    // Variable Initialization

    // Implementation
    lv_point = lp_spawnPoint;
    UnitCreate(1, lv_unitType, 0, lp_player, lv_point, lp_angle);
    libDEAD_gv_playerUnit[lp_player] = UnitLastCreated();
    lv_localUnit = UnitLastCreated();
    UnitSetState(lv_localUnit, c_unitStateHighlightable, false);
    UnitSetState(lv_localUnit, c_unitStateCursorable, false);
    UnitSetState(lv_localUnit, c_unitStateSelectable, false);
    UnitSetState(lv_localUnit, c_unitStateFidget, false);
    UnitSetState(lv_localUnit, c_unitStateTurnSuppressed, false);
    VisFillArea(lp_player, RegionEntireMap(), c_fillTypeMasked, false);
    CameraLockInput(lp_player, true);
    CameraPan(lp_player, UnitGetPosition(lv_localUnit), 0.0, -1, 0, false);
    CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(lv_localUnit), true, false);
    CameraSetValue(lp_player, c_cameraValueDistance, libDEAD_gv_dS_CameraDistanceNormal, 0.0, -1, 10.0);
    CameraSetValue(lp_player, c_cameraValueRoll, 0.0, 0.0, -1, 10.0);
    CameraSetValue(lp_player, c_cameraValueFieldOfView, 25.0, 0.0, -1, 10.0);
    CameraUseHeightDisplacement(lp_player, true);
    CameraUseHeightSmoothing(lp_player, true);
    autoABB10909_val = lp_player;
    if (autoABB10909_val == 1) {
        libDEAD_gf_SendDebugMessage("turning on 1");
        TriggerEnable(libDEAD_gt_DS_Crate_GenericEnterP1, true);
    }
    else if (autoABB10909_val == 2) {
        libDEAD_gf_SendDebugMessage("turning on 2");
        TriggerEnable(libDEAD_gt_DS_Crate_GenericEnterP2, true);
    }
    else if (autoABB10909_val == 3) {
    }
    else {
    }
}

void libDEAD_gf_DS_TableSizeCheck () {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    int lv_localValue;

    // Automatic Variable Declarations
    const int autoDFC47F3F_ae = 50;
    const int autoDFC47F3F_ai = 1;
    const int autoFBE4AE9B_ae = 50;
    const int autoFBE4AE9B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoDFC47F3F_ai >= 0 && lv_index <= autoDFC47F3F_ae) || (autoDFC47F3F_ai < 0 && lv_index >= autoDFC47F3F_ae) ) ; lv_index += autoDFC47F3F_ai ) {
        if ((UserDataInstance("LootTables", lv_index) != null)) {
            lv_index2 = 1;
            for ( ; ( (autoFBE4AE9B_ai >= 0 && lv_index2 <= autoFBE4AE9B_ae) || (autoFBE4AE9B_ai < 0 && lv_index2 >= autoFBE4AE9B_ae) ) ; lv_index2 += autoFBE4AE9B_ai ) {
                if ((UserDataGetUserInstance("LootTables", UserDataInstance("LootTables", lv_index), "Items", lv_index2) != null)) {
                    lv_localValue += 1;
                }
                else {
                    UserDataSetInt("LootTables", UserDataInstance("LootTables", lv_index), "TableSize", 1, lv_localValue);
                    lv_localValue = 0;
                    break;
                }
            }
        }
        else {
            break;
        }
    }
}

void libDEAD_gf_DS_ItemSizeCheck () {
    // Variable Declarations
    int lv_index;
    int lv_localValue;

    // Automatic Variable Declarations
    const int autoE6DD8330_ae = 200;
    const int autoE6DD8330_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoE6DD8330_ai >= 0 && lv_index <= autoE6DD8330_ae) || (autoE6DD8330_ai < 0 && lv_index >= autoE6DD8330_ae) ) ; lv_index += autoE6DD8330_ai ) {
        if ((UserDataInstance("Items", lv_index) != null)) {
            lv_localValue += 1;
        }
        else {
            break;
        }
    }
    libDEAD_gv_dS_ItemSize = lv_localValue;
}

void libDEAD_gf_DS_CreateHUD (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoF7BB3790_ae = 10;
    const int autoF7BB3790_ai = 1;
    const int auto4FC93C15_ae = 10;
    const int auto4FC93C15_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlHookup(libDEAD_gv_dS_GameUI[lp_player].lv_gameUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("GameHUD"));
    libDEAD_gv_dS_HUD[lp_player].lv_panel = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_panel, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("StatusPanel/HealthBar/ProgressBar"));
    libDEAD_gv_dS_HUD[lp_player].lv_hPBar = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_panel, c_triggerControlTypeUnitStatus, libNtve_gf_ConvertStringToUILayoutFrameName("StatusPanel"));
    libDEAD_gv_dS_HUD[lp_player].lv_uTF = DialogControlLastCreated();
    libNtve_gf_SetDialogItemUnit(DialogControlLastCreated(), libDEAD_gv_playerUnit[lp_player], PlayerGroupSingle(lp_player));
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_panel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("WeaponFrameN"));
    libDEAD_gv_dS_HUD[lp_player].lv_weaponPanel = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_weaponPanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("MainWeaponInfoFrame/Icon"));
    libDEAD_gv_dS_HUD[lp_player].lv_mainWpnIcon = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_weaponPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("MainWeaponInfoFrame/Name"));
    libDEAD_gv_dS_HUD[lp_player].lv_mainWpnName = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_weaponPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("MainWeaponInfoFrame/MagAmmo"));
    libDEAD_gv_dS_HUD[lp_player].lv_mainWpnAmmoCurrent = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_weaponPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("MainWeaponInfoFrame/ReserveAmmo"));
    libDEAD_gv_dS_HUD[lp_player].lv_mainWpnAmmoReserve = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_weaponPanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("MainWeaponInfoFrame/AmmoIcon"));
    libDEAD_gv_dS_HUD[lp_player].lv_mainWpnAmmoIcon = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_panel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("EventLogPanel"));
    libDEAD_gv_dS_HUD[lp_player].lv_eventLog = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (autoF7BB3790_ai >= 0 && lv_index <= autoF7BB3790_ae) || (autoF7BB3790_ai < 0 && lv_index >= autoF7BB3790_ae) ) ; lv_index += autoF7BB3790_ai ) {
        DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_eventLog, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("EventFrame" + IntToString(lv_index))));
        libDEAD_gv_dS_HUD[lp_player].lv_logPanels[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_logPanels[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Title"));
        libDEAD_gv_dS_HUD[lp_player].lv_logTitle[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_logPanels[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Amount"));
        libDEAD_gv_dS_HUD[lp_player].lv_logAmount[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_logPanels[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libDEAD_gv_dS_HUD[lp_player].lv_logIcon[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_panel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("TimerPanel"));
    libDEAD_gv_dS_HUD[lp_player].lv_timerPanel = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto4FC93C15_ai >= 0 && lv_index <= auto4FC93C15_ae) || (auto4FC93C15_ai < 0 && lv_index >= auto4FC93C15_ae) ) ; lv_index += auto4FC93C15_ai ) {
        DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_timerPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Timer" + IntToString(lv_index))));
        libDEAD_gv_dS_HUD[lp_player].lv_timerWindow[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_timerWindow[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
        libDEAD_gv_dS_HUD[lp_player].lv_timerIcon[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_timerWindow[lv_index], c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("TimerBar"));
        libDEAD_gv_dS_HUD[lp_player].lv_timerProgress[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_HUD[lp_player].lv_timerWindow[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("TimerLabel"));
        libDEAD_gv_dS_HUD[lp_player].lv_timerLabel[lv_index] = DialogControlLastCreated();
    }
}

trigger auto_libDEAD_gf_DS_DisplayLootEvent_Trigger = null;
int auto_libDEAD_gf_DS_DisplayLootEvent_lp_player;
int auto_libDEAD_gf_DS_DisplayLootEvent_lp_amount;
string auto_libDEAD_gf_DS_DisplayLootEvent_lp_item;

void libDEAD_gf_DS_DisplayLootEvent (int lp_player, int lp_amount, string lp_item) {
    auto_libDEAD_gf_DS_DisplayLootEvent_lp_player = lp_player;
    auto_libDEAD_gf_DS_DisplayLootEvent_lp_amount = lp_amount;
    auto_libDEAD_gf_DS_DisplayLootEvent_lp_item = lp_item;

    if (auto_libDEAD_gf_DS_DisplayLootEvent_Trigger == null) {
        auto_libDEAD_gf_DS_DisplayLootEvent_Trigger = TriggerCreate("auto_libDEAD_gf_DS_DisplayLootEvent_TriggerFunc");
    }

    TriggerExecute(auto_libDEAD_gf_DS_DisplayLootEvent_Trigger, false, false);
}

bool auto_libDEAD_gf_DS_DisplayLootEvent_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libDEAD_gf_DS_DisplayLootEvent_lp_player;
    int lp_amount = auto_libDEAD_gf_DS_DisplayLootEvent_lp_amount;
    string lp_item = auto_libDEAD_gf_DS_DisplayLootEvent_lp_item;

    // Variable Declarations
    const fixed lv_visibilityDuration = 4.0;
    const fixed lv_searchDelay = 1.2;
    int lv_inactiveIndex;
    int lv_index;

    // Automatic Variable Declarations
    const int auto2684E724_ae = 10;
    const int auto2684E724_ai = 1;

    // Variable Initialization

    // Implementation
    while (true) {
        lv_index = 1;
        for ( ; ( (auto2684E724_ai >= 0 && lv_index <= auto2684E724_ae) || (auto2684E724_ai < 0 && lv_index >= auto2684E724_ae) ) ; lv_index += auto2684E724_ai ) {
            if ((libDEAD_gv_dS_EventsInUse[lv_index][lp_player] == false)) {
                lv_inactiveIndex = lv_index;
                break;
            }

        }
        if ((libDEAD_gv_dS_EventsInUse[lv_inactiveIndex][lp_player] == false)) {
            break;
        }

        Wait(lv_searchDelay, c_timeGame);
    }
    libDEAD_gv_dS_EventsInUse[lv_inactiveIndex][lp_player] = true;
    TextExpressionSetToken("Param/Expression/lib_DEAD_964EFE2C", "A", StringToText(libDEAD_gf_ReturnItemPropertyName(lp_item)));
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_HUD[lp_player].lv_logTitle[lv_inactiveIndex], TextExpressionAssemble("Param/Expression/lib_DEAD_964EFE2C"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_DEAD_C664C836", "A", IntToText(lp_amount));
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_HUD[lp_player].lv_logAmount[lv_inactiveIndex], TextExpressionAssemble("Param/Expression/lib_DEAD_C664C836"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_HUD[lp_player].lv_logIcon[lv_inactiveIndex], libDEAD_gf_ReturnItemPropertyIcon(lp_item), PlayerGroupAll());
    DialogControlSendAnimationEvent(libDEAD_gv_dS_HUD[lp_player].lv_logPanels[lv_inactiveIndex], PlayerGroupAll(), "Display");
    Wait(lv_visibilityDuration, c_timeGame);
    DialogControlSendAnimationEvent(libDEAD_gv_dS_HUD[lp_player].lv_logPanels[lv_inactiveIndex], PlayerGroupAll(), "Hide");
    libDEAD_gv_dS_EventsInUse[lv_inactiveIndex][lp_player] = false;
    return true;
}

void libDEAD_gf_DS_EquipWeapon (int lp_player, string lp_untitledParameter001) {
    // Variable Declarations
    const int lv_slotIndex = 4;
    string lv_localItem;
    string lv_waponData;
    bool lv_swapping;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_untitledParameter001 == null)) {
        return ;
    }

    if ((libDEAD_gv_dS_PlayerData[lp_player].lv_equippedMainWpn != null)) {
        lv_localItem = libDEAD_gv_dS_PlayerData[lp_player].lv_equippedMainWpn;
        lv_swapping = true;
    }
    else {
        libDEAD_gf_DiscardItem(lp_player);
    }
    libDEAD_gv_dS_PlayerData[lp_player].lv_equippedMainWpn = lp_untitledParameter001;
    DialogControlSetAnimationState(libDEAD_gv_dS_Character[lp_player].lv_equipmentButton[lv_slotIndex], PlayerGroupAll(), "ItemState", "HasItem");
    libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Character[lp_player].lv_equipmentIcon[lv_slotIndex], UserDataGetImagePath("Items", lp_untitledParameter001, "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentName[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyName(lp_untitledParameter001)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentUse[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyUse(lp_untitledParameter001)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentCategory[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyCategory(lp_untitledParameter001)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentUseDesc[lv_slotIndex], libDEAD_gf_ReturnItemPropertyDescription(lp_untitledParameter001), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentLore[lv_slotIndex], libDEAD_gf_ReturnItemPropertyLore(lp_untitledParameter001), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentDurability[lv_slotIndex], IntToText(libDEAD_gf_ReturnItemPropertyMaxDurability(lp_untitledParameter001)), PlayerGroupAll());
    lv_waponData = UserDataGetUserInstance("Items", lp_untitledParameter001, "Weapon Data", 1);
    libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_HUD[lp_player].lv_mainWpnIcon, UserDataGetImagePath("WeaponTypes", lv_waponData, "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_HUD[lp_player].lv_mainWpnName, StringToText(libDEAD_gf_ReturnItemPropertyName(lp_untitledParameter001)), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_HUD[lp_player].lv_mainWpnAmmoIcon, UserDataGetImagePath("WeaponTypes", lv_waponData, "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_HUD[lp_player].lv_mainWpnAmmoCurrent, IntToText(0), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_HUD[lp_player].lv_mainWpnAmmoReserve, IntToText(0), PlayerGroupAll());
    libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmo = UserDataGetInt("WeaponTypes", libDEAD_gv_dS_PlayerData[lp_player].lv_equippedMainWpn, "StartingAmmo", 1);
    DialogControlSetVisible(libDEAD_gv_dS_HUD[lp_player].lv_mainWpnIcon, PlayerGroupAll(), true);
    if ((lv_swapping == true)) {
        libDEAD_gf_DiscardItem(lp_player);
        libDEAD_gf_DEBUG_GivePlayerItem(lp_player, false, lv_localItem, 1);
    }

    libDEAD_gf_DS_ReadMainWeaponData(lp_player, libDEAD_gv_dS_PlayerData[lp_player].lv_equippedMainWpn);
}

void libDEAD_gf_DS_EquipSuit (int lp_player, string lp_suitItem) {
    // Variable Declarations
    const int lv_slotIndex = 2;
    string lv_localItem;
    string lv_itemStats;
    bool lv_swapping;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_suitItem == null)) {
        return ;
    }

    if ((libDEAD_gv_dS_PlayerData[lp_player].lv_equippedSuit != null)) {
        lv_localItem = libDEAD_gv_dS_PlayerData[lp_player].lv_equippedSuit;
        lv_swapping = true;
    }
    else {
        libDEAD_gf_DiscardItem(lp_player);
    }
    libDEAD_gv_dS_PlayerData[lp_player].lv_equippedSuit = lp_suitItem;
    DialogControlSetAnimationState(libDEAD_gv_dS_Character[lp_player].lv_equipmentButton[lv_slotIndex], PlayerGroupAll(), "ItemState", "HasItem");
    libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Character[lp_player].lv_equipmentIcon[lv_slotIndex], UserDataGetImagePath("Items", lp_suitItem, "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentName[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyName(lp_suitItem)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentUse[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyUse(lp_suitItem)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentCategory[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyCategory(lp_suitItem)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentUseDesc[lv_slotIndex], libDEAD_gf_ReturnItemPropertyDescription(lp_suitItem), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentLore[lv_slotIndex], libDEAD_gf_ReturnItemPropertyLore(lp_suitItem), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentDurability[lv_slotIndex], IntToText(libDEAD_gf_ReturnItemPropertyMaxDurability(lp_suitItem)), PlayerGroupAll());
    if ((lv_swapping == true)) {
        libDEAD_gf_DiscardItem(lp_player);
        libDEAD_gf_DEBUG_GivePlayerItem(lp_player, false, lv_localItem, 1);
    }

    lv_itemStats = UserDataGetUserInstance("Items", lp_suitItem, "Item Stats", 1);
}

void libDEAD_gf_DS_EquipAug (int lp_player, string lp_augItem) {
    // Variable Declarations
    const int lv_slotIndex = 1;
    string lv_localItem;
    string lv_itemStats;
    bool lv_swapping;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_augItem == null)) {
        return ;
    }

    if ((libDEAD_gv_dS_PlayerData[lp_player].lv_equippedAug != null)) {
        lv_localItem = libDEAD_gv_dS_PlayerData[lp_player].lv_equippedAug;
        lv_swapping = true;
    }
    else {
        libDEAD_gf_DiscardItem(lp_player);
    }
    libDEAD_gv_dS_PlayerData[lp_player].lv_equippedAug = lp_augItem;
    DialogControlSetAnimationState(libDEAD_gv_dS_Character[lp_player].lv_equipmentButton[lv_slotIndex], PlayerGroupAll(), "ItemState", "HasItem");
    libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Character[lp_player].lv_equipmentIcon[lv_slotIndex], UserDataGetImagePath("Items", lp_augItem, "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentName[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyName(lp_augItem)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentUse[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyUse(lp_augItem)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentCategory[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyCategory(lp_augItem)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentUseDesc[lv_slotIndex], libDEAD_gf_ReturnItemPropertyDescription(lp_augItem), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentLore[lv_slotIndex], libDEAD_gf_ReturnItemPropertyLore(lp_augItem), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentDurability[lv_slotIndex], IntToText(libDEAD_gf_ReturnItemPropertyMaxDurability(lp_augItem)), PlayerGroupAll());
    if ((lv_swapping == true)) {
        libDEAD_gf_DiscardItem(lp_player);
        libDEAD_gf_DEBUG_GivePlayerItem(lp_player, false, lv_localItem, 1);
    }

    lv_itemStats = UserDataGetUserInstance("Items", lp_augItem, "Item Stats", 1);
}

void libDEAD_gf_DS_EquipPack (int lp_player, string lp_packItem) {
    // Variable Declarations
    const int lv_slotIndex = 3;
    string lv_localItem;
    string lv_itemStats;
    bool lv_swapping;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_packItem == null)) {
        return ;
    }

    if ((libDEAD_gv_dS_PlayerData[lp_player].lv_equippedBack != null)) {
        lv_localItem = libDEAD_gv_dS_PlayerData[lp_player].lv_equippedBack;
        lv_swapping = true;
    }
    else {
        libDEAD_gf_DiscardItem(lp_player);
    }
    libDEAD_gv_dS_PlayerData[lp_player].lv_equippedBack = lp_packItem;
    DialogControlSetAnimationState(libDEAD_gv_dS_Character[lp_player].lv_equipmentButton[lv_slotIndex], PlayerGroupAll(), "ItemState", "HasItem");
    libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Character[lp_player].lv_equipmentIcon[lv_slotIndex], UserDataGetImagePath("Items", lp_packItem, "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentName[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyName(lp_packItem)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentUse[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyUse(lp_packItem)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentCategory[lv_slotIndex], StringToText(libDEAD_gf_ReturnItemPropertyCategory(lp_packItem)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentUseDesc[lv_slotIndex], libDEAD_gf_ReturnItemPropertyDescription(lp_packItem), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentLore[lv_slotIndex], libDEAD_gf_ReturnItemPropertyLore(lp_packItem), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Character[lp_player].lv_equipmentDurability[lv_slotIndex], IntToText(libDEAD_gf_ReturnItemPropertyMaxDurability(lp_packItem)), PlayerGroupAll());
    if ((lv_swapping == true)) {
        libDEAD_gf_DiscardItem(lp_player);
        libDEAD_gf_DEBUG_GivePlayerItem(lp_player, false, lv_localItem, 1);
    }

    lv_itemStats = UserDataGetUserInstance("Items", lp_packItem, "Item Stats", 1);
}

void libDEAD_gf_DS_ReadMainWeaponData (int lp_player, string lp_untitledParameter001) {
    // Variable Declarations
    int lv_index;
    string lv_weaponData;
    string lv_requiredAmmoItem;
    string lv_equippedWeapon;
    int lv_reserveAmmoTemp;

    // Automatic Variable Declarations
    string auto38991229_val;
    const int auto5B3F22A7_ae = 1;
    const int auto5B3F22A7_ai = -1;

    // Variable Initialization

    // Implementation
    lv_equippedWeapon = libDEAD_gv_dS_PlayerData[lp_player].lv_equippedMainWpn;
    if ((lv_equippedWeapon == null)) {
        return ;
    }

    lv_weaponData = UserDataGetUserInstance("Items", lv_equippedWeapon, "Weapon Data", 1);
    auto38991229_val = UserDataGetString("WeaponTypes", lp_untitledParameter001, "AmmoType", 1);
    if (auto38991229_val == "Pistol") {
        lv_requiredAmmoItem = "Pistol Ammo";
    }
    else {
    }
    lv_index = 18;
    for ( ; ( (auto5B3F22A7_ai >= 0 && lv_index <= auto5B3F22A7_ae) || (auto5B3F22A7_ai < 0 && lv_index >= auto5B3F22A7_ae) ) ; lv_index += auto5B3F22A7_ai ) {
        if ((libDEAD_gv_dS_InventoryItem[lv_index][lp_player] == lv_requiredAmmoItem)) {
            lv_reserveAmmoTemp += libDEAD_gv_dS_InventoryAmount[lv_index][lp_player];
        }

    }
    libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmoReserve = lv_reserveAmmoTemp;
    libDEAD_gv_dS_PlayerData[lp_player].lv_weaponMagSize = UserDataGetInt("WeaponTypes", lv_weaponData, "BaseAmmoMax", 1);
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_HUD[lp_player].lv_mainWpnAmmoCurrent, IntToText(libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmo), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_HUD[lp_player].lv_mainWpnAmmoReserve, IntToText(lv_reserveAmmoTemp), PlayerGroupAll());
    if ((libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmo < libDEAD_gv_dS_PlayerData[lp_player].lv_weaponMagSize)) {
        TriggerEnable(libDEAD_gt_DS_Reload, true);
    }

    if ((libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmo <= lp_player)) {
        TriggerEnable(libDEAD_gt_DS_Fire, false);
    }
    else {
        TriggerEnable(libDEAD_gt_DS_Fire, true);
    }
}

void libDEAD_gf_DS_UpdateHUDVitals (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemMaximumValue(libDEAD_gv_dS_HUD[lp_player].lv_hPBar, libDEAD_gf_ReturnTotalHPMax(lp_player), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libDEAD_gv_dS_HUD[lp_player].lv_hPBar, libDEAD_gf_ReturnTotalHP(lp_player), PlayerGroupAll());
}

void libDEAD_gf_DS_UpdateTimerUI (int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(libDEAD_gv_dS_HUD[lp_player].lv_timerProgress[lp_index], TimerGetRemaining(libDEAD_gv_dS_Timer[lp_player][lp_index]), PlayerGroupAll());
}

void libDEAD_gf_StartTimer (int lp_player, fixed lp_time, string lp_icon) {
    // Variable Declarations
    int lv_index;
    int lv_emptySlot;

    // Automatic Variable Declarations
    const int auto2A81D9DE_ae = 10;
    const int auto2A81D9DE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto2A81D9DE_ai >= 0 && lv_index <= auto2A81D9DE_ae) || (auto2A81D9DE_ai < 0 && lv_index >= auto2A81D9DE_ae) ) ; lv_index += auto2A81D9DE_ai ) {
        if ((libDEAD_gv_dS_TimersinUse[lp_player][lv_index] != true)) {
            lv_emptySlot = lv_index;
            break;
        }
    }
    libDEAD_gv_dS_TimersTime[lp_player][lv_emptySlot] = lp_time;
    libDEAD_gv_dS_TimersinUse[lp_player][lv_emptySlot] = true;
    TimerStart(libDEAD_gv_dS_Timer[lp_player][lv_emptySlot], lp_time, false, c_timeReal);
    libDEAD_gv_dS_Timer[lp_player][lv_emptySlot] = TimerLastStarted();
    libNtve_gf_SetDialogItemMaximumValue(libDEAD_gv_dS_HUD[lp_player].lv_timerProgress[lv_emptySlot], lp_time, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libDEAD_gv_dS_HUD[lp_player].lv_timerProgress[lv_emptySlot], lp_time, PlayerGroupAll());
    TriggerEnable(libDEAD_gt_DS_UpdateTimers, true);
    DialogControlSendAnimationEvent(libDEAD_gv_dS_HUD[lp_player].lv_timerWindow[lv_emptySlot], PlayerGroupAll(), "Display");
}

void libDEAD_gf_DiscardItem (int lp_player) {
    // Automatic Variable Declarations
    int auto48372809_val;

    // Implementation
    auto48372809_val = libDEAD_gv_dS_ContextTarget[lp_player];
    if (auto48372809_val == libDEAD_ge_ContextTarget_Inventory) {
        libDEAD_gv_dS_InventoryItem[libDEAD_gv_dS_ContextItemIndex[lp_player]][lp_player] = null;
        libDEAD_gv_dS_InventoryAmount[libDEAD_gv_dS_ContextItemIndex[lp_player]][lp_player] = 0;
        libDEAD_gv_dS_InventoryDurability[libDEAD_gv_dS_ContextItemIndex[lp_player]][lp_player] = 0;
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[libDEAD_gv_dS_ContextItemIndex[lp_player]], PlayerGroupAll(), "State", "Empty");
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[libDEAD_gv_dS_ContextItemIndex[lp_player]], PlayerGroupAll(), "ItemType", "Any");
        libDEAD_gv_dS_ContextItem[lp_player] = null;
        libDEAD_gv_dS_ContextItemIndex[lp_player] = 0;
        libDEAD_gv_dS_ContextItemAmount[lp_player] = 0;
        libDEAD_gv_dS_ContextItemDurability[lp_player] = 0;
        libDEAD_gv_dS_ContextTarget[lp_player] = libDEAD_ge_ContextTarget_NoTarget;
        libDEAD_gf_UpdateInventoryPanel(lp_player);
    }
    else {
        return ;
    }
}

void libDEAD_gf_HookContextMenuonDemand (int lp_player, int lp_slot) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto529AAEC1_ae = 7;
    const int auto529AAEC1_ai = 1;
    int autoFA824B3F_val;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto529AAEC1_ai >= 0 && lv_index <= auto529AAEC1_ae) || (auto529AAEC1_ai < 0 && lv_index >= auto529AAEC1_ae) ) ; lv_index += auto529AAEC1_ai ) {
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lp_slot], c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Context/ContextButton" + IntToString(lv_index))));
        autoFA824B3F_val = lv_index;
        if (autoFA824B3F_val == 1) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine = DialogControlLastCreated();
        }
        else if (autoFA824B3F_val == 2) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Use = DialogControlLastCreated();
        }
        else if (autoFA824B3F_val == 3) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Equip = DialogControlLastCreated();
        }
        else if (autoFA824B3F_val == 4) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer = DialogControlLastCreated();
        }
        else if (autoFA824B3F_val == 5) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_PH = DialogControlLastCreated();
        }
        else if (autoFA824B3F_val == 6) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_PH2 = DialogControlLastCreated();
        }
        else if (autoFA824B3F_val == 7) {
            libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard = DialogControlLastCreated();
        }
        else {
        }
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
}

void libDEAD_gf_SetupContextType (int lp_player, int lp_slot) {
    // Variable Declarations
    int lv_index;
    string lv_category;

    // Automatic Variable Declarations
    string autoB07613FB_val;
    int auto398F0D41_val;
    int auto5E3E911C_val;
    int autoDA53F071_val;
    int autoD3B4B229_val;
    int autoA8CA329C_val;
    int auto39273C78_val;
    int auto23D2EA61_val;

    // Variable Initialization
    lv_category = "";

    // Implementation
    lv_category = libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_InventoryItem[lp_slot][lp_player]);
    autoB07613FB_val = lv_category;
    if (autoB07613FB_val == "Material") {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), false);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), true);
        auto398F0D41_val = lp_player;
        if (auto398F0D41_val == 1) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, true);
        }
        else if (auto398F0D41_val == 2) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, true);
        }
        else if (auto398F0D41_val == 3) {
        }
        else {
        }
    }
    else if (autoB07613FB_val == "Consummable") {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Use, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), false);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), true);
        auto5E3E911C_val = lp_player;
        if (auto5E3E911C_val == 1) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextUseP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, true);
        }
        else if (auto5E3E911C_val == 2) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextUseP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, true);
        }
        else if (auto5E3E911C_val == 3) {
        }
        else {
        }
    }
    else if (autoB07613FB_val == "Ammo") {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), false);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), true);
        autoDA53F071_val = lp_player;
        if (autoDA53F071_val == 1) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, true);
        }
        else if (autoDA53F071_val == 2) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, true);
        }
        else if (autoDA53F071_val == 3) {
        }
        else {
        }
    }
    else if (autoB07613FB_val == "Weapon") {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Equip, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), false);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), false);
        autoD3B4B229_val = lp_player;
        if (autoD3B4B229_val == 1) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextEquipP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, true);
        }
        else if (autoD3B4B229_val == 2) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextEquipP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, true);
        }
        else if (autoD3B4B229_val == 3) {
        }
        else {
        }
    }
    else if (autoB07613FB_val == "Suit") {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Equip, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), false);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), false);
        autoA8CA329C_val = lp_player;
        if (autoA8CA329C_val == 1) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextEquipP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, true);
        }
        else if (autoA8CA329C_val == 2) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextEquipP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, true);
        }
        else if (autoA8CA329C_val == 3) {
        }
        else {
        }
    }
    else if (autoB07613FB_val == "Pack") {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Equip, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), false);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), false);
        auto39273C78_val = lp_player;
        if (auto39273C78_val == 1) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextEquipP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, true);
        }
        else if (auto39273C78_val == 2) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextEquipP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, true);
        }
        else if (auto39273C78_val == 3) {
        }
        else {
        }
    }
    else if (autoB07613FB_val == "Augment") {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Equip, PlayerGroupAll(), true);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), false);
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), true);
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), false);
        auto23D2EA61_val = lp_player;
        if (auto23D2EA61_val == 1) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextEquipP1, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, true);
        }
        else if (auto23D2EA61_val == 2) {
            TriggerEnable(libDEAD_gt_DS_ContextExamineP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextEquipP2, true);
            TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, true);
        }
        else if (auto23D2EA61_val == 3) {
        }
        else {
        }
    }
    else {
    }
}

void libDEAD_gf_EnableDisableContextButton (int lp_player, bool lp_enableDisable, int lp_button) {
    // Automatic Variable Declarations
    int auto97406FE1_val;

    // Implementation
    auto97406FE1_val = lp_button;
    if (auto97406FE1_val == libDEAD_ge_ContextButton_Examine) {
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine, PlayerGroupAll(), lp_enableDisable);
    }
    else if (auto97406FE1_val == libDEAD_ge_ContextButton_Use) {
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Use, PlayerGroupAll(), lp_enableDisable);
    }
    else if (auto97406FE1_val == libDEAD_ge_ContextButton_Equip) {
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Equip, PlayerGroupAll(), lp_enableDisable);
    }
    else if (auto97406FE1_val == libDEAD_ge_ContextButton_Transfer) {
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), lp_enableDisable);
    }
    else if (auto97406FE1_val == libDEAD_ge_ContextButton_Placeholder1) {
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_PH, PlayerGroupAll(), lp_enableDisable);
    }
    else if (auto97406FE1_val == libDEAD_ge_ContextButton_Placeholder2) {
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_PH2, PlayerGroupAll(), lp_enableDisable);
    }
    else if (auto97406FE1_val == libDEAD_ge_ContextButton_Discard) {
        DialogControlSetEnabled(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), lp_enableDisable);
    }
    else {
    }
}

void libDEAD_gf_ShowHideContextButton (int lp_player, bool lp_showHide, int lp_button) {
    // Automatic Variable Declarations
    int auto4D7D98E4_val;

    // Implementation
    auto4D7D98E4_val = lp_button;
    if (auto4D7D98E4_val == libDEAD_ge_ContextButton_Examine) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Examine, PlayerGroupAll(), lp_showHide);
    }
    else if (auto4D7D98E4_val == libDEAD_ge_ContextButton_Use) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Use, PlayerGroupAll(), lp_showHide);
    }
    else if (auto4D7D98E4_val == libDEAD_ge_ContextButton_Equip) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Equip, PlayerGroupAll(), lp_showHide);
    }
    else if (auto4D7D98E4_val == libDEAD_ge_ContextButton_Transfer) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Transfer, PlayerGroupAll(), lp_showHide);
    }
    else if (auto4D7D98E4_val == libDEAD_ge_ContextButton_Placeholder1) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_PH, PlayerGroupAll(), lp_showHide);
    }
    else if (auto4D7D98E4_val == libDEAD_ge_ContextButton_Placeholder2) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_PH2, PlayerGroupAll(), lp_showHide);
    }
    else if (auto4D7D98E4_val == libDEAD_ge_ContextButton_Discard) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_context_Discard, PlayerGroupAll(), lp_showHide);
    }
    else {
    }
}

void libDEAD_gf_FocusContextItem (int lp_player, int lp_slot) {
    // Variable Declarations
    int lv_index;
    string lv_category;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_category = "";

    // Implementation
    libDEAD_gv_dS_ContextItem[lp_player] = null;
    libDEAD_gv_dS_ContextItemAmount[lp_player] = 0;
    libDEAD_gv_dS_ContextItemAmount[lp_player] = 0;
    libDEAD_gv_dS_ContextItem[lp_player] = libDEAD_gv_dS_InventoryItem[lp_slot][lp_player];
    libDEAD_gv_dS_ContextItemAmount[lp_player] = libDEAD_gv_dS_InventoryAmount[lp_slot][lp_player];
    libDEAD_gv_dS_ContextItemDurability[lp_player] = libDEAD_gv_dS_InventoryDurability[lp_slot][lp_player];
    libDEAD_gf_UpdateInventoryPanel(lp_player);
}

string libDEAD_gf_ReturnInventoryItem (int lp_player, int lp_slot) {
    // Variable Declarations
    string lv_item;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_item = libDEAD_gv_dS_InventoryItem[lp_slot][lp_slot];
    return lv_item;
}

int libDEAD_gf_ReturnItemID (string lp_instance) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_UserDataInstanceGetIndex("Items", lp_instance);
}

void libDEAD_gf_DS_CreateInventoryOld (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoA94F84A6_ae = 30;
    const int autoA94F84A6_ai = 1;
    const int autoDB56E98C_ae = 7;
    const int autoDB56E98C_ai = 1;
    const int autoF33F50EE_ae = 6;
    const int autoF33F50EE_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlHookup(libDEAD_gv_dS_GameUI[lp_player].lv_gameUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("CharacterInventoryPanel"));
    libDEAD_gv_dS_Inventory[lp_player].lv_inventoryPanel = DialogControlLastCreated();
    libDEAD_gv_dS_InventoryOpened[lp_player] = false;
    DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("InventoryModule"));
    libDEAD_gv_dS_Inventory[lp_player].lv_inventoryModule = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (autoA94F84A6_ai >= 0 && lv_index <= autoA94F84A6_ae) || (autoA94F84A6_ai < 0 && lv_index >= autoA94F84A6_ae) ) ; lv_index += autoA94F84A6_ai ) {
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryModule, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("InventorySlot" + IntToString(lv_index))));
        libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quantity"));
        libDEAD_gv_dS_Inventory[lp_player].lv_itemQuantity[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Icon"));
        libDEAD_gv_dS_Inventory[lp_player].lv_itemIcon[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Name"));
        libDEAD_gv_dS_Inventory[lp_player].lv_itemName[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quality"));
        libDEAD_gv_dS_Inventory[lp_player].lv_itemType[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseType"));
        libDEAD_gv_dS_Inventory[lp_player].lv_itemUse[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseDesc"));
        libDEAD_gv_dS_Inventory[lp_player].lv_itemDesc[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Lore"));
        libDEAD_gv_dS_Inventory[lp_player].lv_itemLore[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Durability"));
        libDEAD_gv_dS_Inventory[lp_player].lv_itemDurability[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryPanel, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("KeyItemModule"));
    libDEAD_gv_dS_Inventory[lp_player].lv_keyModule = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (autoDB56E98C_ai >= 0 && lv_index <= autoDB56E98C_ae) || (autoDB56E98C_ai < 0 && lv_index >= autoDB56E98C_ae) ) ; lv_index += autoDB56E98C_ai ) {
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_keyModule, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("KeySlot" + IntToString(lv_index))));
        libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quantity"));
        libDEAD_gv_dS_Inventory[lp_player].lv_keyQuantity[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Icon"));
        libDEAD_gv_dS_Inventory[lp_player].lv_keyIcon[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Name"));
        libDEAD_gv_dS_Inventory[lp_player].lv_keyName[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quality"));
        libDEAD_gv_dS_Inventory[lp_player].lv_keyType[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseType"));
        libDEAD_gv_dS_Inventory[lp_player].lv_keyUse[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseDesc"));
        libDEAD_gv_dS_Inventory[lp_player].lv_keyDesc[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Lore"));
        libDEAD_gv_dS_Inventory[lp_player].lv_keyLore[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Durability"));
        libDEAD_gv_dS_Inventory[lp_player].lv_keyDurability[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libDEAD_gv_dS_GameUI[lp_player].lv_gameUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("LootPanel"));
    libDEAD_gv_dS_Inventory[lp_player].lv_lootPanel = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootPanel, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Title"));
    libDEAD_gv_dS_Inventory[lp_player].lv_lootPanelTitle = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (autoF33F50EE_ai >= 0 && lv_index <= autoF33F50EE_ae) || (autoF33F50EE_ai < 0 && lv_index >= autoF33F50EE_ae) ) ; lv_index += autoF33F50EE_ai ) {
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("LootButton" + IntToString(lv_index))));
        libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quantity"));
        libDEAD_gv_dS_Inventory[lp_player].lv_lootQuantity[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Icon"));
        libDEAD_gv_dS_Inventory[lp_player].lv_lootIcon[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Name"));
        libDEAD_gv_dS_Inventory[lp_player].lv_lootName[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quality"));
        libDEAD_gv_dS_Inventory[lp_player].lv_lootType[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseType"));
        libDEAD_gv_dS_Inventory[lp_player].lv_lootUse[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseDesc"));
        libDEAD_gv_dS_Inventory[lp_player].lv_lootDesc[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Lore"));
        libDEAD_gv_dS_Inventory[lp_player].lv_lootLore[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Durability"));
        libDEAD_gv_dS_Inventory[lp_player].lv_lootDurability[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("TakeButton"));
    libDEAD_gv_dS_Inventory[lp_player].lv_takeButton = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_lootPanel, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("LootAllButton"));
    libDEAD_gv_dS_Inventory[lp_player].lv_lootAllButton = DialogControlLastCreated();
}

void libDEAD_gf_DS_CreateInventory (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoAB16C2A3_ae = 4;
    const int autoAB16C2A3_ai = 1;
    int auto44B57080_val;

    // Variable Initialization

    // Implementation
    DialogControlHookup(libDEAD_gv_dS_GameUI[lp_player].lv_gameUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("InventoryPanel"));
    libDEAD_gv_dS_Inventory[lp_player].lv_inventoryPanel = DialogControlLastCreated();
    libDEAD_gv_dS_InventoryOpened[lp_player] = false;
    DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryPanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Paperdoll/DamageHead"));
    libDEAD_gv_dS_Inventory[lp_player].lv_headPanel = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (autoAB16C2A3_ai >= 0 && lv_index <= autoAB16C2A3_ae) || (autoAB16C2A3_ai < 0 && lv_index >= autoAB16C2A3_ae) ) ; lv_index += autoAB16C2A3_ai ) {
        auto44B57080_val = lv_index;
        if (auto44B57080_val == 1) {
            DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryModule, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("HeadEquipment"));
        }
        else if (auto44B57080_val == 2) {
            DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryModule, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("BodyEquipment"));
        }
        else if (auto44B57080_val == 3) {
            DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryModule, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("BackEquipment"));
        }
        else if (auto44B57080_val == 4) {
            DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryModule, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName("WeaponEquipment"));
        }
        else {
        }
        libDEAD_gv_dS_Inventory[lp_player].lv_equipmentButton[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_equipmentButton[lv_index], c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Icon"));
        libDEAD_gv_dS_Inventory[lp_player].lv_equipmentIcon[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_equipmentButton[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Quality"));
        libDEAD_gv_dS_Inventory[lp_player].lv_equipmentCategory[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_equipmentButton[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Durability"));
        libDEAD_gv_dS_Inventory[lp_player].lv_equipmentDurability[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_equipmentButton[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Name"));
        libDEAD_gv_dS_Inventory[lp_player].lv_equipmentName[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_equipmentButton[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseType"));
        libDEAD_gv_dS_Inventory[lp_player].lv_equipmentUse[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_equipmentButton[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/UseDesc"));
        libDEAD_gv_dS_Inventory[lp_player].lv_equipmentUseDesc[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_dS_Inventory[lp_player].lv_equipmentButton[lv_index], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("DummyInfoFrame/Lore"));
        libDEAD_gv_dS_Inventory[lp_player].lv_equipmentLore[lv_index] = DialogControlLastCreated();
    }
}

void libDEAD_gf_RemoveItemFromInventorySlot (int lp_player, int lp_targetSlot) {
    // Automatic Variable Declarations
    // Implementation
    if ((libDEAD_gv_dS_InventoryAmount[lp_targetSlot][lp_player] == 0)) {
        libDEAD_gv_dS_InventoryItem[lp_targetSlot][lp_player] = null;
        libDEAD_gv_dS_InventoryAmount[lp_targetSlot][lp_player] = 0;
        libDEAD_gv_dS_InventoryDurability[lp_targetSlot][lp_player] = 0;
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lp_targetSlot], PlayerGroupAll(), "State", "Empty");
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lp_targetSlot], PlayerGroupAll(), "ItemType", "Any");
        libDEAD_gf_UpdateInventoryPanel(lp_player);
        return ;
    }

    libDEAD_gv_dS_InventoryAmount[lp_targetSlot][lp_player] -= 1;
    if ((libDEAD_gv_dS_InventoryAmount[lp_targetSlot][lp_player] == 1)) {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lp_targetSlot], PlayerGroupAll(), "State", "SingleItem");
    }

    libDEAD_gf_UpdateInventoryPanel(lp_player);
}

void libDEAD_gf_ShowHideInventoryPanelOld (int lp_player, bool lp_showHide) {
    // Automatic Variable Declarations
    bool auto94F1AC0F_val;

    // Implementation
    auto94F1AC0F_val = lp_showHide;
    if (auto94F1AC0F_val == true) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryPanel, PlayerGroupSingle(lp_player), true);
        CameraSetValue(lp_player, c_cameraValueDistance, libDEAD_gv_dS_CameraDistanceInventory, 0.5, -1, 10.0);
        Wait(0.0001, c_timeGame);
        libDEAD_gv_dS_InventoryOpened[lp_player] = true;
    }
    else if (auto94F1AC0F_val == false) {
        if ((libDEAD_gv_dS_ContextActive[lp_player] == true)) {
            DialogControlSendAnimationEvent(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[libDEAD_gv_dS_ContextItemIndex[lp_player]], PlayerGroupAll(), "ContextClose");
        }
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_inventoryPanel, PlayerGroupSingle(lp_player), false);
        if ((libDEAD_gv_looting[lp_player] == false)) {
            CameraSetValue(lp_player, c_cameraValueDistance, libDEAD_gv_dS_CameraDistanceNormal, 0.5, -1, 10.0);
        }

        Wait(0.0001, c_timeGame);
        libDEAD_gv_dS_InventoryOpened[lp_player] = false;
    }
    else {
    }
}

void libDEAD_gf_ShowHideInventoryPanel (int lp_player, bool lp_showHide) {
    // Automatic Variable Declarations
    bool auto86EAFC1A_val;

    // Implementation
    auto86EAFC1A_val = lp_showHide;
    if (auto86EAFC1A_val == true) {
        DialogControlSetVisible(libDEAD_gv_eCL__Inventory[lp_player].lv__INV, PlayerGroupSingle(lp_player), true);
        CameraSetValue(lp_player, c_cameraValueDistance, libDEAD_gv_dS_CameraDistanceInventory, 0.5, -1, 10.0);
        Wait(0.0001, c_timeGame);
        libDEAD_gv_dS_InventoryOpened[lp_player] = true;
    }
    else if (auto86EAFC1A_val == false) {
        if ((libDEAD_gv_dS_ContextActive[lp_player] == true)) {
        }
        DialogControlSetVisible(libDEAD_gv_eCL__Inventory[lp_player].lv__INV, PlayerGroupSingle(lp_player), false);
        if ((libDEAD_gv_looting[lp_player] == false)) {
            CameraSetValue(lp_player, c_cameraValueDistance, libDEAD_gv_dS_CameraDistanceNormal, 0.5, -1, 10.0);
        }

        Wait(0.0001, c_timeGame);
        libDEAD_gv_dS_InventoryOpened[lp_player] = false;
    }
    else {
    }
}

void libDEAD_gf_LockUnlockInventorySlot (int lp_player, bool lp_lockUnlock, int lp_slot) {
    // Automatic Variable Declarations
    bool auto0372A8C8_val;

    // Implementation
    auto0372A8C8_val = lp_lockUnlock;
    if (auto0372A8C8_val == true) {
        libDEAD_gv_dS_InventoryLocked[lp_slot][lp_player] = true;
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lp_slot], PlayerGroupAll(), "State", "Locked");
    }
    else if (auto0372A8C8_val == false) {
        libDEAD_gv_dS_InventoryLocked[lp_slot][lp_player] = false;
        if ((libDEAD_gf_ReturnInventoryItemAmount(lp_player, lp_slot) == 0)) {
            DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lp_slot], PlayerGroupAll(), "State", "Empty");
        }
        else if ((libDEAD_gf_ReturnInventoryItemAmount(lp_player, lp_slot) == 1)) {
            DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lp_slot], PlayerGroupAll(), "State", "SingleItem");
        }
        else if ((libDEAD_gf_ReturnInventoryItemAmount(lp_player, lp_slot) >= 2)) {
            DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lp_slot], PlayerGroupAll(), "State", "Stack");
        }
    }
    else {
    }
}

int libDEAD_gf_ReturnKeyItemAmount (int lp_player, int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    return libDEAD_gv_dS_KeyAmount[lp_slot][lp_player];
}

bool libDEAD_gf_ItemInInventory (int lp_player, string lp_item) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoAEE68065_ae = 30;
    const int autoAEE68065_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoAEE68065_ai >= 0 && lv_index <= autoAEE68065_ae) || (autoAEE68065_ai < 0 && lv_index >= autoAEE68065_ae) ) ; lv_index += autoAEE68065_ai ) {
        if ((libDEAD_gv_dS_InventoryItem[lv_index][lp_player] == lp_item)) {
            return true;
        }
        else {
            break;
        }
    }
    return false;
}

bool libDEAD_gf_KeyInInventory (int lp_player, string lp_item) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoEAE1D2E8_ae = 7;
    const int autoEAE1D2E8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoEAE1D2E8_ai >= 0 && lv_index <= autoEAE1D2E8_ae) || (autoEAE1D2E8_ai < 0 && lv_index >= autoEAE1D2E8_ae) ) ; lv_index += autoEAE1D2E8_ai ) {
        if ((libDEAD_gv_dS_KeySlot[lv_index][lp_player] == lp_item)) {
            return true;
        }
        else {
            break;
        }
    }
    return false;
}

int libDEAD_gf_ReturnCrateIndex (unit lp_crate) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_crate, 4));
}

int libDEAD_gf_ReturnCrateSize (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libDEAD_gv_dS_CrateSize[lp_index];
}

int libDEAD_gf_ReturnCrateItemAmount (unit lp_crate, int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return libDEAD_gv_dS_LootAmount[libDEAD_gf_ReturnCrateIndex(lp_crate)][lp_item];
}

int libDEAD_gf_ReturnInventoryItemAmount (int lp_player, int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return libDEAD_gv_dS_InventoryAmount[lp_item][lp_player];
}

int libDEAD_gf_ReturnInventoryItemDurability (int lp_player, int lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return libDEAD_gv_dS_InventoryDurability[lp_item][lp_player];
}

string libDEAD_gf_ReturnItemPropertyName (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Items", lp_item, "Name", 1);
}

int libDEAD_gf_ReturnItemPropertyMaxDurability (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Items", lp_item, "Max Durability", 1);
}

int libDEAD_gf_ReturnItemPropertyMaxAmount (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Items", lp_item, "Max Quantity", 1);
}

string libDEAD_gf_ReturnItemPropertyCategory (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Items", lp_item, "Category", 1);
}

text libDEAD_gf_ReturnItemPropertyDescription (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Items", lp_item, "Description", 1);
}

string libDEAD_gf_ReturnItemPropertyUse (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Items", lp_item, "Use Type", 1);
}

text libDEAD_gf_ReturnItemPropertyLore (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Items", lp_item, "Lore", 1);
}

string libDEAD_gf_ReturnItemPropertyIcon (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Items", lp_item, "Icon", 1);
}

string libDEAD_gf_ReturnItemPropertyModel (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Items", lp_item, "GroundModel", 1);
}

string libDEAD_gf_ReturnItemPropertyModelSize (string lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Items", lp_item, "ModelSize%", 1);
}

void libDEAD_gf_ShowHideLootPanel (int lp_player, bool lp_showHide) {
    // Automatic Variable Declarations
    bool auto5C22BCB2_val;

    // Implementation
    auto5C22BCB2_val = lp_showHide;
    if (auto5C22BCB2_val == false) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_lootPanel, PlayerGroupAll(), false);
    }
    else if (auto5C22BCB2_val == true) {
        DialogControlSetVisible(libDEAD_gv_dS_Inventory[lp_player].lv_lootPanel, PlayerGroupAll(), true);
    }
    else {
    }
    if ((lp_showHide == false)) {
        libDEAD_gf_ObjectInRange(lp_player, libDEAD_gv_playerUnit[lp_player], libDEAD_gv_dS_FocusedCrate[lp_player], false, libDEAD_gv_dS_FocusedUseTrigger[lp_player]);
        libDEAD_gf_EnableDisableObject(true, libDEAD_gv_dS_FocusedCrate[lp_player]);
        libDEAD_gv_looting[lp_player] = false;
        libDEAD_gv_dS_FocusedItem[lp_player] = null;
        libDEAD_gv_dS_FocusedItemSlot[lp_player] = 0;
        libDEAD_gv_dS_FocusedItemAmount[lp_player] = 0;
    }

    libDEAD_gf_ShowHideInventoryPanel(lp_player, lp_showHide);
}

void libDEAD_gf_DisplayCrateLoot (int lp_player, unit lp_crate) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoF07587D9_ae = 6;
    const int autoF07587D9_ai = 1;
    int auto31557371_ae;
    const int auto31557371_ai = 1;
    string auto0CEA2010_val;

    // Variable Initialization

    // Implementation
    if ((lp_crate == null)) {
        return ;
    }
    if ((UnitGetCustomValue(lp_crate, 2) == 2.0)) {
        return ;
    }

    lv_index = 1;
    for ( ; ( (autoF07587D9_ai >= 0 && lv_index <= autoF07587D9_ae) || (autoF07587D9_ai < 0 && lv_index >= autoF07587D9_ae) ) ; lv_index += autoF07587D9_ai ) {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "State", "Empty");
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "ItemUse", "Any");
    }
    libDEAD_gv_looting[lp_player] = true;
    auto31557371_ae = libDEAD_gv_dS_CrateSize[libDEAD_gf_ReturnCrateIndex(lp_crate)];
    lv_index = 1;
    for ( ; ( (auto31557371_ai >= 0 && lv_index <= auto31557371_ae) || (auto31557371_ai < 0 && lv_index >= auto31557371_ae) ) ; lv_index += auto31557371_ai ) {
        if ((libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index] == null)) {
        }
        else {
            libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Inventory[lp_player].lv_lootIcon[lv_index], UserDataGetImagePath("Items", libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index], "Icon", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_lootName[lv_index], StringToText(UserDataGetString("Items", libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index], "Name", 1)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_lootType[lv_index], StringToText(UserDataGetString("Items", libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index], "Category", 1)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_lootDesc[lv_index], UserDataGetText("Items", libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index], "Description", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_lootUse[lv_index], StringToText(libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index])), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_DEAD_C1A952DE", "A", IntToText(libDEAD_gf_ReturnItemPropertyMaxDurability(libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index])));
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_lootDurability[lv_index], TextExpressionAssemble("Param/Expression/lib_DEAD_C1A952DE"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_lootLore[lv_index], UserDataGetText("Items", libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index], "Lore", 1), PlayerGroupAll());
            auto0CEA2010_val = libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index]);
            if (auto0CEA2010_val == "Drink") {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "ItemUse", "Water");
            }
            else if (auto0CEA2010_val == "Heal") {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "ItemUse", "Medicine");
            }
            else if (auto0CEA2010_val == "Eat") {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "ItemUse", "Food");
            }
            else {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "ItemUse", "Any");
            }
            if ((libDEAD_gf_ReturnCrateItemAmount(lp_crate, lv_index) != 0)) {
                if ((libDEAD_gf_ReturnCrateItemAmount(lp_crate, lv_index) > 1)) {
                    DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "State", "Stack");
                }
                else {
                    DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "State", "SingleItem");
                }
                TextExpressionSetToken("Param/Expression/lib_DEAD_A67CDEEC", "A", IntToText(libDEAD_gf_ReturnCrateItemAmount(lp_crate, lv_index)));
                libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_lootQuantity[lv_index], TextExpressionAssemble("Param/Expression/lib_DEAD_A67CDEEC"), PlayerGroupAll());
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "ItemType", UserDataGetString("Items", libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index], "Category", 1));
            }

        }
    }
    libDEAD_gf_ShowHideLootPanel(lp_player, true);
    libDEAD_gf_FocusNextItemInCrate(lp_player, lp_crate);
}

void libDEAD_gf_UpdateInventoryPanel (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoD4699F17_ae = 7;
    const int autoD4699F17_ai = 1;
    const int auto1F48DF9D_ae = 30;
    const int auto1F48DF9D_ai = 1;
    string auto94A18638_val;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoD4699F17_ai >= 0 && lv_index <= autoD4699F17_ae) || (autoD4699F17_ai < 0 && lv_index >= autoD4699F17_ae) ) ; lv_index += autoD4699F17_ai ) {
        if ((libDEAD_gv_dS_KeySlot[lv_index][lp_player] == null)) {
            DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], PlayerGroupAll(), "ItemUse", "Any");
            break;
        }
        else {
            libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Inventory[lp_player].lv_keyIcon[lv_index], UserDataGetImagePath("Items", libDEAD_gv_dS_KeySlot[lv_index][lp_player], "Icon", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_keyName[lv_index], StringToText(UserDataGetString("Items", libDEAD_gv_dS_KeySlot[lv_index][lp_player], "Name", 1)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_keyType[lv_index], StringToText(UserDataGetString("Items", libDEAD_gv_dS_KeySlot[lv_index][lp_player], "Category", 1)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_keyDesc[lv_index], UserDataGetText("Items", libDEAD_gv_dS_KeySlot[lv_index][lp_player], "Description", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_keyLore[lv_index], UserDataGetText("Items", libDEAD_gv_dS_KeySlot[lv_index][lp_player], "Lore", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_keyUse[lv_index], StringToText(libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_KeySlot[lv_index][lp_player])), PlayerGroupAll());
            if ((libDEAD_gf_ReturnKeyItemAmount(lp_player, lv_index) != 0)) {
                if ((libDEAD_gf_ReturnKeyItemAmount(lp_player, lv_index) > 1)) {
                    DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], PlayerGroupAll(), "State", "Stack");
                }
                else {
                    DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], PlayerGroupAll(), "State", "SingleItem");
                }
                TextExpressionSetToken("Param/Expression/lib_DEAD_23259541", "A", IntToText(libDEAD_gf_ReturnKeyItemAmount(lp_player, lv_index)));
                libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_keyQuantity[lv_index], TextExpressionAssemble("Param/Expression/lib_DEAD_23259541"), PlayerGroupAll());
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], PlayerGroupAll(), "ItemType", UserDataGetString("Items", libDEAD_gv_dS_KeySlot[lv_index][lp_player], "Category", 1));
            }
            else {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], PlayerGroupAll(), "State", "Empty");
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_keySlots[lv_index], PlayerGroupAll(), "ItemType", "Any");
            }
        }
    }
    lv_index = 1;
    for ( ; ( (auto1F48DF9D_ai >= 0 && lv_index <= auto1F48DF9D_ae) || (auto1F48DF9D_ai < 0 && lv_index >= auto1F48DF9D_ae) ) ; lv_index += auto1F48DF9D_ai ) {
        if ((libDEAD_gv_dS_InventoryItem[lv_index][lp_player] == null)) {
            DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "ItemUse", "Any");
            break;
        }
        else {
            libNtve_gf_SetDialogItemImage(libDEAD_gv_dS_Inventory[lp_player].lv_itemIcon[lv_index], UserDataGetImagePath("Items", libDEAD_gv_dS_InventoryItem[lv_index][lp_player], "Icon", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemName[lv_index], StringToText(UserDataGetString("Items", libDEAD_gv_dS_InventoryItem[lv_index][lp_player], "Name", 1)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemType[lv_index], StringToText(UserDataGetString("Items", libDEAD_gv_dS_InventoryItem[lv_index][lp_player], "Category", 1)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemDesc[lv_index], UserDataGetText("Items", libDEAD_gv_dS_InventoryItem[lv_index][lp_player], "Description", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemLore[lv_index], UserDataGetText("Items", libDEAD_gv_dS_InventoryItem[lv_index][lp_player], "Lore", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemUse[lv_index], StringToText(libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_InventoryItem[lv_index][lp_player])), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_DEAD_4D0D1BC9", "A", IntToText(libDEAD_gf_ReturnInventoryItemDurability(lp_player, lv_index)));
            libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemDurability[lv_index], TextExpressionAssemble("Param/Expression/lib_DEAD_4D0D1BC9"), PlayerGroupAll());
            auto94A18638_val = libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_InventoryItem[lv_index][lp_player]);
            if (auto94A18638_val == "Drink") {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "ItemUse", "Water");
            }
            else if (auto94A18638_val == "Heal") {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "ItemUse", "Medicine");
            }
            else if (auto94A18638_val == "Eat") {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "ItemUse", "Food");
            }
            else {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "ItemUse", "Any");
            }
            if ((libDEAD_gf_ReturnInventoryItemAmount(lp_player, lv_index) != 0)) {
                if ((libDEAD_gf_ReturnInventoryItemAmount(lp_player, lv_index) > 1)) {
                    DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "State", "Stack");
                }
                else {
                    DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "State", "SingleItem");
                }
                TextExpressionSetToken("Param/Expression/lib_DEAD_6F740B26", "A", IntToText(libDEAD_gf_ReturnInventoryItemAmount(lp_player, lv_index)));
                libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[lp_player].lv_itemQuantity[lv_index], TextExpressionAssemble("Param/Expression/lib_DEAD_6F740B26"), PlayerGroupAll());
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "ItemType", UserDataGetString("Items", libDEAD_gv_dS_InventoryItem[lv_index][lp_player], "Category", 1));
            }
            else {
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "State", "Empty");
                DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_itemSlots[lv_index], PlayerGroupAll(), "ItemType", "Any");
            }
        }
    }
}

void libDEAD_gf_FocusNextItemInCrate (int lp_player, unit lp_crate) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto571A986E_ae;
    const int auto571A986E_ai = 1;
    int auto055FB7D1_val;
    int auto9DB37500_val;

    // Variable Initialization

    // Implementation
    auto571A986E_ae = libDEAD_gv_dS_CrateSize[libDEAD_gf_ReturnCrateIndex(lp_crate)];
    lv_index = 1;
    for ( ; ( (auto571A986E_ai >= 0 && lv_index <= auto571A986E_ae) || (auto571A986E_ai < 0 && lv_index >= auto571A986E_ae) ) ; lv_index += auto571A986E_ai ) {
        if ((libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_index] == null)) {
            auto9DB37500_val = lp_player;
            if (auto9DB37500_val == 1) {
                TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP1, false);
                TriggerEnable(libDEAD_gt_DS_LootAllButtonP1, false);
            }
            else if (auto9DB37500_val == 2) {
                TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP2, false);
                TriggerEnable(libDEAD_gt_DS_LootAllButtonP2, false);
            }
            else if (auto9DB37500_val == 3) {
            }
            else {
            }
            DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "FocusState", "Normal");
            if ((libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][libDEAD_gv_dS_CrateSize[libDEAD_gf_ReturnCrateIndex(lp_crate)]] == null)) {
                libDEAD_gf_ShowHideLootPanel(lp_player, false);
                libDEAD_gf_EnableDisableObject(false, lp_crate);
            }

        }
        else {
            auto055FB7D1_val = lp_player;
            if (auto055FB7D1_val == 1) {
                TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP1, true);
                TriggerEnable(libDEAD_gt_DS_LootAllButtonP1, true);
            }
            else if (auto055FB7D1_val == 2) {
                TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP2, true);
                TriggerEnable(libDEAD_gt_DS_LootAllButtonP2, true);
            }
            else if (auto055FB7D1_val == 3) {
            }
            else {
            }
            libDEAD_gf_FocusItem(lp_player, lp_crate, lv_index);
            return ;
        }
    }
}

void libDEAD_gf_FocusItemInCrate (int lp_player, int lp_index, unit lp_crate) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto490140F6_ae = 6;
    const int auto490140F6_ai = 1;
    int auto757EEA0C_val;
    int auto7367BD59_val;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto490140F6_ai >= 0 && lv_i <= auto490140F6_ae) || (auto490140F6_ai < 0 && lv_i >= auto490140F6_ae) ) ; lv_i += auto490140F6_ai ) {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_i], PlayerGroupAll(), "FocusState", "Normal");
        auto757EEA0C_val = lp_player;
        if (auto757EEA0C_val == 1) {
            TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP1, false);
            TriggerEnable(libDEAD_gt_DS_LootAllButtonP1, false);
        }
        else if (auto757EEA0C_val == 2) {
            TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP2, false);
            TriggerEnable(libDEAD_gt_DS_LootAllButtonP2, false);
        }
        else if (auto757EEA0C_val == 3) {
        }
        else {
        }
    }
    auto7367BD59_val = lp_player;
    if (auto7367BD59_val == 1) {
        TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP1, true);
        TriggerEnable(libDEAD_gt_DS_LootAllButtonP1, true);
    }
    else if (auto7367BD59_val == 2) {
        TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP2, true);
        TriggerEnable(libDEAD_gt_DS_LootAllButtonP2, true);
    }
    else if (auto7367BD59_val == 3) {
    }
    else {
    }
    libDEAD_gf_FocusItem(lp_player, lp_crate, lp_index);
}

void libDEAD_gf_FocusItem (int lp_player, unit lp_crate, int lp_slot) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto46528D96_ae = 6;
    const int auto46528D96_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto46528D96_ai >= 0 && lv_index <= auto46528D96_ae) || (auto46528D96_ai < 0 && lv_index >= auto46528D96_ae) ) ; lv_index += auto46528D96_ai ) {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lv_index], PlayerGroupAll(), "FocusState", "Normal");
    }
    libDEAD_gv_dS_FocusedItem[lp_player] = null;
    libDEAD_gv_dS_FocusedItemSlot[lp_player] = 0;
    libDEAD_gv_dS_FocusedItemAmount[lp_player] = 0;
    libDEAD_gv_dS_FocusedItemDurability[lp_player] = 0;
    if ((libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lp_slot] == null)) {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lp_slot], PlayerGroupAll(), "FocusState", "Normal");
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lp_slot], PlayerGroupAll(), "State", "Empty");
    }
    else {
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootSlots[lp_slot], PlayerGroupAll(), "FocusState", "Focused");
        libDEAD_gv_dS_FocusedItem[lp_player] = libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lp_slot];
        libDEAD_gv_dS_FocusedItemSlot[lp_player] = lp_slot;
        libDEAD_gv_dS_FocusedItemAmount[lp_player] = libDEAD_gv_dS_LootAmount[libDEAD_gf_ReturnCrateIndex(lp_crate)][lp_slot];
        libDEAD_gv_dS_FocusedItemDurability[lp_player] = libDEAD_gv_dS_LootDurability[libDEAD_gf_ReturnCrateIndex(lp_crate)][lp_slot];
        libDEAD_gv_dS_FocusedCrate[lp_player] = lp_crate;
    }
}

void libDEAD_gf_LootFocusedItem (int lp_player, unit lp_crate) {
    // Variable Declarations
    string lv_localItem;
    int lv_localAmount;
    int lv_localDurability;
    int lv_sourceSlot;
    int lv_lootableAmount;
    int lv_partiallyLooted;
    bool lv_fullyLooted;
    int lv_index;

    // Automatic Variable Declarations
    const int auto71D0AE99_ae = 7;
    const int auto71D0AE99_ai = 1;
    const int auto1D5A3C0C_ae = 18;
    const int auto1D5A3C0C_ai = 1;
    const int auto2CAF74B4_ae = 18;
    const int auto2CAF74B4_ai = 1;
    bool autoA969DBF9_val;

    // Variable Initialization

    // Implementation
    if ((libDEAD_gv_dS_FocusedItemSlot[lp_player] == 0)) {
        return ;
    }

    lv_sourceSlot = libDEAD_gv_dS_FocusedItemSlot[lp_player];
    lv_localItem = libDEAD_gv_dS_FocusedItem[lp_player];
    lv_localAmount = libDEAD_gv_dS_FocusedItemAmount[lp_player];
    lv_localDurability = libDEAD_gv_dS_FocusedItemDurability[lp_player];
    if ((libDEAD_gf_ReturnItemPropertyCategory(lv_localItem) == "Key")) {
        lv_index = 1;
        for ( ; ( (auto71D0AE99_ai >= 0 && lv_index <= auto71D0AE99_ae) || (auto71D0AE99_ai < 0 && lv_index >= auto71D0AE99_ae) ) ; lv_index += auto71D0AE99_ai ) {
            if ((libDEAD_gv_dS_KeySlot[lv_index][lp_player] == null)) {
                libDEAD_gv_dS_KeySlot[lv_index][lp_player] = lv_localItem;
                libDEAD_gv_dS_KeyAmount[lv_index][lp_player] = lv_localAmount;
                libDEAD_gv_dS_LootAmount[libDEAD_gf_ReturnCrateIndex(lp_crate)][libDEAD_gv_dS_FocusedItemSlot[lp_player]] = 0;
                libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][libDEAD_gv_dS_FocusedItemSlot[lp_player]] = null;
                libDEAD_gv_dS_FocusedItem[lp_player] = null;
                libDEAD_gv_dS_FocusedItemSlot[lp_player] = 0;
                libDEAD_gv_dS_FocusedItemAmount[lp_player] = 0;
                libDEAD_gf_DS_DisplayLootEvent(lp_player, lv_localAmount, lv_localItem);
                break;
            }

        }
        libDEAD_gf_DisplayCrateLoot(lp_player, lp_crate);
        libDEAD_gf_UpdateInventoryPanel(lp_player);
        libDEAD_gf_FocusNextItemInCrate(lp_player, lp_crate);
        return ;
    }

    lv_index = 1;
    for ( ; ( (auto1D5A3C0C_ai >= 0 && lv_index <= auto1D5A3C0C_ae) || (auto1D5A3C0C_ai < 0 && lv_index >= auto1D5A3C0C_ae) ) ; lv_index += auto1D5A3C0C_ai ) {
        if ((libDEAD_gv_dS_FocusedItem[lp_player] == libDEAD_gv_dS_InventoryItem[lv_index][lp_player]) && (libDEAD_gv_dS_InventoryAmount[lv_index][lp_player] < UserDataGetInt("Items", libDEAD_gv_dS_FocusedItem[lp_player], "Max Quantity", 1)) && (libDEAD_gv_dS_InventoryAmount[lv_index][lp_player] != UserDataGetInt("Items", libDEAD_gv_dS_FocusedItem[lp_player], "Max Quantity", 1))) {
            lv_lootableAmount = (UserDataGetInt("Items", libDEAD_gv_dS_FocusedItem[lp_player], "Max Quantity", 1) - libDEAD_gv_dS_InventoryAmount[lv_index][lp_player]);
            if ((lv_localAmount <= lv_lootableAmount)) {
                libDEAD_gv_dS_InventoryAmount[lv_index][lp_player] += lv_localAmount;
                lv_fullyLooted = true;
            }
            else {
                libDEAD_gv_dS_InventoryAmount[lv_index][lp_player] = libDEAD_gf_ReturnItemPropertyMaxAmount(libDEAD_gv_dS_FocusedItem[lp_player]);
                lv_partiallyLooted = (lv_partiallyLooted - UserDataGetInt("Items", libDEAD_gv_dS_FocusedItem[lp_player], "Max Quantity", 1));
                lv_partiallyLooted = (UserDataGetInt("Items", libDEAD_gv_dS_FocusedItem[lp_player], "Max Quantity", 1) - lv_lootableAmount);
                lv_partiallyLooted = (lv_localAmount - lv_lootableAmount);
                libDEAD_gv_dS_LootAmount[libDEAD_gf_ReturnCrateIndex(lp_crate)][libDEAD_gv_dS_FocusedItemSlot[lp_player]] = lv_partiallyLooted;
                lv_localAmount = lv_partiallyLooted;
            }
        }

    }
    lv_index = 1;
    for ( ; ( (auto2CAF74B4_ai >= 0 && lv_index <= auto2CAF74B4_ae) || (auto2CAF74B4_ai < 0 && lv_index >= auto2CAF74B4_ae) ) ; lv_index += auto2CAF74B4_ai ) {
        if (((libDEAD_gv_dS_InventoryItem[lv_index][lp_player] == null) && (lv_fullyLooted == false) && (libDEAD_gv_dS_InventoryLocked[lv_index][lp_player] == false))) {
            libDEAD_gv_dS_InventoryItem[lv_index][lp_player] = lv_localItem;
            libDEAD_gv_dS_InventoryAmount[lv_index][lp_player] = lv_localAmount;
            libDEAD_gv_dS_InventoryDurability[lv_index][lp_player] = lv_localDurability;
            lv_fullyLooted = true;
            break;
        }

    }
    autoA969DBF9_val = lv_fullyLooted;
    if (autoA969DBF9_val == false) {
    }
    else if (autoA969DBF9_val == true) {
        libDEAD_gf_DS_DisplayLootEvent(lp_player, lv_localAmount, lv_localItem);
        libDEAD_gv_dS_LootAmount[libDEAD_gf_ReturnCrateIndex(lp_crate)][libDEAD_gv_dS_FocusedItemSlot[lp_player]] = 0;
        libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][libDEAD_gv_dS_FocusedItemSlot[lp_player]] = null;
        libDEAD_gv_dS_FocusedItem[lp_player] = null;
        libDEAD_gv_dS_FocusedItemSlot[lp_player] = 0;
        libDEAD_gv_dS_FocusedItemAmount[lp_player] = 0;
    }
    else {
    }
    libDEAD_gf_DisplayCrateLoot(lp_player, lp_crate);
    libDEAD_gf_UpdateInventoryPanel(lp_player);
    libDEAD_gf_FocusNextItemInCrate(lp_player, lp_crate);
}

int libDEAD_gf_ReturnLimbHP (int lp_player, int lp_limb) {
    // Automatic Variable Declarations
    int auto4C4BE348_val;

    // Implementation
    auto4C4BE348_val = lp_limb;
    if (auto4C4BE348_val == libDEAD_ge_DS_LimbType_Head) {
        return libDEAD_gv_dS_Character[lp_player].lv_headHP;
    }
    else if (auto4C4BE348_val == libDEAD_ge_DS_LimbType_Torso) {
        return libDEAD_gv_dS_Character[lp_player].lv_torsoHP;
    }
    else if (auto4C4BE348_val == libDEAD_ge_DS_LimbType_Legs) {
        return libDEAD_gv_dS_Character[lp_player].lv_legsHP;
    }
    else {
        return 500;
    }
}

int libDEAD_gf_ReturnLimbHPMax (int lp_player, int lp_limb) {
    // Automatic Variable Declarations
    int autoFCC9B592_val;

    // Implementation
    autoFCC9B592_val = lp_limb;
    if (autoFCC9B592_val == libDEAD_ge_DS_LimbType_Head) {
        return libDEAD_gv_dS_Character[lp_player].lv_headMaxHP;
    }
    else if (autoFCC9B592_val == libDEAD_ge_DS_LimbType_Torso) {
        return libDEAD_gv_dS_Character[lp_player].lv_torsoMaxHP;
    }
    else if (autoFCC9B592_val == libDEAD_ge_DS_LimbType_Legs) {
        return libDEAD_gv_dS_Character[lp_player].lv_legsMaxHP;
    }
    else {
        return 500;
    }
}

int libDEAD_gf_ReturnTotalHP (int lp_player) {
    // Variable Declarations
    int lv_totalHP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_totalHP += libDEAD_gv_dS_Character[lp_player].lv_headHP;
    lv_totalHP += libDEAD_gv_dS_Character[lp_player].lv_torsoHP;
    lv_totalHP += libDEAD_gv_dS_Character[lp_player].lv_legsHP;
    return lv_totalHP;
}

int libDEAD_gf_ReturnTotalHPMax (int lp_player) {
    // Variable Declarations
    int lv_totalHPMax;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_totalHPMax += libDEAD_gv_dS_Character[lp_player].lv_headMaxHP;
    lv_totalHPMax += libDEAD_gv_dS_Character[lp_player].lv_torsoMaxHP;
    lv_totalHPMax += libDEAD_gv_dS_Character[lp_player].lv_legsMaxHP;
    return lv_totalHPMax;
}

int libDEAD_gf_ReturnLimbHPPercent (int lp_player, int lp_limb) {
    // Variable Declarations
    int lv_amount;
    int lv_return;

    // Automatic Variable Declarations
    int auto0E521D36_val;

    // Variable Initialization

    // Implementation
    auto0E521D36_val = lp_limb;
    if (auto0E521D36_val == libDEAD_ge_DS_LimbType_Head) {
        lv_amount = (libDEAD_gv_dS_Character[lp_player].lv_headHP * 100);
        lv_return = (lv_amount / libDEAD_gv_dS_Character[lp_player].lv_headMaxHP);
    }
    else if (auto0E521D36_val == libDEAD_ge_DS_LimbType_Torso) {
        lv_amount = (libDEAD_gv_dS_Character[lp_player].lv_torsoHP * 100);
        lv_return = (lv_amount / libDEAD_gv_dS_Character[lp_player].lv_torsoMaxHP);
    }
    else if (auto0E521D36_val == libDEAD_ge_DS_LimbType_Legs) {
        lv_amount = (libDEAD_gv_dS_Character[lp_player].lv_legsHP * 100);
        lv_return = (lv_amount / libDEAD_gv_dS_Character[lp_player].lv_legsMaxHP);
    }
    else {
    }
    return lv_return;
}

void libDEAD_gf_DS_CreateInventoryPanel (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto009BA592_ae = 2;
    const int auto009BA592_ai = 1;
    int autoBF62FFAE_val;

    // Variable Initialization

    // Implementation
    if ((libDEAD_gv_dS_Character[lp_player].lv_initialized != false)) {
        return ;
    }

    DialogControlHookup(libDEAD_gv_dS_GameUI[lp_player].lv_gameUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("CharacterStatusPanel"));
    libDEAD_gv_dS_Character[lp_player].lv_characterPanel = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Character[lp_player].lv_characterPanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CharacterPaperdoll/DamageHead"));
    libDEAD_gv_dS_Character[lp_player].lv_headPanel = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Character[lp_player].lv_characterPanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CharacterPaperdoll/DamageTorso"));
    libDEAD_gv_dS_Character[lp_player].lv_torsoPanel = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Character[lp_player].lv_characterPanel, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("CharacterPaperdoll/DamageStomach"));
    libDEAD_gv_dS_Character[lp_player].lv_legsPanel = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Character[lp_player].lv_characterPanel, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("HeadStatus/StatusBar/ProgressBar"));
    libDEAD_gv_dS_Character[lp_player].lv_headBar = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Character[lp_player].lv_characterPanel, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("TorsoStatus/StatusBar/ProgressBar"));
    libDEAD_gv_dS_Character[lp_player].lv_torsoBar = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_Character[lp_player].lv_characterPanel, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("RightLegStatus/StatusBar/ProgressBar"));
    libDEAD_gv_dS_Character[lp_player].lv_legsBar = DialogControlLastCreated();
    lv_index = 1;
    for ( ; ( (auto009BA592_ai >= 0 && lv_index <= auto009BA592_ae) || (auto009BA592_ai < 0 && lv_index >= auto009BA592_ae) ) ; lv_index += auto009BA592_ai ) {
        DialogControlHookup(libDEAD_gv_dS_Character[lp_player].lv_characterPanel, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName(("VitalStatusBar" + IntToString(lv_index) + "/StatBar")));
        autoBF62FFAE_val = lv_index;
        if (autoBF62FFAE_val == 1) {
            libDEAD_gv_dS_Character[lp_player].lv_vitalsFoodBar = DialogControlLastCreated();
        }
        else if (autoBF62FFAE_val == 2) {
            libDEAD_gv_dS_Character[lp_player].lv_vitalsWaterBar = DialogControlLastCreated();
        }
        else {
        }
    }
    libDEAD_gv_dS_Character[lp_player].lv_initialized = true;
}

void libDEAD_gf_DS_UpdateVitalsUI (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemMaximumValue(libDEAD_gv_dS_Character[lp_player].lv_headBar, IntToFixed(libDEAD_gf_ReturnLimbHPMax(lp_player, libDEAD_ge_DS_LimbType_Head)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemCurrentValue(libDEAD_gv_dS_Character[lp_player].lv_headBar, IntToFixed(libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Head)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemMaximumValue(libDEAD_gv_dS_Character[lp_player].lv_torsoBar, IntToFixed(libDEAD_gf_ReturnLimbHPMax(lp_player, libDEAD_ge_DS_LimbType_Torso)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemCurrentValue(libDEAD_gv_dS_Character[lp_player].lv_torsoBar, IntToFixed(libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Torso)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemMaximumValue(libDEAD_gv_dS_Character[lp_player].lv_legsBar, IntToFixed(libDEAD_gf_ReturnLimbHPMax(lp_player, libDEAD_ge_DS_LimbType_Legs)), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemCurrentValue(libDEAD_gv_dS_Character[lp_player].lv_legsBar, IntToFixed(libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Legs)), PlayerGroupSingle(lp_player));
    libDEAD_gf_DS_SetLimbState(lp_player, libDEAD_ge_DS_LimbType_Head);
    libDEAD_gf_DS_SetLimbState(lp_player, libDEAD_ge_DS_LimbType_Torso);
    libDEAD_gf_DS_SetLimbState(lp_player, libDEAD_ge_DS_LimbType_Legs);
    libNtve_gf_SetDialogItemCurrentValue(libDEAD_gv_dS_Character[lp_player].lv_vitalsFoodBar, IntToFixed(libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemMaximumValue(libDEAD_gv_dS_Character[lp_player].lv_vitalsFoodBar, IntToFixed(libDEAD_gv_dS_PlayerData[lp_player].lv_maxFood), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemCurrentValue(libDEAD_gv_dS_Character[lp_player].lv_vitalsWaterBar, IntToFixed(libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemMaximumValue(libDEAD_gv_dS_Character[lp_player].lv_vitalsWaterBar, IntToFixed(libDEAD_gv_dS_PlayerData[lp_player].lv_maxWater), PlayerGroupSingle(lp_player));
}

void libDEAD_gf_DS_SetLimbState (int lp_player, int lp_limb) {
    // Variable Declarations
    string lv_damageType;
    int lv_targetLimb;

    // Automatic Variable Declarations
    int auto9E7544B3_val;

    // Variable Initialization
    lv_damageType = "";
    lv_targetLimb = c_invalidDialogControlId;

    // Implementation
    if ((libDEAD_gf_ReturnLimbHPPercent(lp_player, lp_limb) >= 100)) {
        lv_damageType = "None";
    }
    else if ((libDEAD_gf_ReturnLimbHPPercent(lp_player, lp_limb) <= 99) && (libDEAD_gf_ReturnLimbHPPercent(lp_player, lp_limb) >= 67)) {
        lv_damageType = "Low";
    }
    else if ((libDEAD_gf_ReturnLimbHPPercent(lp_player, lp_limb) <= 66) && (libDEAD_gf_ReturnLimbHPPercent(lp_player, lp_limb) >= 34)) {
        lv_damageType = "Medium";
    }
    else if ((libDEAD_gf_ReturnLimbHPPercent(lp_player, lp_limb) <= 33) && (libDEAD_gf_ReturnLimbHPPercent(lp_player, lp_limb) >= 1)) {
        lv_damageType = "High";
    }
    else if ((libDEAD_gf_ReturnLimbHPPercent(lp_player, lp_limb) <= 0)) {
        lv_damageType = "Blacked";
    }
    auto9E7544B3_val = lp_limb;
    if (auto9E7544B3_val == libDEAD_ge_DS_LimbType_Head) {
        lv_targetLimb = libDEAD_gv_dS_Character[lp_player].lv_headPanel;
    }
    else if (auto9E7544B3_val == libDEAD_ge_DS_LimbType_Torso) {
        lv_targetLimb = libDEAD_gv_dS_Character[lp_player].lv_torsoPanel;
    }
    else if (auto9E7544B3_val == libDEAD_ge_DS_LimbType_Legs) {
        lv_targetLimb = libDEAD_gv_dS_Character[lp_player].lv_legsPanel;
    }
    else {
    }
    DialogControlSetAnimationState(lv_targetLimb, PlayerGroupSingle(lp_player), "Damage", lv_damageType);
}

void libDEAD_gf_DS_InitHPSystem (int lp_player) {
    // Variable Declarations
    int lv_totalHPMax;

    // Automatic Variable Declarations
    int autoBF7FA21B_val;
    int autoBD5F2F6F_val;

    // Variable Initialization

    // Implementation
    UnitSetPropertyFixed(libDEAD_gv_playerUnit[lp_player], c_unitPropLifePercent, 100.0);
    autoBF7FA21B_val = lp_player;
    if (autoBF7FA21B_val == 1) {
    }
    else if (autoBF7FA21B_val == 2) {
    }
    else if (autoBF7FA21B_val == 3) {
    }
    else {
    }
    libDEAD_gv_dS_Character[lp_player].lv_headMaxHP = 80;
    libDEAD_gv_dS_Character[lp_player].lv_torsoMaxHP = 200;
    libDEAD_gv_dS_Character[lp_player].lv_legsMaxHP = 160;
    libDEAD_gf_SetLimbHealth(lp_player, libDEAD_gf_ReturnLimbHPMax(lp_player, libDEAD_ge_DS_LimbType_Head), libDEAD_ge_DS_LimbType_Head);
    libDEAD_gf_SetLimbHealth(lp_player, libDEAD_gf_ReturnLimbHPMax(lp_player, libDEAD_ge_DS_LimbType_Legs), libDEAD_ge_DS_LimbType_Legs);
    libDEAD_gf_SetLimbHealth(lp_player, libDEAD_gf_ReturnLimbHPMax(lp_player, libDEAD_ge_DS_LimbType_Torso), libDEAD_ge_DS_LimbType_Torso);
    libDEAD_gf_SetFoodCurrent(lp_player, 100);
    libDEAD_gf_SetWaterCurrent(lp_player, 100);
    autoBD5F2F6F_val = lp_player;
    if (autoBD5F2F6F_val == 1) {
        TriggerEnable(libDEAD_gt_DS_FoodLossP1, true);
        TriggerEnable(libDEAD_gt_DS_WaterLossP1, true);
    }
    else if (autoBD5F2F6F_val == 2) {
        TriggerEnable(libDEAD_gt_DS_FoodLossP2, true);
        TriggerEnable(libDEAD_gt_DS_WaterLossP2, true);
    }
    else if (autoBD5F2F6F_val == 3) {
    }
    else {
    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_SetFoodCurrent (int lp_player, int lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood = lp_amount;
}

void libDEAD_gf_SetWaterCurrent (int lp_player, int lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater = lp_amount;
}

void libDEAD_gf_AddRemoveFood (int lp_player, bool lp_addRemove, int lp_amount) {
    // Variable Declarations
    int lv_localFood;

    // Automatic Variable Declarations
    bool auto8AB858F9_val;

    // Variable Initialization

    // Implementation
    auto8AB858F9_val = lp_addRemove;
    if (auto8AB858F9_val == true) {
        lv_localFood = (libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood + lp_amount);
        if ((lv_localFood >= libDEAD_gv_dS_PlayerData[lp_player].lv_maxFood)) {
            libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood = libDEAD_gv_dS_PlayerData[lp_player].lv_maxFood;
        }
        else {
            libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood = lv_localFood;
        }
    }
    else if (auto8AB858F9_val == false) {
        lv_localFood = (libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood - lp_amount);
        if ((lv_localFood <= 0)) {
            libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood = lp_player;
        }
        else {
            libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood = lv_localFood;
        }
    }
    else {
    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_AddRemoveWater (int lp_player, bool lp_addRemove, int lp_amount) {
    // Variable Declarations
    int lv_localWater;

    // Automatic Variable Declarations
    bool auto1D27C00F_val;

    // Variable Initialization

    // Implementation
    auto1D27C00F_val = lp_addRemove;
    if (auto1D27C00F_val == true) {
        lv_localWater = (libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater + lp_amount);
        if ((lv_localWater >= libDEAD_gv_dS_PlayerData[lp_player].lv_maxWater)) {
            libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater = libDEAD_gv_dS_PlayerData[lp_player].lv_maxWater;
        }
        else {
            libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater = lv_localWater;
        }
    }
    else if (auto1D27C00F_val == false) {
        lv_localWater = (libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater - lp_amount);
        if ((lv_localWater <= 0)) {
            libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater = 0;
        }
        else {
            libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater = lv_localWater;
        }
    }
    else {
    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_ModifyLimbHealthMax (int lp_player, int lp_value, int lp_limb) {
    // Automatic Variable Declarations
    int auto802D6273_val;

    // Implementation
    auto802D6273_val = lp_limb;
    if (auto802D6273_val == libDEAD_ge_DS_LimbType_Head) {
        libDEAD_gv_dS_Character[lp_player].lv_headMaxHP += lp_value;
    }
    else if (auto802D6273_val == libDEAD_ge_DS_LimbType_Torso) {
        libDEAD_gv_dS_Character[lp_player].lv_torsoMaxHP += lp_value;
    }
    else if (auto802D6273_val == libDEAD_ge_DS_LimbType_Legs) {
        libDEAD_gv_dS_Character[lp_player].lv_legsMaxHP += lp_value;
    }
    else {

    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_ModifyLimbHealth (int lp_player, int lp_value, int lp_limb) {
    // Automatic Variable Declarations
    int auto4864EDCE_val;

    // Implementation
    auto4864EDCE_val = lp_limb;
    if (auto4864EDCE_val == libDEAD_ge_DS_LimbType_Head) {
        libDEAD_gv_dS_Character[lp_player].lv_headHP += lp_value;
    }
    else if (auto4864EDCE_val == libDEAD_ge_DS_LimbType_Torso) {
        libDEAD_gv_dS_Character[lp_player].lv_torsoHP += lp_value;
    }
    else if (auto4864EDCE_val == libDEAD_ge_DS_LimbType_Legs) {
        libDEAD_gv_dS_Character[lp_player].lv_legsHP += lp_value;
    }
    else {

    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_DivideHealthToLimbs (int lp_player, int lp_hPAddition) {
    // Variable Declarations
    const fixed lv_percentageHead = 0.18;
    const fixed lv_percentageTorso = 0.45;
    const fixed lv_percentageLegs = 0.37;
    fixed lv_headHp;
    fixed lv_torsoHP;
    fixed lv_legHP;
    int lv_totalHP;
    int lv_tempHP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_headHp = (IntToFixed(lp_hPAddition) * lv_percentageHead);
    lv_torsoHP = (IntToFixed(lp_hPAddition) * lv_percentageTorso);
    lv_legHP = (IntToFixed(lp_hPAddition) * lv_percentageLegs);
    lv_headHp = Trunc(lv_headHp);
    lv_torsoHP = Trunc(lv_torsoHP);
    lv_legHP = Trunc(lv_legHP);
    lv_totalHP = (FixedToInt(lv_headHp) + FixedToInt(lv_torsoHP) + FixedToInt(lv_legHP));
    if ((lv_totalHP < lp_hPAddition) && (lp_hPAddition >= 1)) {
        libDEAD_gf_SendDebugMessage(("Adding HP by " + IntToString(lp_hPAddition)));
        lv_tempHP = (lp_hPAddition - lv_totalHP);
        lv_headHp += lv_tempHP;
        lv_totalHP = (FixedToInt(lv_headHp) + FixedToInt(lv_torsoHP) + FixedToInt(lv_legHP));
    }
    if ((lv_totalHP > lp_hPAddition) && (lp_hPAddition <= -1)) {
        libDEAD_gf_SendDebugMessage(("Removing HP by " + IntToString(lp_hPAddition)));
        lv_tempHP = (lp_hPAddition - lv_totalHP);
        lv_headHp += lv_tempHP;
        lv_totalHP = (FixedToInt(lv_headHp) + FixedToInt(lv_torsoHP) + FixedToInt(lv_legHP));
    }
    libDEAD_gf_ModifyLimbHealthMax(lp_player, FixedToInt(lv_headHp), libDEAD_ge_DS_LimbType_Head);
    libDEAD_gf_ModifyLimbHealthMax(lp_player, FixedToInt(lv_legHP), libDEAD_ge_DS_LimbType_Legs);
    libDEAD_gf_ModifyLimbHealthMax(lp_player, FixedToInt(lv_torsoHP), libDEAD_ge_DS_LimbType_Torso);
    libDEAD_gf_ModifyLimbHealth(lp_player, FixedToInt(lv_torsoHP), libDEAD_ge_DS_LimbType_Head);
    libDEAD_gf_ModifyLimbHealth(lp_player, FixedToInt(lv_torsoHP), libDEAD_ge_DS_LimbType_Torso);
    libDEAD_gf_ModifyLimbHealth(lp_player, FixedToInt(lv_legHP), libDEAD_ge_DS_LimbType_Legs);
}

void libDEAD_gf_AddFood (int lp_player, int lp_amount) {
    // Variable Declarations
    int lv_localFood;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_localFood = (libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood + lp_amount);
    if ((lv_localFood >= libDEAD_gv_dS_PlayerData[lp_player].lv_maxFood)) {
        libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood = libDEAD_gv_dS_PlayerData[lp_player].lv_maxFood;
    }
    else {
        libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood = lv_localFood;
    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_RemoveFood (int lp_player, int lp_amount) {
    // Variable Declarations
    int lv_localFood;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_localFood = (libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood - lp_amount);
    if ((lv_localFood <= 0)) {
        libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood = 0;
    }
    else {
        libDEAD_gv_dS_PlayerData[lp_player].lv_currentFood = lv_localFood;
    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_AddWater (int lp_player, int lp_amount) {
    // Variable Declarations
    int lv_localWater;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_localWater = (libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater + lp_amount);
    if ((lv_localWater >= libDEAD_gv_dS_PlayerData[lp_player].lv_maxWater)) {
        libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater = libDEAD_gv_dS_PlayerData[lp_player].lv_maxWater;
    }
    else {
        libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater = lv_localWater;
    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_RemoveWater (int lp_player, int lp_amount) {
    // Variable Declarations
    int lv_localWater;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_localWater = (libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater - lp_amount);
    if ((lv_localWater <= 0)) {
        libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater = 0;
    }
    else {
        libDEAD_gv_dS_PlayerData[lp_player].lv_currentWater = lv_localWater;
    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_SetLimbHealth (int lp_player, int lp_value, int lp_limb) {
    // Automatic Variable Declarations
    int auto81A1E93D_val;

    // Implementation
    auto81A1E93D_val = lp_limb;
    if (auto81A1E93D_val == libDEAD_ge_DS_LimbType_Head) {
        libDEAD_gv_dS_Character[lp_player].lv_headHP = lp_value;
    }
    else if (auto81A1E93D_val == libDEAD_ge_DS_LimbType_Torso) {
        libDEAD_gv_dS_Character[lp_player].lv_torsoHP = lp_value;
    }
    else if (auto81A1E93D_val == libDEAD_ge_DS_LimbType_Legs) {
        libDEAD_gv_dS_Character[lp_player].lv_legsHP = lp_value;
    }
    else {

    }
}

void libDEAD_gf_AddDamagetoLimb (int lp_player, int lp_value, int lp_limb) {
    int init_i;

    // Variable Declarations
    int lv_remainingDamage;
    int lv_splitRemaining;
    int[8] lv_possibleTargets;
    int lv_targetCount;
    int lv_index;

    // Automatic Variable Declarations
    int auto7B5188FE_val;
    int autoF8AE12DB_ae;
    const int autoF8AE12DB_ai = 1;
    int autoB05ABCB2_ae;
    const int autoB05ABCB2_ai = 1;
    int auto7B6BFB21_ae;
    const int auto7B6BFB21_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_possibleTargets[init_i] = libDEAD_ge_DS_LimbType_Head;
    }

    // Implementation
    if ((lp_value > libDEAD_gf_ReturnTotalHP(lp_player))) {
        libDEAD_gv_dS_Character[lp_player].lv_headHP = 0;
        libDEAD_gv_dS_Character[lp_player].lv_torsoHP = 0;
        libDEAD_gv_dS_Character[lp_player].lv_legsHP = 0;
        libDEAD_gv_dS_Character[lp_player].lv_legsHP = 0;
        libDEAD_gf_DS_UpdateVitalsUI(lp_player);
        UnitKill(libDEAD_gv_playerUnit[lp_player]);
    }

    auto7B5188FE_val = lp_limb;
    if (auto7B5188FE_val == libDEAD_ge_DS_LimbType_Head) {
        if ((libDEAD_gv_dS_Character[lp_player].lv_headHP < lp_value)) {
            libDEAD_gv_dS_Character[lp_player].lv_headHP = 0;
            lv_remainingDamage = (lp_value - libDEAD_gv_dS_Character[lp_player].lv_headHP);
            if ((libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Head) != 0)) {
                lv_targetCount += 1;
                lv_possibleTargets[lv_targetCount] = libDEAD_ge_DS_LimbType_Head;
            }

            if ((libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Torso) != 0)) {
                lv_targetCount += 1;
                lv_possibleTargets[lv_targetCount] = libDEAD_ge_DS_LimbType_Torso;
            }

            if ((libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Legs) != 0)) {
                lv_targetCount += 1;
                lv_possibleTargets[lv_targetCount] = libDEAD_ge_DS_LimbType_Legs;
            }

            lv_splitRemaining = (lv_remainingDamage / lv_targetCount);
            autoF8AE12DB_ae = lv_targetCount;
            lv_index = 1;
            for ( ; ( (autoF8AE12DB_ai >= 0 && lv_index <= autoF8AE12DB_ae) || (autoF8AE12DB_ai < 0 && lv_index >= autoF8AE12DB_ae) ) ; lv_index += autoF8AE12DB_ai ) {
                libDEAD_gf_AddDamagetoLimb(lp_player, lv_splitRemaining, lv_possibleTargets[lv_index]);
            }
        }
        else {
            libDEAD_gv_dS_Character[lp_player].lv_headHP -= lp_value;
        }
        if ((libDEAD_gv_dS_Character[lp_player].lv_headHP == 0)) {
            libDEAD_gv_dS_Character[lp_player].lv_headHP = 0;
        }

    }
    else if (auto7B5188FE_val == libDEAD_ge_DS_LimbType_Torso) {
        if ((libDEAD_gv_dS_Character[lp_player].lv_torsoHP < lp_value)) {
            libDEAD_gv_dS_Character[lp_player].lv_torsoHP = 0;
            lv_remainingDamage = (lp_value - libDEAD_gv_dS_Character[lp_player].lv_torsoHP);
            if ((libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Head) != 0)) {
                lv_targetCount += 1;
                lv_possibleTargets[lv_targetCount] = libDEAD_ge_DS_LimbType_Head;
            }

            if ((libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Torso) != 0)) {
                lv_targetCount += 1;
                lv_possibleTargets[lv_targetCount] = libDEAD_ge_DS_LimbType_Torso;
            }

            if ((libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Legs) != 0)) {
                lv_targetCount += 1;
                lv_possibleTargets[lv_targetCount] = libDEAD_ge_DS_LimbType_Legs;
            }

            lv_splitRemaining = (lv_remainingDamage / lv_targetCount);
            autoB05ABCB2_ae = lv_targetCount;
            lv_index = 1;
            for ( ; ( (autoB05ABCB2_ai >= 0 && lv_index <= autoB05ABCB2_ae) || (autoB05ABCB2_ai < 0 && lv_index >= autoB05ABCB2_ae) ) ; lv_index += autoB05ABCB2_ai ) {
                libDEAD_gf_AddDamagetoLimb(lp_player, lv_splitRemaining, lv_possibleTargets[lv_index]);
            }
        }
        else {
            libDEAD_gv_dS_Character[lp_player].lv_torsoHP -= lp_value;
        }
        if ((libDEAD_gv_dS_Character[lp_player].lv_torsoHP == 0)) {
            libDEAD_gv_dS_Character[lp_player].lv_torsoHP = 0;
        }

    }
    else if (auto7B5188FE_val == libDEAD_ge_DS_LimbType_Legs) {
        if ((libDEAD_gv_dS_Character[lp_player].lv_legsHP < lp_value)) {
            libDEAD_gv_dS_Character[lp_player].lv_legsHP = 0;
            lv_remainingDamage = (lp_value - libDEAD_gv_dS_Character[lp_player].lv_legsHP);
            if ((libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Head) != 0)) {
                lv_targetCount += 1;
                lv_possibleTargets[lv_targetCount] = libDEAD_ge_DS_LimbType_Head;
            }

            if ((libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Torso) != 0)) {
                lv_targetCount += 1;
                lv_possibleTargets[lv_targetCount] = libDEAD_ge_DS_LimbType_Torso;
            }

            if ((libDEAD_gf_ReturnLimbHP(lp_player, libDEAD_ge_DS_LimbType_Legs) != 0)) {
                lv_targetCount += 1;
                lv_possibleTargets[lv_targetCount] = libDEAD_ge_DS_LimbType_Legs;
            }

            lv_splitRemaining = (lv_remainingDamage / lv_targetCount);
            auto7B6BFB21_ae = lv_targetCount;
            lv_index = 1;
            for ( ; ( (auto7B6BFB21_ai >= 0 && lv_index <= auto7B6BFB21_ae) || (auto7B6BFB21_ai < 0 && lv_index >= auto7B6BFB21_ae) ) ; lv_index += auto7B6BFB21_ai ) {
                libDEAD_gf_AddDamagetoLimb(lp_player, lv_splitRemaining, lv_possibleTargets[lv_index]);
            }
        }
        else {
            libDEAD_gv_dS_Character[lp_player].lv_legsHP -= lp_value;
        }
        if ((libDEAD_gv_dS_Character[lp_player].lv_legsHP == 0)) {
            libDEAD_gv_dS_Character[lp_player].lv_legsHP = 0;
        }

    }
    else {

    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_AddHealingtoLimb (int lp_player, int lp_value, int lp_limb) {
    // Variable Declarations
    int lv_remainingDamage;

    // Automatic Variable Declarations
    int auto7FC48C8D_val;

    // Variable Initialization

    // Implementation
    auto7FC48C8D_val = lp_limb;
    if (auto7FC48C8D_val == libDEAD_ge_DS_LimbType_Head) {
        libDEAD_gv_dS_Character[lp_player].lv_headHP += lp_value;
        if ((libDEAD_gv_dS_Character[lp_player].lv_headHP == libDEAD_gv_dS_Character[lp_player].lv_headMaxHP)) {
            libDEAD_gv_dS_Character[lp_player].lv_headHP = libDEAD_gv_dS_Character[lp_player].lv_headMaxHP;
        }

    }
    else if (auto7FC48C8D_val == libDEAD_ge_DS_LimbType_Torso) {
        libDEAD_gv_dS_Character[lp_player].lv_torsoHP += lp_value;
        if ((libDEAD_gv_dS_Character[lp_player].lv_torsoHP == libDEAD_gv_dS_Character[lp_player].lv_torsoMaxHP)) {
            libDEAD_gv_dS_Character[lp_player].lv_torsoHP = libDEAD_gv_dS_Character[lp_player].lv_torsoMaxHP;
        }

    }
    else if (auto7FC48C8D_val == libDEAD_ge_DS_LimbType_Legs) {
        libDEAD_gv_dS_Character[lp_player].lv_legsHP += lp_value;
        if ((libDEAD_gv_dS_Character[lp_player].lv_legsHP == libDEAD_gv_dS_Character[lp_player].lv_legsMaxHP)) {
            libDEAD_gv_dS_Character[lp_player].lv_legsHP = libDEAD_gv_dS_Character[lp_player].lv_legsMaxHP;
        }

    }
    else {

    }
    libDEAD_gf_DS_UpdateVitalsUI(lp_player);
}

void libDEAD_gf_TakeDamage (int lp_player, fixed lp_damageAmount, unit lp_attacker) {
    int init_i;

    // Variable Declarations
    int lv_minTarget;
    int lv_maxTarget;
    int lv_targetCount;
    int[11] lv_possibleTargets;
    int lv_splitDamage;
    int lv_i;
    int lv_localTarget;

    // Automatic Variable Declarations
    string auto24CBE3DA_val;
    int autoEC6B48DF_ae;
    const int autoEC6B48DF_ai = 1;
    int auto72655245_ae;
    const int auto72655245_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_possibleTargets[init_i] = libDEAD_ge_DS_LimbType_Head;
    }
    lv_localTarget = libDEAD_ge_DS_LimbType_Head;

    // Implementation
    auto24CBE3DA_val = UnitGetType(lp_attacker);
    if (auto24CBE3DA_val == "InfestedCivilian") {
        lv_possibleTargets[1] = libDEAD_ge_DS_LimbType_Torso;
        lv_possibleTargets[5] = libDEAD_ge_DS_LimbType_Head;
        lv_maxTarget = RandomInt(1, 5);
        lv_minTarget = RandomInt(1, lv_maxTarget);
        autoEC6B48DF_ae = lv_maxTarget;
        lv_i = lv_minTarget;
        for ( ; ( (autoEC6B48DF_ai >= 0 && lv_i <= autoEC6B48DF_ae) || (autoEC6B48DF_ai < 0 && lv_i >= autoEC6B48DF_ae) ) ; lv_i += autoEC6B48DF_ai ) {
            lv_targetCount += 1;
        }
        lv_splitDamage = FixedToInt((lp_damageAmount / lv_targetCount));
        auto72655245_ae = lv_targetCount;
        lv_i = 1;
        for ( ; ( (auto72655245_ai >= 0 && lv_i <= auto72655245_ae) || (auto72655245_ai < 0 && lv_i >= auto72655245_ae) ) ; lv_i += auto72655245_ai ) {
            lv_localTarget = lv_possibleTargets[RandomInt(1, 5)];
            libDEAD_gf_AddDamagetoLimb(lp_player, lv_splitDamage, lv_localTarget);
        }
    }
    else {
    }
}

void libDEAD_gf_TakeDamageNoAttacker (int lp_player, fixed lp_damageAmount, int lp_damageType) {
    int init_i;

    // Variable Declarations
    int lv_minTarget;
    int lv_maxTarget;
    int lv_targetCount;
    int[4] lv_possibleTargets;
    int lv_splitDamage;
    int lv_i;
    int lv_localTarget;

    // Automatic Variable Declarations
    int auto652D5C80_val;
    int auto51B000BB_ae;
    const int auto51B000BB_ai = 1;
    int auto910C3149_ae;
    const int auto910C3149_ai = 1;
    int auto32441786_ae;
    const int auto32441786_ai = 1;
    int autoE99E07C0_ae;
    const int autoE99E07C0_ai = 1;
    int auto1C603153_ae;
    const int auto1C603153_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_possibleTargets[init_i] = libDEAD_ge_DS_LimbType_Head;
    }
    lv_localTarget = libDEAD_ge_DS_LimbType_Head;

    // Implementation
    auto652D5C80_val = lp_damageType;
    if (auto652D5C80_val == libDEAD_ge_DS_DamageType_BrokenLegs) {
        lv_possibleTargets[1] = libDEAD_ge_DS_LimbType_Legs;
        lv_targetCount = 1;
        lv_splitDamage = FixedToInt((lp_damageAmount / lv_targetCount));
        auto51B000BB_ae = lv_targetCount;
        lv_i = 1;
        for ( ; ( (auto51B000BB_ai >= 0 && lv_i <= auto51B000BB_ae) || (auto51B000BB_ai < 0 && lv_i >= auto51B000BB_ae) ) ; lv_i += auto51B000BB_ai ) {
            lv_localTarget = lv_possibleTargets[RandomInt(1, 1)];
            libDEAD_gf_AddDamagetoLimb(lp_player, lv_splitDamage, lv_localTarget);
        }
    }
    else if (auto652D5C80_val == libDEAD_ge_DS_DamageType_Food) {
        lv_possibleTargets[1] = libDEAD_ge_DS_LimbType_Torso;
        lv_possibleTargets[2] = libDEAD_ge_DS_LimbType_Head;
        lv_possibleTargets[3] = libDEAD_ge_DS_LimbType_Legs;
        lv_maxTarget = RandomInt(1, 3);
        lv_minTarget = RandomInt(1, lv_maxTarget);
        auto910C3149_ae = lv_maxTarget;
        lv_i = lv_minTarget;
        for ( ; ( (auto910C3149_ai >= 0 && lv_i <= auto910C3149_ae) || (auto910C3149_ai < 0 && lv_i >= auto910C3149_ae) ) ; lv_i += auto910C3149_ai ) {
            lv_targetCount += 1;
        }
        lv_splitDamage = FixedToInt((lp_damageAmount / lv_targetCount));
        auto32441786_ae = lv_targetCount;
        lv_i = 1;
        for ( ; ( (auto32441786_ai >= 0 && lv_i <= auto32441786_ae) || (auto32441786_ai < 0 && lv_i >= auto32441786_ae) ) ; lv_i += auto32441786_ai ) {
            lv_localTarget = lv_possibleTargets[RandomInt(1, 3)];
            libDEAD_gf_AddDamagetoLimb(lp_player, lv_splitDamage, lv_localTarget);
        }
    }
    else if (auto652D5C80_val == libDEAD_ge_DS_DamageType_Water) {
        lv_possibleTargets[1] = libDEAD_ge_DS_LimbType_Torso;
        lv_possibleTargets[2] = libDEAD_ge_DS_LimbType_Head;
        lv_possibleTargets[3] = libDEAD_ge_DS_LimbType_Legs;
        lv_maxTarget = RandomInt(1, 3);
        lv_minTarget = RandomInt(1, lv_maxTarget);
        autoE99E07C0_ae = lv_maxTarget;
        lv_i = lv_minTarget;
        for ( ; ( (autoE99E07C0_ai >= 0 && lv_i <= autoE99E07C0_ae) || (autoE99E07C0_ai < 0 && lv_i >= autoE99E07C0_ae) ) ; lv_i += autoE99E07C0_ai ) {
            lv_targetCount += 1;
        }
        lv_splitDamage = FixedToInt((lp_damageAmount / lv_targetCount));
        auto1C603153_ae = lv_targetCount;
        lv_i = 1;
        for ( ; ( (auto1C603153_ai >= 0 && lv_i <= auto1C603153_ae) || (auto1C603153_ai < 0 && lv_i >= auto1C603153_ae) ) ; lv_i += auto1C603153_ai ) {
            lv_localTarget = lv_possibleTargets[RandomInt(1, 3)];
            libDEAD_gf_AddDamagetoLimb(lp_player, lv_splitDamage, lv_localTarget);
        }
    }
    else {
    }
}

int libDEAD_gf_ReturnEmptyAilmentSlot (int lp_player, int lp_targetLimb) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto2AB1E6FE_val;
    const int auto020DF2A7_ae = 5;
    const int auto020DF2A7_ai = 1;
    const int auto969C41EA_ae = 5;
    const int auto969C41EA_ai = 1;
    const int auto2419C6FC_ae = 5;
    const int auto2419C6FC_ai = 1;

    // Variable Initialization

    // Implementation
    auto2AB1E6FE_val = lp_targetLimb;
    if (auto2AB1E6FE_val == libDEAD_ge_DS_LimbType_Head) {
        lv_i = 1;
        for ( ; ( (auto020DF2A7_ai >= 0 && lv_i <= auto020DF2A7_ae) || (auto020DF2A7_ai < 0 && lv_i >= auto020DF2A7_ae) ) ; lv_i += auto020DF2A7_ai ) {
            if ((libDEAD_gv_dS_Character[lp_player].lv_headAilments[lv_i] == null)) {
                return lv_i;
            }

        }
    }
    else if (auto2AB1E6FE_val == libDEAD_ge_DS_LimbType_Torso) {
        lv_i = 1;
        for ( ; ( (auto969C41EA_ai >= 0 && lv_i <= auto969C41EA_ae) || (auto969C41EA_ai < 0 && lv_i >= auto969C41EA_ae) ) ; lv_i += auto969C41EA_ai ) {
            if ((libDEAD_gv_dS_Character[lp_player].lv_torsoAilments[lv_i] == null)) {
                return lv_i;
            }

        }
    }
    else if (auto2AB1E6FE_val == libDEAD_ge_DS_LimbType_Legs) {
        lv_i = 1;
        for ( ; ( (auto2419C6FC_ai >= 0 && lv_i <= auto2419C6FC_ae) || (auto2419C6FC_ai < 0 && lv_i >= auto2419C6FC_ae) ) ; lv_i += auto2419C6FC_ai ) {
            if ((libDEAD_gv_dS_Character[lp_player].lv_legsAilments[lv_i] == null)) {
                return lv_i;
            }

        }
    }
    else {
        return 0;
    }
    return 0;
}

void libDEAD_gf_AddAilmenttoLimb (int lp_player, string lp_ailment, int lp_targetLimb) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoE7BE00F7_val;

    // Variable Initialization

    // Implementation
    autoE7BE00F7_val = lp_targetLimb;
    if (autoE7BE00F7_val == libDEAD_ge_DS_LimbType_Head) {
        if ((libDEAD_gf_ReturnEmptyAilmentSlot(lp_player, libDEAD_ge_DS_LimbType_Head) != 0) && ((lp_ailment == "Pain") || (lp_ailment == "Bleeding"))) {
            libDEAD_gv_dS_Character[lp_player].lv_headAilments[libDEAD_gf_ReturnEmptyAilmentSlot(lp_player, libDEAD_ge_DS_LimbType_Head)] = lp_ailment;
        }
        else {
            return ;
        }
    }
    else {
    }
}

void libDEAD_gf_HealAilmentfromLimb (int lp_player, string lp_ailment, int lp_targetLimb) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto6FF64E06_val;

    // Variable Initialization

    // Implementation
    auto6FF64E06_val = lp_targetLimb;
    if (auto6FF64E06_val == libDEAD_ge_DS_LimbType_Head) {
        if ((libDEAD_gf_ReturnEmptyAilmentSlot(lp_player, libDEAD_ge_DS_LimbType_Head) != 0) && ((lp_ailment == "Pain") || (lp_ailment == "Bleeding"))) {
            libDEAD_gv_dS_Character[lp_player].lv_headAilments[libDEAD_gf_ReturnEmptyAilmentSlot(lp_player, libDEAD_ge_DS_LimbType_Head)] = lp_ailment;
        }
        else {
            return ;
        }
    }
    else {
    }
}

void libDEAD_gf_DS_InitializeInventory (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    BankLoad("DS_PD", lp_player);
    libDEAD_gv_dS_PlayerBank[lp_player] = BankLastCreated();
    if ((BankValueGetAsFlag(libDEAD_gv_dS_PlayerBank[lp_player], "GD", "Initialized") != true)) {
        libDEAD_gf_DS_BankPopulation(lp_player);
    }

}

void libDEAD_gf_DS_BankPopulation (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_index2;
    const int lv_inventoryX = 4;
    const int lv_intentoryY = 5;

    // Automatic Variable Declarations
    const int auto64A7ECBD_ae = lv_inventoryX;
    const int auto64A7ECBD_ai = 1;
    int autoF48B6C2C_ae;
    const int autoF48B6C2C_ai = 1;

    // Variable Initialization

    // Implementation
    BankValueSetFromInt(libDEAD_gv_dS_PlayerBank[lp_player], "PI", "X", 4);
    BankValueSetFromInt(libDEAD_gv_dS_PlayerBank[lp_player], "PI", "Y", 5);
    lv_index = 1;
    for ( ; ( (auto64A7ECBD_ai >= 0 && lv_index <= auto64A7ECBD_ae) || (auto64A7ECBD_ai < 0 && lv_index >= auto64A7ECBD_ae) ) ; lv_index += auto64A7ECBD_ai ) {
        autoF48B6C2C_ae = lv_index2;
        lv_index2 = 1;
        for ( ; ( (autoF48B6C2C_ai >= 0 && lv_index2 <= autoF48B6C2C_ae) || (autoF48B6C2C_ai < 0 && lv_index2 >= autoF48B6C2C_ae) ) ; lv_index2 += autoF48B6C2C_ai ) {
            BankValueSetFromInt(BankLastCreated(), ("Slot" + IntToString(lv_index) + "," + IntToString(lv_index2)), "ItemID", 0);
            BankValueSetFromInt(BankLastCreated(), ("Slot" + IntToString(lv_index) + "," + IntToString(lv_index2)), "ItemQuantity", 0);
            BankValueSetFromInt(BankLastCreated(), ("Slot" + IntToString(lv_index) + "," + IntToString(lv_index2)), "ItemDurability", 0);
        }
    }
    BankValueSetFromFlag(BankLastCreated(), "GD", "Initialized", true);
    BankSave(libDEAD_gv_dS_PlayerBank[lp_player]);
}

void libDEAD_gf_DS_Fire (int lp_player) {
    // Variable Declarations
    int lv_ammoSlot;
    int lv_reserveAmmo;
    int lv_loadingAmmo;
    int lv_index1;
    int lv_index2;
    string lv_weaponData;
    string lv_requiredAmmoItem;
    string lv_equippedWeapon;

    // Automatic Variable Declarations
    int autoAFAFC6A4_val;

    // Variable Initialization

    // Implementation
    if ((libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmo == 0)) {
        SoundPlay(SoundLink("WidowMine_ArmedBeep", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else {
        libDEAD_gv_attackOnCooldown[lp_player] = true;
        autoAFAFC6A4_val = lp_player;
        if (autoAFAFC6A4_val == 1) {
            TriggerExecute(libDEAD_gt_DS_FireCooldownP1, false, false);
        }
        else if (autoAFAFC6A4_val == 2) {
        }
        else if (autoAFAFC6A4_val == 3) {
        }
        else {
        }
        libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmo -= 1;
        if ((libDEAD_gv_targetUnit[lp_player] != null)) {
            UnitCreateEffectUnit(libDEAD_gv_playerUnit[lp_player], "P38ScytheGuassPistol", libDEAD_gv_targetUnit[lp_player]);
            SoundPlay(SoundLink("Reaper_AttackLaunch", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
            if (((UnitGetOwner(libDEAD_gv_targetUnit[lp_player]) == 4) || (UnitGetOwner(libDEAD_gv_targetUnit[lp_player]) == 5) || (UnitGetOwner(libDEAD_gv_targetUnit[lp_player]) == 6) || (UnitGetOwner(libDEAD_gv_targetUnit[lp_player]) == 7))) {
                UnitIssueOrder(libDEAD_gv_targetUnit[lp_player], OrderTargetingUnit(AbilityCommand("attack", 0), libDEAD_gv_playerUnit[lp_player]), c_orderQueueReplace);
                UnitGroupIssueOrder(UnitGroup(null, 4, RegionCircle(UnitGetPosition(libDEAD_gv_targetUnit[lp_player]), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libDEAD_gv_playerUnit[lp_player])), c_orderQueueReplace);
                UnitGroupIssueOrder(UnitGroup(null, 5, RegionCircle(UnitGetPosition(libDEAD_gv_targetUnit[lp_player]), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libDEAD_gv_playerUnit[lp_player])), c_orderQueueReplace);
                UnitGroupIssueOrder(UnitGroup(null, 6, RegionCircle(UnitGetPosition(libDEAD_gv_targetUnit[lp_player]), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(libDEAD_gv_playerUnit[lp_player])), c_orderQueueReplace);
            }

        }
        else {
            if ((libDEAD_gv_targetPoint[lp_player] != null)) {
                UnitCreateEffectUnit(libDEAD_gv_playerUnit[lp_player], "P38ScytheGuassPistol", libDEAD_gv_targetUnit[lp_player]);
            }
            else {
                SoundPlay(SoundLink("Reaper_AttackLaunch", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
            }
        }
    }
}

void libDEAD_gf_DS_ReloadWeapon (int lp_player) {
    // Variable Declarations
    int lv_ammoSlot;
    int lv_reserveAmmo;
    int lv_loadingAmmo;
    int lv_index1;
    int lv_index2;
    string lv_weaponData;
    string lv_requiredAmmoItem;
    string lv_equippedWeapon;

    // Automatic Variable Declarations
    string auto7DA4EF53_val;
    int auto372123A7_ae;
    const int auto372123A7_ai = 1;
    const int autoF77BF831_ae = 1;
    const int autoF77BF831_ai = -1;

    // Variable Initialization

    // Implementation
    if ((libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmoReserve <= 0)) {
        return ;
    }

    SoundPlay(SoundLink("Liberator_AG_Morph_Servo", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
    lv_reserveAmmo = libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmoReserve;
    if ((libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmoReserve <= libDEAD_gv_dS_PlayerData[lp_player].lv_weaponMagSize)) {
        lv_loadingAmmo = libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmoReserve;
    }
    else {
        lv_loadingAmmo = libDEAD_gv_dS_PlayerData[lp_player].lv_weaponMagSize;
    }
    lv_equippedWeapon = libDEAD_gv_dS_PlayerData[lp_player].lv_equippedMainWpn;
    lv_weaponData = UserDataGetUserInstance("Items", lv_equippedWeapon, "Weapon Data", 1);
    auto7DA4EF53_val = UserDataGetString("WeaponTypes", lv_weaponData, "AmmoType", 1);
    if (auto7DA4EF53_val == "Pistol") {
        lv_requiredAmmoItem = "Pistol Ammo";
    }
    else {
    }
    libDEAD_gv_dS_PlayerData[lp_player].lv_weaponAmmo = lv_loadingAmmo;
    auto372123A7_ae = lv_loadingAmmo;
    lv_index1 = 1;
    for ( ; ( (auto372123A7_ai >= 0 && lv_index1 <= auto372123A7_ae) || (auto372123A7_ai < 0 && lv_index1 >= auto372123A7_ae) ) ; lv_index1 += auto372123A7_ai ) {
        lv_index2 = 18;
        for ( ; ( (autoF77BF831_ai >= 0 && lv_index2 <= autoF77BF831_ae) || (autoF77BF831_ai < 0 && lv_index2 >= autoF77BF831_ae) ) ; lv_index2 += autoF77BF831_ai ) {
            if ((libDEAD_gv_dS_InventoryItem[lv_index2][lp_player] == lv_requiredAmmoItem)) {
                lv_ammoSlot = lv_index2;
                libDEAD_gf_RemoveItemFromInventorySlot(lp_player, lv_ammoSlot);
                break;
            }

        }
    }
    libDEAD_gf_DS_ReadMainWeaponData(lp_player, lv_equippedWeapon);
}

void libDEAD_gf_DS_HookupInteractButton (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(120, 120, c_anchorBottom, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libDEAD_gv_dS_InteractPrompt[lp_player].lv_dialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libDEAD_gv_dS_InteractPrompt[lp_player].lv_dialog, c_triggerControlTypeButton, "DS_HUDTemplates/FloatingUseKey");
    libDEAD_gv_dS_InteractPrompt[lp_player].lv_button = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_InteractPrompt[lp_player].lv_button, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Icon"));
    libDEAD_gv_dS_InteractPrompt[lp_player].lv_icon = DialogControlLastCreated();
    DialogControlHookup(libDEAD_gv_dS_InteractPrompt[lp_player].lv_button, c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("HotkeyFrame"));
    libDEAD_gv_dS_InteractPrompt[lp_player].lv_hotkey = DialogControlLastCreated();
    DialogSetPositionRelativeToUnit(libDEAD_gv_dS_InteractPrompt[lp_player].lv_dialog, lp_unit, "Ref_Overhead", -60, -125);
    DialogSetVisible(libDEAD_gv_dS_InteractPrompt[lp_player].lv_dialog, PlayerGroupSingle(lp_player), false);
}

void libDEAD_gf_ShowHideInteractPrompt (int lp_type, bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    bool autoE2BA348E_val;

    // Implementation
    autoE2BA348E_val = lp_showHide;
    if (autoE2BA348E_val == true) {
        DialogSetVisible(libDEAD_gv_dS_InteractPrompt[lp_player].lv_dialog, PlayerGroupSingle(lp_player), true);
    }
    else if (autoE2BA348E_val == false) {
        DialogSetVisible(libDEAD_gv_dS_InteractPrompt[lp_player].lv_dialog, PlayerGroupSingle(lp_player), false);
    }
    else {
    }
}

bool libDEAD_gf_CrateItem () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto688BC229_ae = 200;
    const int auto688BC229_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto688BC229_ai >= 0 && lv_index <= auto688BC229_ae) || (auto688BC229_ai < 0 && lv_index >= auto688BC229_ae) ) ; lv_index += auto688BC229_ai ) {
        if ((EventUnit() == libDEAD_gv_dS_InteractableCrates[lv_index])) {
            return true;
        }
        else {
            break;
        }
    }
    return false;
}

bool libDEAD_gf_ObjectisEnabled (unit lp_object) {
    // Automatic Variable Declarations
    fixed auto89496D66_val;

    // Implementation
    auto89496D66_val = UnitGetCustomValue(lp_object, 0);
    if (auto89496D66_val == 1.0) {
        return true;
    }
    else if (auto89496D66_val == 0.0) {
        return false;
    }
    else {
        return false;
    }
}

bool libDEAD_gf_ObjectisUnlocked (unit lp_object) {
    // Automatic Variable Declarations
    fixed auto4BEC8298_val;

    // Implementation
    auto4BEC8298_val = UnitGetCustomValue(lp_object, 3);
    if (auto4BEC8298_val == 1.0) {
        return true;
    }
    else if (auto4BEC8298_val == 0.0) {
        return false;
    }
    else {
        return false;
    }
}

bool libDEAD_gf_ObjectisPreplaced (unit lp_object) {
    // Automatic Variable Declarations
    fixed auto41641CFB_val;

    // Implementation
    auto41641CFB_val = UnitGetCustomValue(lp_object, 5);
    if (auto41641CFB_val == 1.0) {
        return true;
    }
    else if (auto41641CFB_val == 0.0) {
        return false;
    }
    else {
        return false;
    }
}

fixed libDEAD_gf_ReturnObjectUseTime (unit lp_object) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGetCustomValue(lp_object, 2);
}

bool libDEAD_gf_CrateIsEmpty (unit lp_object) {
    // Variable Declarations
    int lv_index;
    int lv_crateIter;

    // Automatic Variable Declarations
    const int auto4851C011_ae = 6;
    const int auto4851C011_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto4851C011_ai >= 0 && lv_index <= auto4851C011_ae) || (auto4851C011_ai < 0 && lv_index >= auto4851C011_ae) ) ; lv_index += auto4851C011_ai ) {
        if ((libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_object)][lv_index] != null)) {
            lv_crateIter += 1;
        }

    }
    if ((lv_crateIter == 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libDEAD_gf_EnableDisableObject (bool lp_enableDisable, unit lp_object) {
    // Automatic Variable Declarations
    bool auto5D57702D_val;

    // Implementation
    if ((lp_object == null)) {
        return ;
    }
    auto5D57702D_val = lp_enableDisable;
    if (auto5D57702D_val == true) {
        UnitSetCustomValue(lp_object, 0, 1.0);
    }
    else if (auto5D57702D_val == false) {
        UnitSetCustomValue(lp_object, 0, 0.0);
        libNtve_gf_SendActorMessageToUnit(lp_object, "HaloStop");
    }
    else {
    }
}

trigger auto_libDEAD_gf_UseGateObject_Trigger = null;
int auto_libDEAD_gf_UseGateObject_lp_player;
unit auto_libDEAD_gf_UseGateObject_lp_playerUnit;
unit auto_libDEAD_gf_UseGateObject_lp_object;
bool auto_libDEAD_gf_UseGateObject_lp_enableDisable;

void libDEAD_gf_UseGateObject (int lp_player, unit lp_playerUnit, unit lp_object, bool lp_enableDisable) {
    auto_libDEAD_gf_UseGateObject_lp_player = lp_player;
    auto_libDEAD_gf_UseGateObject_lp_playerUnit = lp_playerUnit;
    auto_libDEAD_gf_UseGateObject_lp_object = lp_object;
    auto_libDEAD_gf_UseGateObject_lp_enableDisable = lp_enableDisable;

    if (auto_libDEAD_gf_UseGateObject_Trigger == null) {
        auto_libDEAD_gf_UseGateObject_Trigger = TriggerCreate("auto_libDEAD_gf_UseGateObject_TriggerFunc");
    }

    TriggerExecute(auto_libDEAD_gf_UseGateObject_Trigger, false, false);
}

bool auto_libDEAD_gf_UseGateObject_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libDEAD_gf_UseGateObject_lp_player;
    unit lp_playerUnit = auto_libDEAD_gf_UseGateObject_lp_playerUnit;
    unit lp_object = auto_libDEAD_gf_UseGateObject_lp_object;
    bool lp_enableDisable = auto_libDEAD_gf_UseGateObject_lp_enableDisable;

    // Variable Declarations
    point lv_usePoint;

    // Automatic Variable Declarations
    bool autoBBA541B3_val;

    // Variable Initialization

    // Implementation
    libDEAD_gf_EnableDisableObject(false, lp_object);
    autoBBA541B3_val = lp_enableDisable;
    if (autoBBA541B3_val == true) {
        libDEAD_gf_EnableDisableObject(true, lp_object);
    }
    else if (autoBBA541B3_val == false) {
        libDEAD_gf_EnableDisableObject(false, lp_object);
    }
    else {
    }
    libNtve_gf_MakeUnitFacePoint(libDEAD_gv_playerUnit[lp_player], UnitGetPosition(lp_object), 0.2);
    Wait(0.75, c_timeGame);
    return true;
}

void libDEAD_gf_ObjectInRange (int lp_player, unit lp_playerUnit, unit lp_object, bool lp_trueFalse, trigger lp_trigger) {
    // Variable Declarations
    point lv_usePoint;

    // Automatic Variable Declarations
    bool auto331C7870_val;

    // Variable Initialization

    // Implementation
    if ((UnitGetCustomValue(lp_object, 0) == 0.0)) {
        return ;
    }

    libNtve_gf_SendActorMessageToUnit(lp_object, "HaloSetColor 0,255,255");
    libDEAD_gv_dS_FocusedUseTrigger[lp_player] = lp_trigger;
    auto331C7870_val = lp_trueFalse;
    if (auto331C7870_val == true) {
        TriggerEnable(lp_trigger, true);
        libNtve_gf_SendActorMessageToUnit(lp_object, "HaloStart");
    }
    else if (auto331C7870_val == false) {
        TriggerEnable(lp_trigger, false);
        libNtve_gf_SendActorMessageToUnit(lp_object, "HaloStop");
    }
    else {
    }
}

void libDEAD_gf_ObjectInRangeGeneric (int lp_player, unit lp_playerUnit, unit lp_object, bool lp_trueFalse) {
    // Variable Declarations
    point lv_usePoint;

    // Automatic Variable Declarations
    bool auto72F70630_val;
    int auto6E35BD4A_val;
    int auto5A465C90_val;

    // Variable Initialization

    // Implementation
    if ((UnitGetCustomValue(lp_object, 0) == 0.0)) {
        return ;
    }

    libNtve_gf_SendActorMessageToUnit(lp_object, "HaloSetColor 0,255,255");
    auto72F70630_val = lp_trueFalse;
    if (auto72F70630_val == true) {
        libDEAD_gf_ShowHideInteractPrompt(libDEAD_ge_InteractType_Loot, true, lp_player);
        libDEAD_gv_dS_CrateinUse[lp_player] = true;
        libDEAD_gv_dS_ClosestCrate[lp_player] = lp_object;
        DialogControlSetAnimationState(libDEAD_gv_dS_Inventory[lp_player].lv_lootPanel, PlayerGroupAll(), "ContainerSize", (IntToString(libDEAD_gf_ReturnCrateSize(libDEAD_gf_ReturnCrateIndex(libDEAD_gv_dS_ClosestCrate[lp_player]))) + "Size"));
        auto6E35BD4A_val = lp_player;
        if (auto6E35BD4A_val == 1) {
            TriggerEnable(libDEAD_gt_DS_Crate_GenericUseP1, true);
        }
        else if (auto6E35BD4A_val == 2) {
            TriggerEnable(libDEAD_gt_DS_Crate_GenericUseP2, true);
        }
        else if (auto6E35BD4A_val == 3) {
        }
        else {
        }
        libNtve_gf_SendActorMessageToUnit(lp_object, "HaloStart");
    }
    else if (auto72F70630_val == false) {
        libDEAD_gf_ShowHideInteractPrompt(libDEAD_ge_InteractType_Loot, false, lp_player);
        auto5A465C90_val = lp_player;
        if (auto5A465C90_val == 1) {
            TriggerEnable(libDEAD_gt_DS_Crate_GenericUseP1, false);
        }
        else if (auto5A465C90_val == 2) {
            TriggerEnable(libDEAD_gt_DS_Crate_GenericUseP2, false);
        }
        else if (auto5A465C90_val == 3) {
        }
        else {
        }
        libDEAD_gv_dS_CrateinUse[lp_player] = false;
        libDEAD_gv_dS_ClosestCrate[lp_player] = null;
        libNtve_gf_SendActorMessageToUnit(lp_object, "HaloStop");
    }
    else {
    }
}

void libDEAD_gf_CreateConsoleObject (point lp_location, fixed lp_angle, int lp_type, bool lp_active, string lp_model, int lp_variation, fixed lp_scale, fixed lp_useTime) {
    // Variable Declarations
    unit lv_object;

    // Automatic Variable Declarations
    bool auto1F078567_val;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "InvisibleTargetDummyStructure", c_unitCreateIgnorePlacement, 0, lp_location, lp_angle);
    lv_object = UnitLastCreated();
    libDEAD_gv_dS_ActiveControls += 1;
    libDEAD_gv_dS_InteractableControls[libDEAD_gv_dS_ActiveControls] = UnitLastCreated();
    UnitSetScale(lv_object, lp_scale, lp_scale, lp_scale);
    ActorSend(libNtve_gf_MainActorofUnit(lv_object), libNtve_gf_ModelSwap(lp_model, lp_variation));
    libNtve_gf_SendActorMessageToUnit(lv_object, "HaloSetColor 115,198,204");
    UnitSetCustomValue(lv_object, 0, IntToFixed((lp_type)));
    auto1F078567_val = lp_active;
    if (auto1F078567_val == true) {
        UnitSetCustomValue(lv_object, 0, 1.0);
    }
    else if (auto1F078567_val == false) {
        UnitSetCustomValue(lv_object, 0, 0.0);
    }
    else {
    }
    UnitSetCustomValue(lv_object, 1, IntToFixed((lp_type)));
    UnitSetState(lv_object, c_unitStateCursorable, false);
    UnitSetState(lv_object, c_unitStateHighlightable, false);
    UnitSetState(lv_object, c_unitStateSelectable, false);
    UnitSetState(lv_object, c_unitStateTargetable, false);
    UnitSetCustomValue(lv_object, 2, lp_useTime);
    UnitSetCustomValue(lv_object, 4, FixedToInt(libDEAD_gv_dS_ActiveControls));
}

void libDEAD_gf_CreateLootObject (string lp_name, trigger lp_triggerEnter, trigger lp_triggerExit, point lp_location, fixed lp_angle, bool lp_active, string lp_model, int lp_variation, fixed lp_scale, fixed lp_useTime, int lp_size, bool lp_locked, string lp_unlockItem) {
    // Variable Declarations
    unit lv_crate;

    // Automatic Variable Declarations
    bool auto5C3226E2_val;
    bool auto1BB09C15_val;

    // Variable Initialization

    // Deprecated
    libDEAD_gv_dS_CrateLockItem[libDEAD_gv_dS_ActiveCrates] = lp_unlockItem;
}

void libDEAD_gf_CreateLootGenericObject (string lp_name, point lp_location, fixed lp_angle, bool lp_active, string lp_model, int lp_variation, fixed lp_scale, fixed lp_useTime, int lp_size, bool lp_locked, string lp_unlockItem, bool lp_preplaced) {
    // Variable Declarations
    int lv_availableSlot;
    int lv_index;
    unit lv_crate;

    // Automatic Variable Declarations
    const int auto8FBB07D8_ae = 200;
    const int auto8FBB07D8_ai = 1;
    bool autoABB569DA_val;
    bool auto2AB2FCCB_val;
    bool auto9CA8CE04_val;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto8FBB07D8_ai >= 0 && lv_index <= auto8FBB07D8_ae) || (auto8FBB07D8_ai < 0 && lv_index >= auto8FBB07D8_ae) ) ; lv_index += auto8FBB07D8_ai ) {
        if ((libDEAD_gv_dS_InteractableCrates[lv_index] == null)) {
            lv_availableSlot = lv_index;
            break;
        }
    }
    UnitCreate(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, 0, lp_location, lp_angle);
    lv_crate = UnitLastCreated();
    libDEAD_gv_dS_InteractableCrates[lv_availableSlot] = UnitLastCreated();
    libDEAD_gv_dS_CrateSize[lv_availableSlot] = lp_size;
    UnitSetScale(lv_crate, lp_scale, lp_scale, lp_scale);
    ActorSend(libNtve_gf_MainActorofUnit(lv_crate), libNtve_gf_ModelSwap(lp_model, lp_variation));
    libNtve_gf_SendActorMessageToUnit(lv_crate, "HaloSetColor 115,198,204");
    autoABB569DA_val = lp_active;
    if (autoABB569DA_val == true) {
        UnitSetCustomValue(lv_crate, 0, 1.0);
    }
    else if (autoABB569DA_val == false) {
        UnitSetCustomValue(lv_crate, 0, 0.0);
    }
    else {
    }
    UnitSetCustomValue(lv_crate, 1, 2.0);
    UnitSetState(lv_crate, c_unitStateCursorable, false);
    UnitSetState(lv_crate, c_unitStateHighlightable, false);
    UnitSetState(lv_crate, c_unitStateSelectable, false);
    UnitSetState(lv_crate, c_unitStateTargetable, false);
    UnitSetCustomValue(lv_crate, 2, lp_useTime);
    auto2AB2FCCB_val = lp_locked;
    if (auto2AB2FCCB_val == true) {
        UnitSetCustomValue(lv_crate, 3, 1.0);
    }
    else if (auto2AB2FCCB_val == false) {
        UnitSetCustomValue(lv_crate, 3, 0.0);
    }
    else {
    }
    UnitSetCustomValue(lv_crate, 4, FixedToInt(lv_availableSlot));
    auto9CA8CE04_val = lp_preplaced;
    if (auto9CA8CE04_val == true) {
        UnitSetCustomValue(lv_crate, 5, 1.0);
    }
    else if (auto9CA8CE04_val == false) {
        UnitSetCustomValue(lv_crate, 5, 0.0);
    }
    else {
    }
    libDEAD_gv_dS_CrateLockItem[lv_availableSlot] = lp_unlockItem;
}

void libDEAD_gf_DestroyLootObject (unit lp_unit) {
    // Variable Declarations
    int lv_crateIndex;
    int lv_index;

    // Automatic Variable Declarations
    const int auto1565CAF5_ae = 18;
    const int auto1565CAF5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_crateIndex = libDEAD_gf_ReturnCrateIndex(lp_unit);
    UnitKill(lp_unit);
    libDEAD_gv_dS_CrateSize[lv_crateIndex] = 0;
    lv_index = 1;
    for ( ; ( (auto1565CAF5_ai >= 0 && lv_index <= auto1565CAF5_ae) || (auto1565CAF5_ai < 0 && lv_index >= auto1565CAF5_ae) ) ; lv_index += auto1565CAF5_ai ) {
        libDEAD_gv_dS_CrateLoot[lv_crateIndex][lv_index] = null;
    }
    libDEAD_gv_dS_InteractableCrates[lv_crateIndex] = null;
}

void libDEAD_gf_AddLootItemtoCrate (string lp_item, unit lp_crate, int lp_amount) {
    // Variable Declarations
    int lv_i;
    int lv_emptySlotIndex;

    // Automatic Variable Declarations
    int auto5968CED4_ae;
    const int auto5968CED4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitGetCustomValue(lp_crate, 2) == 2.0)) {
        return ;
    }

    auto5968CED4_ae = libDEAD_gv_dS_CrateSize[libDEAD_gf_ReturnCrateIndex(lp_crate)];
    lv_i = 1;
    for ( ; ( (auto5968CED4_ai >= 0 && lv_i <= auto5968CED4_ae) || (auto5968CED4_ai < 0 && lv_i >= auto5968CED4_ae) ) ; lv_i += auto5968CED4_ai ) {
        if ((libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_i] == null)) {
            lv_emptySlotIndex = lv_i;
            break;
        }

    }
    if ((lv_emptySlotIndex == 0)) {
        return ;
    }

    libDEAD_gv_dS_CrateLoot[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_emptySlotIndex] = lp_item;
    libDEAD_gv_dS_LootAmount[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_emptySlotIndex] = lp_amount;
    libDEAD_gv_dS_LootDurability[libDEAD_gf_ReturnCrateIndex(lp_crate)][lv_emptySlotIndex] = libDEAD_gf_ReturnItemPropertyMaxDurability(lp_item);
}

void libDEAD_gf_AddRandomLoottoCrate (unit lp_crate, int lp_type) {
    // Variable Declarations
    int lv_lootRandomizer;
    string[7] lv_loot;
    int[7] lv_lootAmount;
    string lv_table;
    int lv_crateSize;
    int lv_sizeRoll;
    int lv_rarityRoll;
    int lv_tier;
    int lv_tableSize;
    int lv_index;

    // Automatic Variable Declarations
    int autoE438E01D_val;
    const int auto758C0ED9_ae = 50;
    const int auto758C0ED9_ai = 1;
    int autoFDCA1FC0_ae;
    const int autoFDCA1FC0_ai = 1;

    // Variable Initialization
    lv_table = "T1Generic";
    lv_tier = libDEAD_ge_CrateTier_Common;

    // Implementation
    lv_rarityRoll = RandomInt(1, 100);
    if ((lv_rarityRoll >= 96)) {
        lv_tier = libDEAD_ge_CrateTier_Legendary;
    }
    else if (((lv_rarityRoll >= 86) && (lv_rarityRoll <= 95))) {
        lv_tier = libDEAD_ge_CrateTier_Epic;
    }
    else if (((lv_rarityRoll >= 71) && (lv_rarityRoll <= 85))) {
        lv_tier = libDEAD_ge_CrateTier_Rare;
    }
    else if (((lv_rarityRoll >= 46) && (lv_rarityRoll <= 70))) {
        lv_tier = libDEAD_ge_CrateTier_Uncommon;
    }
    else if (((lv_rarityRoll >= 1) && (lv_rarityRoll <= 45))) {
        lv_tier = libDEAD_ge_CrateTier_Common;
    }
    if ((lp_type == libDEAD_ge_CrateType_Generic)) {
        autoE438E01D_val = lv_tier;
        {
            lv_table = "T1Generic";
        }
    }
    lv_index = 1;
    for ( ; ( (auto758C0ED9_ai >= 0 && lv_index <= auto758C0ED9_ae) || (auto758C0ED9_ai < 0 && lv_index >= auto758C0ED9_ae) ) ; lv_index += auto758C0ED9_ai ) {
        if ((UserDataGetUserInstance("LootTables", lv_table, "Items", lv_index) != null)) {
            lv_tableSize += 1;
        }
        else {
            break;
        }
    }
    lv_crateSize = libDEAD_gf_ReturnCrateSize(libDEAD_gf_ReturnCrateIndex(lp_crate));
    lv_sizeRoll = RandomInt(1, lv_crateSize);
    if ((lv_crateSize == 1)) {
        lv_lootRandomizer = RandomInt(0, lv_tableSize);
        lv_loot[1] = UserDataGetUserInstance("LootTables", lv_table, "Items", lv_lootRandomizer);
        lv_lootAmount[1] = lv_lootRandomizer;
        libDEAD_gf_AddLootItemtoCrate(lv_loot[1], lp_crate, lv_lootAmount[1]);
    }
    else {
        autoFDCA1FC0_ae = lv_sizeRoll;
        lv_index = 1;
        for ( ; ( (autoFDCA1FC0_ai >= 0 && lv_index <= autoFDCA1FC0_ae) || (autoFDCA1FC0_ai < 0 && lv_index >= autoFDCA1FC0_ae) ) ; lv_index += autoFDCA1FC0_ai ) {
            lv_lootRandomizer = RandomInt(0, lv_tableSize);
            lv_loot[lv_index] = UserDataGetUserInstance("LootTables", lv_table, "Items", lv_lootRandomizer);
            lv_lootAmount[lv_index] = lv_lootRandomizer;
            libDEAD_gf_AddLootItemtoCrate(lv_loot[lv_index], lp_crate, lv_lootAmount[lv_index]);
        }
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: DS_DiscoverRecipe
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_DiscoverRecipe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_DiscoverRecipe("Gunpowder", EventPlayer());
    libDEAD_gf_DiscoverRecipe("Pistol Ammo", EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_DiscoverRecipe_Init () {
    libDEAD_gt_DS_DiscoverRecipe = TriggerCreate("libDEAD_gt_DS_DiscoverRecipe_Func");
    TriggerAddEventChatMessage(libDEAD_gt_DS_DiscoverRecipe, c_playerAny, "Recipe", true);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_DiscoverRecipe, c_playerAny, c_keyP, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_CheckItems
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_CheckItems_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ECL_ITEM_add(EventPlayer(), "Speed Augment", 1, true);
    libDEAD_gf_ECL_ITEM_add(EventPlayer(), "Vision Helmet", 1, true);
    libDEAD_gf_ECL_ITEM_add(EventPlayer(), "Crappy Pack", 1, true);
    libDEAD_gf_ECL_ITEM_add(EventPlayer(), "Slugger", 1, true);
    libDEAD_gf_ECL_ITEM_add(EventPlayer(), "CPG11", 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_CheckItems_Init () {
    libDEAD_gt_DS_CheckItems = TriggerCreate("libDEAD_gt_DS_CheckItems_Func");
    TriggerAddEventChatMessage(libDEAD_gt_DS_CheckItems, c_playerAny, "chk", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_Unlock
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_Unlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_LockUnlockInventorySlot(EventPlayer(), false, 8);
    libDEAD_gf_LockUnlockInventorySlot(EventPlayer(), false, 20);
    libDEAD_gf_LockUnlockInventorySlot(EventPlayer(), false, 9);
    libDEAD_gf_LockUnlockInventorySlot(EventPlayer(), false, 7);
    libDEAD_gf_LockUnlockInventorySlot(EventPlayer(), false, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_Unlock_Init () {
    libDEAD_gt_DS_Unlock = TriggerCreate("libDEAD_gt_DS_Unlock_Func");
    TriggerAddEventChatMessage(libDEAD_gt_DS_Unlock, c_playerAny, "equip", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_HealthIncrease
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_HealthIncrease_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_DivideHealthToLimbs(EventPlayer(), 150);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_HealthIncrease_Init () {
    libDEAD_gt_DS_HealthIncrease = TriggerCreate("libDEAD_gt_DS_HealthIncrease_Func");
    TriggerAddEventChatMessage(libDEAD_gt_DS_HealthIncrease, c_playerAny, "incr", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ConfirmYesP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ConfirmYesP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD58B1E73_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Confirmation[EventPlayer()].lv_confirmButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libDEAD_gt_DS_ConfirmYesP1, false);
    TriggerEnable(libDEAD_gt_DS_ConfirmNoP1, false);
    autoD58B1E73_val = libDEAD_gv_dS_ConfirmType[EventPlayer()];
    if (autoD58B1E73_val == libDEAD_ge_ConfirmType_Discard) {
        libDEAD_gf_DiscardItem(EventPlayer());
        libDEAD_gf_ShowHideConfirmationWindow(EventPlayer(), false, libDEAD_ge_ConfirmType_None);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ConfirmYesP1_Init () {
    libDEAD_gt_DS_ConfirmYesP1 = TriggerCreate("libDEAD_gt_DS_ConfirmYesP1_Func");
    TriggerEnable(libDEAD_gt_DS_ConfirmYesP1, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ConfirmYesP1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ConfirmNoP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ConfirmNoP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Confirmation[EventPlayer()].lv_cancelButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libDEAD_gt_DS_ConfirmYesP1, false);
    TriggerEnable(libDEAD_gt_DS_ConfirmNoP1, false);
    libDEAD_gf_ShowHideConfirmationWindow(EventPlayer(), false, libDEAD_ge_ConfirmType_None);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ConfirmNoP1_Init () {
    libDEAD_gt_DS_ConfirmNoP1 = TriggerCreate("libDEAD_gt_DS_ConfirmNoP1_Func");
    TriggerEnable(libDEAD_gt_DS_ConfirmNoP1, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ConfirmNoP1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ConfirmYesP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ConfirmYesP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_triggeringPlayer = 2;

    // Automatic Variable Declarations
    int auto4FDBFE9F_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Confirmation[EventPlayer()].lv_confirmButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libDEAD_gt_DS_ConfirmYesP2, false);
    TriggerEnable(libDEAD_gt_DS_ConfirmNoP2, false);
    auto4FDBFE9F_val = libDEAD_gv_dS_ConfirmType[EventPlayer()];
    if (auto4FDBFE9F_val == libDEAD_ge_ConfirmType_Discard) {
        libDEAD_gf_DiscardItem(lv_triggeringPlayer);
        libDEAD_gf_ShowHideConfirmationWindow(lv_triggeringPlayer, false, libDEAD_ge_ConfirmType_None);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ConfirmYesP2_Init () {
    libDEAD_gt_DS_ConfirmYesP2 = TriggerCreate("libDEAD_gt_DS_ConfirmYesP2_Func");
    TriggerEnable(libDEAD_gt_DS_ConfirmYesP2, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ConfirmYesP2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ConfirmNoP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ConfirmNoP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_triggeringPlayer = 2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Confirmation[EventPlayer()].lv_cancelButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libDEAD_gt_DS_ConfirmYesP2, false);
    TriggerEnable(libDEAD_gt_DS_ConfirmNoP2, false);
    libDEAD_gf_ShowHideConfirmationWindow(lv_triggeringPlayer, false, libDEAD_ge_ConfirmType_None);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ConfirmNoP2_Init () {
    libDEAD_gt_DS_ConfirmNoP2 = TriggerCreate("libDEAD_gt_DS_ConfirmNoP2_Func");
    TriggerEnable(libDEAD_gt_DS_ConfirmNoP2, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ConfirmNoP2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ExamineCloseBackgroundP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ExamineCloseBackgroundP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inspect[EventPlayer()].lv_backgroundButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libDEAD_gt_DS_ExamineCloseEscP1, false);
    libDEAD_gf_ShowHideInspectWindow(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ExamineCloseBackgroundP1_Init () {
    libDEAD_gt_DS_ExamineCloseBackgroundP1 = TriggerCreate("libDEAD_gt_DS_ExamineCloseBackgroundP1_Func");
    TriggerEnable(libDEAD_gt_DS_ExamineCloseBackgroundP1, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ExamineCloseBackgroundP1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ExamineCloseEscP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ExamineCloseEscP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libDEAD_gt_DS_ExamineCloseBackgroundP1, false);
    libDEAD_gf_ShowHideInspectWindow(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ExamineCloseEscP1_Init () {
    libDEAD_gt_DS_ExamineCloseEscP1 = TriggerCreate("libDEAD_gt_DS_ExamineCloseEscP1_Func");
    TriggerEnable(libDEAD_gt_DS_ExamineCloseEscP1, false);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_ExamineCloseEscP1, 1, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ExamineCloseBackgroundP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ExamineCloseBackgroundP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inspect[EventPlayer()].lv_backgroundButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libDEAD_gt_DS_ExamineCloseEscP2, false);
    libDEAD_gf_ShowHideInspectWindow(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ExamineCloseBackgroundP2_Init () {
    libDEAD_gt_DS_ExamineCloseBackgroundP2 = TriggerCreate("libDEAD_gt_DS_ExamineCloseBackgroundP2_Func");
    TriggerEnable(libDEAD_gt_DS_ExamineCloseBackgroundP2, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ExamineCloseBackgroundP2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ExamineCloseEscP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ExamineCloseEscP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libDEAD_gt_DS_ExamineCloseBackgroundP2, false);
    libDEAD_gf_ShowHideInspectWindow(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ExamineCloseEscP2_Init () {
    libDEAD_gt_DS_ExamineCloseEscP2 = TriggerCreate("libDEAD_gt_DS_ExamineCloseEscP2_Func");
    TriggerEnable(libDEAD_gt_DS_ExamineCloseEscP2, false);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_ExamineCloseEscP2, 2, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KL_SwapWeaponTest
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_KL_SwapWeaponTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_weaponInstance;

    // Automatic Variable Declarations
    int auto312309F6_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == 1) || (EventPlayer() == 2) || (EventPlayer() == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto312309F6_val = EventKeyPressed();
    if (auto312309F6_val == c_key1) {
        libDEAD_gf_KL_SwapToWeapon(EventPlayer(), 1);
    }
    else if (auto312309F6_val == c_key2) {
        libDEAD_gf_KL_SwapToWeapon(EventPlayer(), 2);
    }
    else if (auto312309F6_val == c_key3) {
        libDEAD_gf_KL_SwapToWeapon(EventPlayer(), 3);
    }
    else if (auto312309F6_val == c_key4) {
        libDEAD_gf_KL_SwapToWeapon(EventPlayer(), 4);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_KL_SwapWeaponTest_Init () {
    libDEAD_gt_KL_SwapWeaponTest = TriggerCreate("libDEAD_gt_KL_SwapWeaponTest_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_KL_SwapWeaponTest, c_playerAny, c_key1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libDEAD_gt_KL_SwapWeaponTest, c_playerAny, c_key2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libDEAD_gt_KL_SwapWeaponTest, c_playerAny, c_key3, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libDEAD_gt_KL_SwapWeaponTest, c_playerAny, c_key4, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL__HOOK UP INVENTORY FRAMES
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL__HOOKUPINVENTORYFRAMES_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gameUI;
    int lv_maxitems_row;
    int lv_item_width;
    int lv_item_height;
    int lv_row;
    int lv_column;

    // Automatic Variable Declarations
    playergroup auto922C8A78_g;
    int auto922C8A78_var;
    const int autoBB74557B_ae = libDEAD_gv_eCL__maxslots;
    int autoBB74557B_var;
    int auto61EF6D0C_val;
    int auto2CB24F12_val;

    // Variable Initialization
    lv_gameUI = c_invalidDialogControlId;
    lv_maxitems_row = 9;
    lv_item_width = 80;
    lv_item_height = 80;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DSGameUI");
    lv_gameUI = DialogControlLastCreated();
    auto922C8A78_g = PlayerGroupActive();
    auto922C8A78_var = -1;
    while (true) {
        auto922C8A78_var = PlayerGroupNextPlayer(auto922C8A78_g, auto922C8A78_var);
        if (auto922C8A78_var < 0) { break; }
        DialogControlHookup(lv_gameUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("InventoryPanel"));
        libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("Dropzone"));
        libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__DROPZONE = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Paperdoll/DamageHead"));
        libDEAD_gv_dS_Character[auto922C8A78_var].lv_headPanel = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Paperdoll/DamageTorso"));
        libDEAD_gv_dS_Character[auto922C8A78_var].lv_torsoPanel = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypeImage, libNtve_gf_ConvertStringToUILayoutFrameName("Paperdoll/DamageLegs"));
        libDEAD_gv_dS_Character[auto922C8A78_var].lv_legsPanel = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("HeadStatus/StatusBar/ProgressBar"));
        libDEAD_gv_dS_Character[auto922C8A78_var].lv_headBar = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("TorsoStatus/StatusBar/ProgressBar"));
        libDEAD_gv_dS_Character[auto922C8A78_var].lv_torsoBar = DialogControlLastCreated();
        DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypeProgressBar, libNtve_gf_ConvertStringToUILayoutFrameName("LegsStatus/StatusBar/ProgressBar"));
        libDEAD_gv_dS_Character[auto922C8A78_var].lv_legsBar = DialogControlLastCreated();
        libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_iNV_slots = (libDEAD_gv_eCL__equipmentslots + libDEAD_gv_baseInventory);
        autoBB74557B_var = 1;
        for ( ; autoBB74557B_var <= autoBB74557B_ae; autoBB74557B_var += 1 ) {
            if ((autoBB74557B_var > libDEAD_gv_eCL__equipmentslots)) {
                DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Slot" + IntToString((autoBB74557B_var - libDEAD_gv_eCL__equipmentslots)))));
                libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "All";
            }
            else {
                auto61EF6D0C_val = autoBB74557B_var;
                if (auto61EF6D0C_val == 1) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("HeadEquipment"));
                    libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "Head";
                }
                else if (auto61EF6D0C_val == 2) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BodyEquipment"));
                    libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "Suit";
                }
                else if (auto61EF6D0C_val == 3) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BootsEquipment"));
                    libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "Boots";
                }
                else if (auto61EF6D0C_val == 4) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BackEquipment"));
                    libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "Pack";
                }
                else if (auto61EF6D0C_val == 5) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("AugmentEquipment"));
                    libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "Augment";
                }
                else if (auto61EF6D0C_val == 6) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("WeaponEquipment1"));
                    libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "Weapon";
                }
                else if (auto61EF6D0C_val == 7) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("WeaponEquipment2"));
                    libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "Weapon";
                }
                else if (auto61EF6D0C_val == 8) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("WeaponEquipment3"));
                    libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "Weapon";
                }
                else if (auto61EF6D0C_val == 9) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("WeaponEquipment4"));
                    libDEAD_gv_dS_InventorySlot_Category[autoBB74557B_var][auto922C8A78_var] = "Weapon";
                }
                else {
                }
            }
            libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT[autoBB74557B_var] = DialogControlLastCreated();
            if ((autoBB74557B_var > libDEAD_gv_eCL__equipmentslots)) {
                DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("BG_" + IntToString((autoBB74557B_var - libDEAD_gv_eCL__equipmentslots)))));
                libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                if (((libDEAD_gv_eCL__equipmentslots + libDEAD_gv_baseInventory) < autoBB74557B_var)) {
                    libDEAD_gf_ECL_SLOT_lock_unlock(auto922C8A78_var, autoBB74557B_var, true);
                }

            }
            else {
                auto2CB24F12_val = autoBB74557B_var;
                if (auto2CB24F12_val == 1) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BG_HEAD"));
                    libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                }
                else if (auto2CB24F12_val == 2) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BG_BODY"));
                    libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                }
                else if (auto2CB24F12_val == 3) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BG_BOOTS"));
                    libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                }
                else if (auto2CB24F12_val == 4) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BG_BACK"));
                    libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                }
                else if (auto2CB24F12_val == 5) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BG_AUG"));
                    libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                }
                else if (auto2CB24F12_val == 6) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BG_WEAPON1"));
                    libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                }
                else if (auto2CB24F12_val == 7) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BG_WEAPON2"));
                    libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                }
                else if (auto2CB24F12_val == 8) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BG_WEAPON3"));
                    libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                    libDEAD_gf_ECL_SLOT_lock_unlock(auto922C8A78_var, autoBB74557B_var, true);
                }
                else if (auto2CB24F12_val == 9) {
                    DialogControlHookup(libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv__INV, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName("BG_WEAPON4"));
                    libDEAD_gv_eCL__Inventory[auto922C8A78_var].lv_sLOT_bg[autoBB74557B_var] = DialogControlLastCreated();
                    libDEAD_gf_ECL_SLOT_lock_unlock(auto922C8A78_var, autoBB74557B_var, true);
                }
                else {
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL__HOOKUPINVENTORYFRAMES_Init () {
    libDEAD_gt_ECL__HOOKUPINVENTORYFRAMES = TriggerCreate("libDEAD_gt_ECL__HOOKUPINVENTORYFRAMES_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL__DRAG_ON_OFF
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL__DRAG_ON_OFF_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_drag;
    int lv_old_item_new_slot;
    int lv_olle_item_index;
    int lv_nEWSLOT;
    int lv_nEWITEM;
    unit lv_uNIT_item;
    int lv_d_quantity;

    // Automatic Variable Declarations
    int autoD1C13C2A_ae;
    int autoD1C13C2A_var;

    // Variable Initialization
    lv_drag = "NONE";

    // Conditions
    if (testConds) {
        if (!((libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sWAPPING == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_drag = libNtve_gf_DialogItemEditValue(EventDialogControl(), EventPlayer());
    autoD1C13C2A_ae = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_n_items;
    autoD1C13C2A_var = 1;
    for ( ; autoD1C13C2A_var <= autoD1C13C2A_ae; autoD1C13C2A_var += 1 ) {
        if ((EventDialogControl() == libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_state_box[autoD1C13C2A_var])) {
            if ((lv_drag == "On")) {
                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_item = autoD1C13C2A_var;
                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[autoD1C13C2A_var];
                DialogControlSendAnimationEvent(libDEAD_gv_eCL__Inventory[EventPlayer()].lv__INV, PlayerGroupSingle(EventPlayer()), (libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_item][EventPlayer()]) + "On"));
            }
            else if ((lv_drag == "Off")) {
                DialogControlSendAnimationEvent(libDEAD_gv_eCL__Inventory[EventPlayer()].lv__INV, PlayerGroupSingle(EventPlayer()), (libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_item][EventPlayer()]) + "Off"));
                if ((libDEAD_gv_eCL__Inventory[EventPlayer()].lv_drop_to_ground == false)) {
                    if ((libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot] == 0)) {
                        DialogControlSetPositionRelative(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_anchor[autoD1C13C2A_var], PlayerGroupSingle(EventPlayer()), c_anchorCenter, libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot], c_anchorCenter, 0, 0);
                        libDEAD_gf_ECL__EQUIP(EventPlayer(), libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[autoD1C13C2A_var], libDEAD_ge_EQUIPUNEQUIP_UNEQUIP);
                        libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[autoD1C13C2A_var]] = 0;
                        libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[autoD1C13C2A_var] = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot;
                        libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot] = autoD1C13C2A_var;
                        libDEAD_gf_ECL__EQUIP(EventPlayer(), libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[autoD1C13C2A_var], libDEAD_ge_EQUIPUNEQUIP_EQUIP);
                    }
                    else {
                        if ((libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot] != autoD1C13C2A_var)) {
                            if ((libDEAD_gv_dS_InventoryItem[autoD1C13C2A_var][EventPlayer()] == libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]][EventPlayer()]) && (libDEAD_gf_ReturnItemPropertyMaxAmount(libDEAD_gv_dS_InventoryItem[autoD1C13C2A_var][EventPlayer()]) > 1)) {
                                lv_d_quantity = libNtve_gf_ArithmeticIntClamp((libDEAD_gf_ReturnItemPropertyMaxAmount(libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]][EventPlayer()]) - libDEAD_gf_ReturnInventoryItemAmount(EventPlayer(), libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot])), 0, libDEAD_gf_ReturnInventoryItemAmount(EventPlayer(), autoD1C13C2A_var));
                                libDEAD_gv_dS_InventoryAmount[autoD1C13C2A_var][EventPlayer()] -= lv_d_quantity;
                                libDEAD_gv_dS_InventoryAmount[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]][EventPlayer()] += lv_d_quantity;
                                if ((libDEAD_gf_ReturnInventoryItemAmount(EventPlayer(), autoD1C13C2A_var) != 0)) {
                                    if ((libDEAD_gf_ReturnInventoryItemAmount(EventPlayer(), autoD1C13C2A_var) > 1)) {
                                        DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM[autoD1C13C2A_var], PlayerGroupAll(), "State", "Stack");
                                    }
                                    else {
                                        DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM[autoD1C13C2A_var], PlayerGroupAll(), "State", "SingleItem");
                                    }
                                    TextExpressionSetToken("Param/Expression/lib_DEAD_8A1D4A5A", "A", IntToText(libDEAD_gf_ReturnInventoryItemAmount(EventPlayer(), autoD1C13C2A_var)));
                                    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[EventPlayer()].lv_itemQuantity[autoD1C13C2A_var], TextExpressionAssemble("Param/Expression/lib_DEAD_8A1D4A5A"), PlayerGroupAll());
                                    DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM[autoD1C13C2A_var], PlayerGroupAll(), "ItemType", UserDataGetString("Items", libDEAD_gv_dS_InventoryItem[autoD1C13C2A_var][EventPlayer()], "Category", 1));
                                }
                                else {
                                    libDEAD_gf_ECL_ITEM_remove(EventPlayer(), autoD1C13C2A_var);
                                }
                                if ((libDEAD_gf_ReturnInventoryItemAmount(EventPlayer(), libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]) != 0)) {
                                    if ((libDEAD_gf_ReturnInventoryItemAmount(EventPlayer(), libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]) > 1)) {
                                        DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]], PlayerGroupAll(), "State", "Stack");
                                    }
                                    else {
                                        DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]], PlayerGroupAll(), "State", "SingleItem");
                                    }
                                    TextExpressionSetToken("Param/Expression/lib_DEAD_09E7FB92", "A", IntToText(libDEAD_gf_ReturnInventoryItemAmount(EventPlayer(), libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot])));
                                    libNtve_gf_SetDialogItemText(libDEAD_gv_dS_Inventory[EventPlayer()].lv_itemQuantity[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]], TextExpressionAssemble("Param/Expression/lib_DEAD_09E7FB92"), PlayerGroupAll());
                                    DialogControlSetAnimationState(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]], PlayerGroupAll(), "ItemType", UserDataGetString("Items", libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot]][EventPlayer()], "Category", 1));
                                }
                                else {
                                    libDEAD_gf_ECL_ITEM_remove(EventPlayer(), autoD1C13C2A_var);
                                }
                            }
                            else {
                                libDEAD_gf_ECL__EQUIP(EventPlayer(), libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot, libDEAD_ge_EQUIPUNEQUIP_UNEQUIP);
                                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sWAPPING = true;
                                lv_olle_item_index = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot];
                                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[autoD1C13C2A_var]] = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot];
                                lv_old_item_new_slot = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[autoD1C13C2A_var];
                                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[autoD1C13C2A_var] = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot;
                                lv_nEWSLOT = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot;
                                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot] = autoD1C13C2A_var;
                                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[lv_olle_item_index] = lv_old_item_new_slot;
                                lv_nEWITEM = autoD1C13C2A_var;
                                DialogControlSetPositionRelative(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_anchor[lv_olle_item_index], PlayerGroupSingle(EventPlayer()), c_anchorCenter, libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT[lv_old_item_new_slot], c_anchorCenter, 0, 0);
                                DialogControlSetPositionRelative(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_anchor[lv_nEWITEM], PlayerGroupSingle(EventPlayer()), c_anchorCenter, libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT[lv_nEWSLOT], c_anchorCenter, 0, 0);
                                libDEAD_gf_ECL__EQUIP(EventPlayer(), lv_nEWSLOT, libDEAD_ge_EQUIPUNEQUIP_EQUIP);
                                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sWAPPING = false;
                            }
                        }

                    }
                }
                else {
                    libDEAD_gf_ECL__EQUIP(EventPlayer(), libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[autoD1C13C2A_var], libDEAD_ge_EQUIPUNEQUIP_UNEQUIP);
                    libDEAD_gf_ECL_ITEM_drop_to_ground(EventPlayer(), libDEAD_gv_dS_InventoryItem[autoD1C13C2A_var][EventPlayer()], libDEAD_gv_dS_InventoryAmount[autoD1C13C2A_var][EventPlayer()], UnitGetPosition(libDEAD_gv_playerUnit[EventPlayer()]));
                    libDEAD_gf_ECL_ITEM_remove(EventPlayer(), autoD1C13C2A_var);
                }
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL__DRAG_ON_OFF_Init () {
    libDEAD_gt_ECL__DRAG_ON_OFF = TriggerCreate("libDEAD_gt_ECL__DRAG_ON_OFF_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL__SET NEW/OLD SLOT
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL__SETNEWOLDSLOT_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto90A4862D_ae;
    int auto90A4862D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto90A4862D_ae = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iNV_slots;
    auto90A4862D_var = 1;
    for ( ; auto90A4862D_var <= auto90A4862D_ae; auto90A4862D_var += 1 ) {
        if ((EventDialogControl() == libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT[auto90A4862D_var])) {
            if ((EventDialogControlEventType() == c_triggerControlEventTypeMouseEnter) && (libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_locked[auto90A4862D_var] == false) && ((libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_item][EventPlayer()]) == libDEAD_gv_dS_InventorySlot_Category[auto90A4862D_var][EventPlayer()]) || ((libDEAD_gv_dS_InventorySlot_Category[auto90A4862D_var][EventPlayer()] == "All") && ((libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_item][EventPlayer()]) == libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_InventoryItem[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[auto90A4862D_var]][EventPlayer()])) || (libDEAD_gv_dS_InventorySlot_Category[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_item]][EventPlayer()] == "All") || (libDEAD_gv_eCL__Inventory[EventPlayer()].lv_sLOT_item[auto90A4862D_var] == 0))))) {
                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot = auto90A4862D_var;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_DEAD_3ECAEBBB") + IntToText(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot)));
            }
            else {
                libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_slot[libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_item];
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_DEAD_E03768CE") + IntToText(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_curr_slot)));
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL__SETNEWOLDSLOT_Init () {
    libDEAD_gt_ECL__SETNEWOLDSLOT = TriggerCreate("libDEAD_gt_ECL__SETNEWOLDSLOT_Func");
    TriggerAddEventDialogControl(libDEAD_gt_ECL__SETNEWOLDSLOT, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libDEAD_gt_ECL__SETNEWOLDSLOT, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL__DROPZONE
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL__DROPZONE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libDEAD_gv_eCL__Inventory[EventPlayer()].lv__DROPZONE))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControlEventType() == c_triggerControlEventTypeMouseEnter)) {
        libDEAD_gv_eCL__Inventory[EventPlayer()].lv_drop_to_ground = true;
    }
    else {
        libDEAD_gv_eCL__Inventory[EventPlayer()].lv_drop_to_ground = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL__DROPZONE_Init () {
    libDEAD_gt_ECL__DROPZONE = TriggerCreate("libDEAD_gt_ECL__DROPZONE_Func");
    TriggerAddEventDialogControl(libDEAD_gt_ECL__DROPZONE, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libDEAD_gt_ECL__DROPZONE, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL__PICKUPLOOT
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL__PICKUPLOOT_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;
    int lv_itemAmount;
    int lv_itemDurability;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = FixedToInt(UnitGetCustomValue(EventUnit(), 6));
    lv_itemAmount = FixedToInt(UnitGetCustomValue(EventUnit(), 7));
    lv_itemDurability = FixedToInt(UnitGetCustomValue(EventUnit(), 8));
    libDEAD_gf_ECL_ITEM_add(EventPlayer(), UserDataInstance("Items", lv_itemIndex), lv_itemAmount, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL__PICKUPLOOT_Init () {
    libDEAD_gt_ECL__PICKUPLOOT = TriggerCreate("libDEAD_gt_ECL__PICKUPLOOT_Func");
    TriggerAddEventUnitAbility(libDEAD_gt_ECL__PICKUPLOOT, null, AbilityCommand("Sacrifice", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL__PICKUPLOOT_directly
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL__PICKUPLOOT_directly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PLootPermanent"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("Sacrifice", 0)), c_orderQueueReplace);
    libDEAD_gv_dS_disable_fire[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL__PICKUPLOOT_directly_Init () {
    libDEAD_gt_ECL__PICKUPLOOT_directly = TriggerCreate("libDEAD_gt_ECL__PICKUPLOOT_directly_Func");
    TriggerAddEventUnitClick(libDEAD_gt_ECL__PICKUPLOOT_directly, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL__PICKUPLOOT_highlight
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL__PICKUPLOOT_highlight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PLootPermanent"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gv_dS_disable_fire[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL__PICKUPLOOT_highlight_Init () {
    libDEAD_gt_ECL__PICKUPLOOT_highlight = TriggerCreate("libDEAD_gt_ECL__PICKUPLOOT_highlight_Func");
    TriggerAddEventUnitHighlight(libDEAD_gt_ECL__PICKUPLOOT_highlight, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL__PICKUPLOOT_unhighlight
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL__PICKUPLOOT_unhighlight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PLootPermanent"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gv_dS_disable_fire[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL__PICKUPLOOT_unhighlight_Init () {
    libDEAD_gt_ECL__PICKUPLOOT_unhighlight = TriggerCreate("libDEAD_gt_ECL__PICKUPLOOT_unhighlight_Func");
    TriggerAddEventUnitHighlight(libDEAD_gt_ECL__PICKUPLOOT_unhighlight, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ShowLootOnGround
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ShowLootOnGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2BC001BC_g;
    int auto2BC001BC_u;
    unit auto2BC001BC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gv_dS_ShowHideLoot[EventPlayer()] = true;
    auto2BC001BC_g = libDEAD_gv_dS_Loot[EventPlayer()];
    auto2BC001BC_u = UnitGroupCount(auto2BC001BC_g, c_unitCountAll);
    for (;; auto2BC001BC_u -= 1) {
        auto2BC001BC_var = UnitGroupUnitFromEnd(auto2BC001BC_g, auto2BC001BC_u);
        if (auto2BC001BC_var == null) { break; }
        UnitStatusBarOverride(auto2BC001BC_var, c_unitStatusGroupOwner);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ShowLootOnGround_Init () {
    libDEAD_gt_DS_ShowLootOnGround = TriggerCreate("libDEAD_gt_DS_ShowLootOnGround_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_ShowLootOnGround, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_HideLootOnGround
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_HideLootOnGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto53A7B4A6_g;
    int auto53A7B4A6_u;
    unit auto53A7B4A6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gv_dS_ShowHideLoot[EventPlayer()] = false;
    auto53A7B4A6_g = libDEAD_gv_dS_Loot[EventPlayer()];
    auto53A7B4A6_u = UnitGroupCount(auto53A7B4A6_g, c_unitCountAll);
    for (;; auto53A7B4A6_u -= 1) {
        auto53A7B4A6_var = UnitGroupUnitFromEnd(auto53A7B4A6_g, auto53A7B4A6_u);
        if (auto53A7B4A6_var == null) { break; }
        UnitStatusBarClearOverride(auto53A7B4A6_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_HideLootOnGround_Init () {
    libDEAD_gt_DS_HideLootOnGround = TriggerCreate("libDEAD_gt_DS_HideLootOnGround_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_HideLootOnGround, c_playerAny, c_keyTab, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL_catch_permanentloot
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL_catch_permanentloot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tableSize;
    int lv_amount;
    string lv_itemData;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetCustomValue(EventUnitCreatedUnit(), 6) <= 0.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "PLootPermanent"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tableSize = UserDataGetInt("LootTables", "Random", "TableSize", 1);
    lv_index = RandomInt(1, lv_tableSize);
    lv_itemData = UserDataGetUserInstance("LootTables", "Random", "Items", lv_index);
    lv_amount = RandomInt(1, UserDataGetInt("LootTables", "Random", "MaxAmount", lv_index));
    libDEAD_gf_ECL_GroundItemData(lv_amount, lv_itemData, EventUnitCreatedUnit());
    DialogControlHookupUnitStatus(c_triggerControlTypeCommandPanel, "CommandPanel", EventUnitCreatedUnit());
    libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(EventUnitCreatedUnit()), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ItemLabel", EventUnitCreatedUnit());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(libDEAD_gf_ReturnItemPropertyName(lv_itemData)), PlayerGroupAll());
    UnitGroupAdd(libDEAD_gv_dS_Loot[UnitGetOwner(EventUnitCreatedUnit())], EventUnitCreatedUnit());
    if ((libDEAD_gv_dS_ShowHideLoot[UnitGetOwner(EventUnitCreatedUnit())] == true)) {
        UnitStatusBarOverride(EventUnitCreatedUnit(), c_unitStatusGroupOwner);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL_catch_permanentloot_Init () {
    libDEAD_gt_ECL_catch_permanentloot = TriggerCreate("libDEAD_gt_ECL_catch_permanentloot_Func");
    TriggerAddEventUnitCreated(libDEAD_gt_ECL_catch_permanentloot, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL_FireNew
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL_FireNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_aDS;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libECLP_gv_eCL_UpDown[EventPlayer()] == false))) {
            return false;
        }

        if (!((UnitIsValid(libECLP_gv_eCL_Source[EventPlayer()]) == true))) {
            return false;
        }

        if (!((libDEAD_gv_dS_disable_fire[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libECLP_gv_eCL_UpDown[EventPlayer()] = true;
    libECLP_gv_eCL_SaveMouse_on_off[EventPlayer()] = true;
    if ((libDEAD_gv_activeWeaponInstance[EventPlayer()][libDEAD_gv_activeWeaponIndex[EventPlayer()]] != null)) {
        libDEAD_gf_DS_FireWeaponItem(EventPlayer(), libDEAD_gv_activeWeaponInstance[EventPlayer()][libDEAD_gv_activeWeaponIndex[EventPlayer()]]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL_FireNew_Init () {
    libDEAD_gt_ECL_FireNew = TriggerCreate("libDEAD_gt_ECL_FireNew_Func");
    TriggerAddEventMouseClicked(libDEAD_gt_ECL_FireNew, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECL__CONTEXTMENU_OnRightClick
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_ECL__CONTEXTMENU_OnRightClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoD89FC5A3_ae;
    int autoD89FC5A3_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControlMouseButton() == c_mouseButtonRight))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD89FC5A3_ae = libDEAD_gv_eCL__Inventory[EventPlayer()].lv_n_items;
    autoD89FC5A3_var = 1;
    for ( ; autoD89FC5A3_var <= autoD89FC5A3_ae; autoD89FC5A3_var += 1 ) {
        if ((EventDialogControl() == libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM[autoD89FC5A3_var])) {
            lv_index = autoD89FC5A3_var;
            libDEAD_gv_dS_ContextTarget[EventPlayer()] = libDEAD_ge_ContextTarget_Inventory;
            break;
        }

    }
    if ((lv_index != 0)) {
        if ((libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_context_open[lv_index] == false)) {
            DialogControlSendAnimationEvent(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM[lv_index], PlayerGroupSingle(EventPlayer()), "ContextOpen");
            libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_context_open[lv_index] = true;
            libDEAD_gv_dS_ContextActive[EventPlayer()] = true;
        }
        else {
            DialogControlSendAnimationEvent(libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM[lv_index], PlayerGroupSingle(EventPlayer()), "ContextClose");
            libDEAD_gv_eCL__Inventory[EventPlayer()].lv_iTEM_context_open[lv_index] = false;
            libDEAD_gv_dS_ContextActive[EventPlayer()] = false;
        }
        libDEAD_gv_dS_ContextItemIndex[EventPlayer()] = lv_index;
        libDEAD_gf_ECL__Hookup_Context(EventPlayer(), lv_index);
        libDEAD_gf_SetupContextType(EventPlayer(), lv_index);
        libDEAD_gf_FocusContextItem(EventPlayer(), lv_index);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_ECL__CONTEXTMENU_OnRightClick_Init () {
    libDEAD_gt_ECL__CONTEXTMENU_OnRightClick = TriggerCreate("libDEAD_gt_ECL__CONTEXTMENU_OnRightClick_Func");
    TriggerAddEventDialogControl(libDEAD_gt_ECL__CONTEXTMENU_OnRightClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ListboxItemUsed
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ListboxItemUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libDEAD_gv_dS_Crafting[EventPlayer()].lv_listboxItem[libDEAD_gf_UsedListboxItem(EventPlayer(), EventDialogControl())]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_DS_SetInfoFrameItem(libDEAD_gf_ReturnListboxItem(libDEAD_gf_UsedListboxItem(EventPlayer(), EventDialogControl())), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ListboxItemUsed_Init () {
    libDEAD_gt_DS_ListboxItemUsed = TriggerCreate("libDEAD_gt_DS_ListboxItemUsed_Func");
    TriggerAddEventDialogControl(libDEAD_gt_DS_ListboxItemUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_Initialization
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_Initialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto033CAED0_g;
    int auto033CAED0_var;
    playergroup auto34FB14C1_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto033CAED0_g = PlayerGroupActive();
    auto033CAED0_var = -1;
    while (true) {
        auto033CAED0_var = PlayerGroupNextPlayer(auto033CAED0_g, auto033CAED0_var);
        if (auto033CAED0_var < 0) { break; }
        PlayerGroupAdd(libDEAD_gv_dS_ActivePlayers, auto033CAED0_var);
    }
    libDEAD_gf_DEBUG_EnableDebug();
    TriggerExecute(libDEAD_gt_ECL__HOOKUPINVENTORYFRAMES, true, true);
    libDEAD_gf_CheckBaseStatModifiers();
    auto34FB14C1_g = libDEAD_gv_dS_ActivePlayers;
    lv_index = -1;
    while (true) {
        lv_index = PlayerGroupNextPlayer(auto34FB14C1_g, lv_index);
        if (lv_index < 0) { break; }
        libDEAD_gf_DS_TableSizeCheck();
        libDEAD_gf_DS_ItemSizeCheck();
        libDEAD_gf_DS_CreatePlayerUnit(lv_index, 135.0, PointFromName(("PlayerSpawn" + IntToString(lv_index))));
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DSGameUI");
        libDEAD_gv_dS_GameUI[lv_index].lv_gameUI = DialogControlLastCreated();
        libDEAD_gf_DS_CreateHUD(lv_index);
        libNtve_gf_SetDialogItemUnitGroup(libDEAD_gv_dS_HUD[lv_index].lv_uTF, libNtve_gf_ConvertUnitToUnitGroup(libDEAD_gv_playerUnit[lv_index]), PlayerGroupSingle(lv_index));
        libDEAD_gf_DS_CreateCraftingPanel(lv_index);
        libDEAD_gf_DS_CreateInspectWindow(lv_index);
        libDEAD_gf_DS_CreateConfirm(lv_index);
        libDEAD_gf_DS_HookupInteractButton(libDEAD_gv_playerUnit[lv_index], lv_index);
        libDEAD_gf_DS_InitHPSystem(lv_index);
        libDEAD_gf_DS_InitializeInventory(lv_index);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_Initialization_Init () {
    libDEAD_gt_DS_Initialization = TriggerCreate("libDEAD_gt_DS_Initialization_Func");
    TriggerAddEventMapInit(libDEAD_gt_DS_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_OpenInventoryP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_OpenInventoryP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gv_dS_InventoryEnabled[EventPlayer()] == true))) {
            return false;
        }

        if (!((libDEAD_gv_dS_InventoryOpened[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideInventoryPanel(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_OpenInventoryP1_Init () {
    libDEAD_gt_DS_OpenInventoryP1 = TriggerCreate("libDEAD_gt_DS_OpenInventoryP1_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_OpenInventoryP1, 1, c_keyI, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_CloseInventoryP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_CloseInventoryP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gv_dS_InventoryEnabled[EventPlayer()] == true))) {
            return false;
        }

        if (!((libDEAD_gv_dS_InventoryOpened[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideInventoryPanel(EventPlayer(), true);
    libDEAD_gf_ShowHideLootPanel(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_CloseInventoryP1_Init () {
    libDEAD_gt_DS_CloseInventoryP1 = TriggerCreate("libDEAD_gt_DS_CloseInventoryP1_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_CloseInventoryP1, 1, c_keyI, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_CloseInventoryP1, 1, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_OpenInventoryP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_OpenInventoryP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gv_dS_InventoryEnabled[EventPlayer()] == true))) {
            return false;
        }

        if (!((libDEAD_gv_dS_InventoryOpened[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideInventoryPanel(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_OpenInventoryP2_Init () {
    libDEAD_gt_DS_OpenInventoryP2 = TriggerCreate("libDEAD_gt_DS_OpenInventoryP2_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_OpenInventoryP2, 2, c_keyI, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_CloseInventoryP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_CloseInventoryP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gv_dS_InventoryEnabled[EventPlayer()] == true))) {
            return false;
        }

        if (!((libDEAD_gv_dS_InventoryOpened[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideInventoryPanel(EventPlayer(), true);
    libDEAD_gf_ShowHideLootPanel(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_CloseInventoryP2_Init () {
    libDEAD_gt_DS_CloseInventoryP2 = TriggerCreate("libDEAD_gt_DS_CloseInventoryP2_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_CloseInventoryP2, 2, c_keyI, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_CloseInventoryP2, 2, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_OpenCraftingP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_OpenCraftingP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gv_dS_CraftingOpened[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideCraftingPanel(true, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_OpenCraftingP1_Init () {
    libDEAD_gt_DS_OpenCraftingP1 = TriggerCreate("libDEAD_gt_DS_OpenCraftingP1_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_OpenCraftingP1, 1, c_keyO, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_CloseCraftingP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_CloseCraftingP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gv_dS_CraftingOpened[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideCraftingPanel(false, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_CloseCraftingP1_Init () {
    libDEAD_gt_DS_CloseCraftingP1 = TriggerCreate("libDEAD_gt_DS_CloseCraftingP1_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_CloseCraftingP1, 1, c_keyO, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_CloseCraftingP1, 1, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_OpenCraftingP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_OpenCraftingP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gv_dS_CraftingOpened[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideCraftingPanel(true, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_OpenCraftingP2_Init () {
    libDEAD_gt_DS_OpenCraftingP2 = TriggerCreate("libDEAD_gt_DS_OpenCraftingP2_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_OpenCraftingP2, 2, c_keyO, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_CloseCraftingP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_CloseCraftingP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gv_dS_CraftingOpened[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideCraftingPanel(false, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_CloseCraftingP2_Init () {
    libDEAD_gt_DS_CloseCraftingP2 = TriggerCreate("libDEAD_gt_DS_CloseCraftingP2_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_CloseCraftingP2, 2, c_keyO, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_CloseCraftingP2, 2, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_PressF(Flashlight)P1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_PressFFlashlightP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gf_KeyInInventory(EventPlayer(), "Flashlight") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libDEAD_gv_dS_Flashlight[EventPlayer()] == false)) {
        libDEAD_gv_dS_Flashlight[EventPlayer()] = true;
        UnitBehaviorAddPlayer(libDEAD_gv_playerUnit[EventPlayer()], "Flashlight", EventPlayer(), 1);
    }
    else {
        libDEAD_gv_dS_Flashlight[EventPlayer()] = false;
        UnitBehaviorRemovePlayer(libDEAD_gv_playerUnit[EventPlayer()], "Flashlight", EventPlayer(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_PressFFlashlightP1_Init () {
    libDEAD_gt_DS_PressFFlashlightP1 = TriggerCreate("libDEAD_gt_DS_PressFFlashlightP1_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_PressFFlashlightP1, 1, c_keyF, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_PressF(Flashlight)P2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_PressFFlashlightP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libDEAD_gf_KeyInInventory(EventPlayer(), "Flashlight") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libDEAD_gv_dS_Flashlight[EventPlayer()] == false)) {
        libDEAD_gv_dS_Flashlight[EventPlayer()] = true;
        UnitBehaviorAddPlayer(libDEAD_gv_playerUnit[EventPlayer()], "Flashlight", EventPlayer(), 1);
    }
    else {
        libDEAD_gv_dS_Flashlight[EventPlayer()] = false;
        UnitBehaviorRemovePlayer(libDEAD_gv_playerUnit[EventPlayer()], "Flashlight", EventPlayer(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_PressFFlashlightP2_Init () {
    libDEAD_gt_DS_PressFFlashlightP2 = TriggerCreate("libDEAD_gt_DS_PressFFlashlightP2_Func");
    TriggerAddEventKeyPressed(libDEAD_gt_DS_PressFFlashlightP2, 2, c_keyF, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_UpdateTimers
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_UpdateTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto58C7EFD1_g;
    const int auto94839309_ae = 10;
    const int auto94839309_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto58C7EFD1_g = libDEAD_gv_dS_ActivePlayers;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(auto58C7EFD1_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        lv_index = 1;
        for ( ; ( (auto94839309_ai >= 0 && lv_index <= auto94839309_ae) || (auto94839309_ai < 0 && lv_index >= auto94839309_ae) ) ; lv_index += auto94839309_ai ) {
            if (true) {
                if (true) {
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_UpdateTimers_Init () {
    libDEAD_gt_DS_UpdateTimers = TriggerCreate("libDEAD_gt_DS_UpdateTimers_Func");
    TriggerEnable(libDEAD_gt_DS_UpdateTimers, false);
    TriggerAddEventTimePeriodic(libDEAD_gt_DS_UpdateTimers, 0.01, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ContextExamineP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ContextExamineP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_context_Examine))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_DEAD_F3CE13FB"), true);
    libDEAD_gf_ShowHideInspectWindow(EventPlayer(), true);
    TriggerEnable(libDEAD_gt_DS_ExamineCloseBackgroundP1, true);
    TriggerEnable(libDEAD_gt_DS_ExamineCloseEscP1, true);
    TriggerEnable(libDEAD_gt_DS_ContextExamineP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextEquipP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextUseP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, false);
    libDEAD_gv_dS_ContextItem[EventPlayer()] = null;
    libDEAD_gv_dS_ContextActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ContextExamineP1_Init () {
    libDEAD_gt_DS_ContextExamineP1 = TriggerCreate("libDEAD_gt_DS_ContextExamineP1_Func");
    TriggerEnable(libDEAD_gt_DS_ContextExamineP1, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ContextExamineP1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ContextDiscardP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ContextDiscardP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_context_Discard))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideConfirmationWindow(EventPlayer(), true, libDEAD_ge_ConfirmType_Discard);
    TriggerEnable(libDEAD_gt_DS_ContextExamineP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextEquipP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextUseP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, false);
    libDEAD_gf_UpdateInventoryPanel(EventPlayer());
    libDEAD_gv_dS_ContextActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ContextDiscardP1_Init () {
    libDEAD_gt_DS_ContextDiscardP1 = TriggerCreate("libDEAD_gt_DS_ContextDiscardP1_Func");
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ContextDiscardP1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ContextUseP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ContextUseP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto18164665_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_context_Use))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto18164665_val = libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_ContextItem[EventPlayer()]);
    if (auto18164665_val == "Drink") {
        libDEAD_gf_AddWater(EventPlayer(), libDEAD_gf_ReturnItemPropertyMaxDurability(libDEAD_gv_dS_ContextItem[EventPlayer()]));
        libDEAD_gf_DiscardItem(EventPlayer());
    }
    else if (auto18164665_val == "Eat") {
        libDEAD_gf_AddFood(EventPlayer(), libDEAD_gf_ReturnItemPropertyMaxDurability(libDEAD_gv_dS_ContextItem[EventPlayer()]));
        libDEAD_gf_DiscardItem(EventPlayer());
    }
    else {
    }
    libDEAD_gf_SendDebugMessage(("Using  " + libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_ContextItem[EventPlayer()])));
    TriggerEnable(libDEAD_gt_DS_ContextExamineP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextEquipP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextUseP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, false);
    libDEAD_gv_dS_ContextItem[EventPlayer()] = null;
    libDEAD_gv_dS_ContextActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ContextUseP1_Init () {
    libDEAD_gt_DS_ContextUseP1 = TriggerCreate("libDEAD_gt_DS_ContextUseP1_Func");
    TriggerEnable(libDEAD_gt_DS_ContextUseP1, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ContextUseP1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ContextEquipP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ContextEquipP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto73CD0371_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_context_Equip))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_SendDebugMessage(("Equipped  " + libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_ContextItem[EventPlayer()])));
    auto73CD0371_val = libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_ContextItem[EventPlayer()]);
    if (auto73CD0371_val == "Weapon") {
        libDEAD_gf_DS_EquipWeapon(EventPlayer(), libDEAD_gv_dS_ContextItem[EventPlayer()]);
    }
    else if (auto73CD0371_val == "Suit") {
        libDEAD_gf_DS_EquipSuit(EventPlayer(), libDEAD_gv_dS_ContextItem[EventPlayer()]);
    }
    else if (auto73CD0371_val == "Pack") {
        libDEAD_gf_DS_EquipPack(EventPlayer(), libDEAD_gv_dS_ContextItem[EventPlayer()]);
    }
    else if (auto73CD0371_val == "Augment") {
        libDEAD_gf_DS_EquipAug(EventPlayer(), libDEAD_gv_dS_ContextItem[EventPlayer()]);
    }
    else {
    }
    TriggerEnable(libDEAD_gt_DS_ContextExamineP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextEquipP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextUseP1, false);
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP1, false);
    libDEAD_gv_dS_ContextItem[EventPlayer()] = null;
    libDEAD_gv_dS_ContextActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ContextEquipP1_Init () {
    libDEAD_gt_DS_ContextEquipP1 = TriggerCreate("libDEAD_gt_DS_ContextEquipP1_Func");
    TriggerEnable(libDEAD_gt_DS_ContextEquipP1, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ContextEquipP1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ContextExamineP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ContextExamineP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_context_Examine))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideInspectWindow(EventPlayer(), true);
    TriggerEnable(libDEAD_gt_DS_ExamineCloseBackgroundP2, true);
    TriggerEnable(libDEAD_gt_DS_ExamineCloseEscP2, true);
    TriggerEnable(libDEAD_gt_DS_ContextExamineP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextEquipP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextUseP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, false);
    libDEAD_gv_dS_ContextItem[EventPlayer()] = null;
    libDEAD_gv_dS_ContextActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ContextExamineP2_Init () {
    libDEAD_gt_DS_ContextExamineP2 = TriggerCreate("libDEAD_gt_DS_ContextExamineP2_Func");
    TriggerEnable(libDEAD_gt_DS_ContextExamineP2, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ContextExamineP2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ContextDiscardP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ContextDiscardP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_context_Discard))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideConfirmationWindow(EventPlayer(), true, libDEAD_ge_ConfirmType_Discard);
    TriggerEnable(libDEAD_gt_DS_ContextExamineP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextEquipP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextUseP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, false);
    libDEAD_gf_UpdateInventoryPanel(EventPlayer());
    libDEAD_gv_dS_ContextActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ContextDiscardP2_Init () {
    libDEAD_gt_DS_ContextDiscardP2 = TriggerCreate("libDEAD_gt_DS_ContextDiscardP2_Func");
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ContextDiscardP2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ContextUseP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ContextUseP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto6C7447AF_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_context_Use))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6C7447AF_val = libDEAD_gf_ReturnItemPropertyUse(libDEAD_gv_dS_ContextItem[EventPlayer()]);
    if (auto6C7447AF_val == "Drink") {
        libDEAD_gf_AddWater(EventPlayer(), libDEAD_gf_ReturnItemPropertyMaxDurability(libDEAD_gv_dS_ContextItem[EventPlayer()]));
        libDEAD_gf_DiscardItem(EventPlayer());
    }
    else if (auto6C7447AF_val == "Eat") {
        libDEAD_gf_AddFood(EventPlayer(), libDEAD_gf_ReturnItemPropertyMaxDurability(libDEAD_gv_dS_ContextItem[EventPlayer()]));
        libDEAD_gf_DiscardItem(EventPlayer());
    }
    else {
    }
    libDEAD_gf_SendDebugMessage(("Using  " + libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_ContextItem[EventPlayer()])));
    TriggerEnable(libDEAD_gt_DS_ContextExamineP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextEquipP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextUseP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, false);
    libDEAD_gv_dS_ContextItem[EventPlayer()] = null;
    libDEAD_gv_dS_ContextActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ContextUseP2_Init () {
    libDEAD_gt_DS_ContextUseP2 = TriggerCreate("libDEAD_gt_DS_ContextUseP2_Func");
    TriggerEnable(libDEAD_gt_DS_ContextUseP2, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ContextUseP2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ContextEquipP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ContextEquipP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto0421332B_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_context_Equip))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_SendDebugMessage(("Equipped  " + libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_ContextItem[EventPlayer()])));
    auto0421332B_val = libDEAD_gf_ReturnItemPropertyCategory(libDEAD_gv_dS_ContextItem[EventPlayer()]);
    if (auto0421332B_val == "Weapon") {
        libDEAD_gf_DS_EquipWeapon(EventPlayer(), libDEAD_gv_dS_ContextItem[EventPlayer()]);
    }
    else if (auto0421332B_val == "Suit") {
        libDEAD_gf_DS_EquipSuit(EventPlayer(), libDEAD_gv_dS_ContextItem[EventPlayer()]);
    }
    else if (auto0421332B_val == "Pack") {
        libDEAD_gf_DS_EquipPack(EventPlayer(), libDEAD_gv_dS_ContextItem[EventPlayer()]);
    }
    else if (auto0421332B_val == "Augment") {
        libDEAD_gf_DS_EquipAug(EventPlayer(), libDEAD_gv_dS_ContextItem[EventPlayer()]);
    }
    else {
    }
    TriggerEnable(libDEAD_gt_DS_ContextExamineP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextEquipP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextUseP2, false);
    TriggerEnable(libDEAD_gt_DS_ContextDiscardP2, false);
    libDEAD_gv_dS_ContextItem[EventPlayer()] = null;
    libDEAD_gv_dS_ContextActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ContextEquipP2_Init () {
    libDEAD_gt_DS_ContextEquipP2 = TriggerCreate("libDEAD_gt_DS_ContextEquipP2_Func");
    TriggerEnable(libDEAD_gt_DS_ContextEquipP2, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_ContextEquipP2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_CrateItemFocusedP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_CrateItemFocusedP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonIndex;

    // Automatic Variable Declarations
    int autoFD01D828_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[1]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[2]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[3]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[4]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[5]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFD01D828_val = EventDialogControl();
    if (autoFD01D828_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[1]) {
        lv_buttonIndex = 1;
    }
    else if (autoFD01D828_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[2]) {
        lv_buttonIndex = 2;
    }
    else if (autoFD01D828_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[3]) {
        lv_buttonIndex = 3;
    }
    else if (autoFD01D828_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[4]) {
        lv_buttonIndex = 4;
    }
    else if (autoFD01D828_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[5]) {
        lv_buttonIndex = 5;
    }
    else if (autoFD01D828_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[6]) {
        lv_buttonIndex = 6;
    }
    else {
    }
    libDEAD_gf_FocusItemInCrate(EventPlayer(), lv_buttonIndex, libDEAD_gv_dS_FocusedCrate[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_CrateItemFocusedP1_Init () {
    libDEAD_gt_DS_CrateItemFocusedP1 = TriggerCreate("libDEAD_gt_DS_CrateItemFocusedP1_Func");
    TriggerAddEventDialogControl(libDEAD_gt_DS_CrateItemFocusedP1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_TakeButtonPressedP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_TakeButtonPressedP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_takeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_LootFocusedItem(EventPlayer(), libDEAD_gv_dS_FocusedCrate[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_TakeButtonPressedP1_Init () {
    libDEAD_gt_DS_TakeButtonPressedP1 = TriggerCreate("libDEAD_gt_DS_TakeButtonPressedP1_Func");
    TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP1, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_TakeButtonPressedP1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_LootAllButtonP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_LootAllButtonP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoE84ACB40_ae;
    const int autoE84ACB40_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootAllButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE84ACB40_ae = libDEAD_gf_ReturnCrateSize(libDEAD_gf_ReturnCrateIndex(libDEAD_gv_dS_FocusedCrate[EventPlayer()]));
    lv_i = 1;
    for ( ; ( (autoE84ACB40_ai >= 0 && lv_i <= autoE84ACB40_ae) || (autoE84ACB40_ai < 0 && lv_i >= autoE84ACB40_ae) ) ; lv_i += autoE84ACB40_ai ) {
        libDEAD_gf_LootFocusedItem(EventPlayer(), libDEAD_gv_dS_FocusedCrate[EventPlayer()]);
        Wait(0.3, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_LootAllButtonP1_Init () {
    libDEAD_gt_DS_LootAllButtonP1 = TriggerCreate("libDEAD_gt_DS_LootAllButtonP1_Func");
    TriggerEnable(libDEAD_gt_DS_LootAllButtonP1, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_LootAllButtonP1, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_CrateItemFocusedP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_CrateItemFocusedP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonIndex;

    // Automatic Variable Declarations
    int auto64E3F8E6_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[1]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[2]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[3]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[4]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[5]) || (EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto64E3F8E6_val = EventDialogControl();
    if (auto64E3F8E6_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[1]) {
        lv_buttonIndex = 1;
    }
    else if (auto64E3F8E6_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[2]) {
        lv_buttonIndex = 2;
    }
    else if (auto64E3F8E6_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[3]) {
        lv_buttonIndex = 3;
    }
    else if (auto64E3F8E6_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[4]) {
        lv_buttonIndex = 4;
    }
    else if (auto64E3F8E6_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[5]) {
        lv_buttonIndex = 5;
    }
    else if (auto64E3F8E6_val == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootSlots[6]) {
        lv_buttonIndex = 6;
    }
    else {
    }
    libDEAD_gf_FocusItemInCrate(EventPlayer(), lv_buttonIndex, libDEAD_gv_dS_FocusedCrate[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_CrateItemFocusedP2_Init () {
    libDEAD_gt_DS_CrateItemFocusedP2 = TriggerCreate("libDEAD_gt_DS_CrateItemFocusedP2_Func");
    TriggerAddEventDialogControl(libDEAD_gt_DS_CrateItemFocusedP2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_TakeButtonPressedP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_TakeButtonPressedP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_takeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_LootFocusedItem(EventPlayer(), libDEAD_gv_dS_FocusedCrate[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_TakeButtonPressedP2_Init () {
    libDEAD_gt_DS_TakeButtonPressedP2 = TriggerCreate("libDEAD_gt_DS_TakeButtonPressedP2_Func");
    TriggerEnable(libDEAD_gt_DS_TakeButtonPressedP2, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_TakeButtonPressedP2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_LootAllButtonP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_LootAllButtonP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoF8009568_ae = 3;
    const int autoF8009568_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libDEAD_gv_dS_Inventory[EventPlayer()].lv_lootAllButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (autoF8009568_ai >= 0 && lv_index <= autoF8009568_ae) || (autoF8009568_ai < 0 && lv_index >= autoF8009568_ae) ) ; lv_index += autoF8009568_ai ) {
        libDEAD_gf_LootFocusedItem(EventPlayer(), libDEAD_gv_dS_FocusedCrate[EventPlayer()]);
        Wait(0.3, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_LootAllButtonP2_Init () {
    libDEAD_gt_DS_LootAllButtonP2 = TriggerCreate("libDEAD_gt_DS_LootAllButtonP2_Func");
    TriggerEnable(libDEAD_gt_DS_LootAllButtonP2, false);
    TriggerAddEventDialogControl(libDEAD_gt_DS_LootAllButtonP2, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_FoodLossP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_FoodLossP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(libDEAD_gv_playerUnit[1]) == true) || (UnitIsAlive(libDEAD_gv_playerUnit[1]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_RemoveFood(1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_FoodLossP1_Init () {
    libDEAD_gt_DS_FoodLossP1 = TriggerCreate("libDEAD_gt_DS_FoodLossP1_Func");
    TriggerEnable(libDEAD_gt_DS_FoodLossP1, false);
    TriggerAddEventTimePeriodic(libDEAD_gt_DS_FoodLossP1, libDEAD_gv_dS_FoodLossRate, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_WaterLossP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_WaterLossP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(libDEAD_gv_playerUnit[1]) == true) || (UnitIsAlive(libDEAD_gv_playerUnit[1]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_RemoveWater(1, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_WaterLossP1_Init () {
    libDEAD_gt_DS_WaterLossP1 = TriggerCreate("libDEAD_gt_DS_WaterLossP1_Func");
    TriggerEnable(libDEAD_gt_DS_WaterLossP1, false);
    TriggerAddEventTimePeriodic(libDEAD_gt_DS_WaterLossP1, libDEAD_gv_dS_WaterLossRate, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_FoodLossP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_FoodLossP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(libDEAD_gv_playerUnit[2]) == true) || (UnitIsAlive(libDEAD_gv_playerUnit[2]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_RemoveFood(2, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_FoodLossP2_Init () {
    libDEAD_gt_DS_FoodLossP2 = TriggerCreate("libDEAD_gt_DS_FoodLossP2_Func");
    TriggerEnable(libDEAD_gt_DS_FoodLossP2, false);
    TriggerAddEventTimePeriodic(libDEAD_gt_DS_FoodLossP2, libDEAD_gv_dS_FoodLossRate, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_WaterLossP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_WaterLossP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(libDEAD_gv_playerUnit[2]) == true) || (UnitIsAlive(libDEAD_gv_playerUnit[2]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_RemoveWater(2, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_WaterLossP2_Init () {
    libDEAD_gt_DS_WaterLossP2 = TriggerCreate("libDEAD_gt_DS_WaterLossP2_Func");
    TriggerEnable(libDEAD_gt_DS_WaterLossP2, false);
    TriggerAddEventTimePeriodic(libDEAD_gt_DS_WaterLossP2, libDEAD_gv_dS_WaterLossRate, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_DamageTaken
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_DamageTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageTaken;
    unit lv_attackerUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2) || (UnitGetOwner(EventUnit()) == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageTaken = EventUnitDamageAmount();
    lv_attackerUnit = EventUnitDamageSourceUnit();
    libDEAD_gf_TakeDamage(EventPlayer(), lv_damageTaken, lv_attackerUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_DamageTaken_Init () {
    libDEAD_gt_DS_DamageTaken = TriggerCreate("libDEAD_gt_DS_DamageTaken_Func");
    TriggerAddEventUnitDamaged(libDEAD_gt_DS_DamageTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_FireCooldownP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_FireCooldownP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libDEAD_gv_dS_PlayerData[1].lv_weaponCooldown, c_timeReal);
    libDEAD_gv_attackOnCooldown[1] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_FireCooldownP1_Init () {
    libDEAD_gt_DS_FireCooldownP1 = TriggerCreate("libDEAD_gt_DS_FireCooldownP1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_Fire
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_Fire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(libDEAD_gv_playerUnit[1]) == true) && (libDEAD_gv_attackOnCooldown[1] == false)))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_Fire_Init () {
    libDEAD_gt_DS_Fire = TriggerCreate("libDEAD_gt_DS_Fire_Func");
    TriggerEnable(libDEAD_gt_DS_Fire, false);
    TriggerAddEventMouseClicked(libDEAD_gt_DS_Fire, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_Reload
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_Reload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(libDEAD_gv_playerUnit[EventPlayer()]) == true) && (libDEAD_gv_dS_PlayerData[EventPlayer()].lv_weaponAmmo < libDEAD_gv_dS_PlayerData[EventPlayer()].lv_weaponMagSize)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libDEAD_gf_DS_ReloadWeapon(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_Reload_Init () {
    libDEAD_gt_DS_Reload = TriggerCreate("libDEAD_gt_DS_Reload_Func");
    TriggerEnable(libDEAD_gt_DS_Reload, false);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_Reload, c_playerAny, c_keyR, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_RightClickRelease
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_RightClickRelease_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libDEAD_gt_DS_ClickFire, false);
    libDEAD_gv_aimingDown[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_RightClickRelease_Init () {
    libDEAD_gt_DS_RightClickRelease = TriggerCreate("libDEAD_gt_DS_RightClickRelease_Func");
    TriggerAddEventMouseClicked(libDEAD_gt_DS_RightClickRelease, c_playerAny, c_mouseButtonRight, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_RightClickDown
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_RightClickDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libDEAD_gt_DS_ClickFire, true);
    libDEAD_gv_aimingDown[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_RightClickDown_Init () {
    libDEAD_gt_DS_RightClickDown = TriggerCreate("libDEAD_gt_DS_RightClickDown_Func");
    TriggerAddEventMouseClicked(libDEAD_gt_DS_RightClickDown, c_playerAny, c_mouseButtonRight, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_ClickFire
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_ClickFire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_dY_shot;
    fixed lv_dX_shot;
    const fixed lv_weaponRange = 5.0;
    point lv_tracePoint;
    point lv_shortTracePoint;
    fixed lv_traceDistance;
    fixed lv_traceAngle;
    region lv_traceRegion;
    unit lv_targetClosestUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(libDEAD_gv_playerUnit[EventPlayer()]) == true) && (libDEAD_gv_attackOnCooldown[EventPlayer()] == false) && (libDEAD_gv_aimingDown[EventPlayer()] == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gv_targetUnit[EventPlayer()] = null;
    libDEAD_gv_targetPoint[EventPlayer()] = null;
    lv_dX_shot = EventMouseClickedPosXWorld();
    lv_dY_shot = EventMouseClickedPosYWorld();
    lv_tracePoint = Point(lv_dX_shot, lv_dY_shot);
    lv_traceAngle = AngleBetweenPoints(UnitGetPosition(libDEAD_gv_playerUnit[1]), lv_tracePoint);
    lv_shortTracePoint = PointWithOffsetPolar(UnitGetPosition(libDEAD_gv_playerUnit[1]), lv_weaponRange, lv_traceAngle);
    lv_traceRegion = RegionCircle(lv_tracePoint, 0.4);
    lv_targetClosestUnit = libNtve_gf_ClosestUnitToPoint(lv_tracePoint, UnitGroup(null, 2, lv_traceRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((lv_targetClosestUnit != null)) {
        libDEAD_gv_targetUnit[EventPlayer()] = lv_targetClosestUnit;
    }
    else {
        libDEAD_gv_targetPoint[EventPlayer()] = lv_tracePoint;
    }
    libDEAD_gf_DS_Fire(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_ClickFire_Init () {
    libDEAD_gt_DS_ClickFire = TriggerCreate("libDEAD_gt_DS_ClickFire_Func");
    TriggerEnable(libDEAD_gt_DS_ClickFire, false);
    TriggerAddEventMouseClicked(libDEAD_gt_DS_ClickFire, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_Crate_GenericUseP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_Crate_GenericUseP1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideInteractPrompt(libDEAD_ge_InteractType_Loot, false, EventPlayer());
    libDEAD_gf_StartTimer(EventPlayer(), libDEAD_gf_ReturnObjectUseTime(libDEAD_gv_dS_ClosestCrate[EventPlayer()]), "Assets\\Textures\\Items\\ui_itemicons_pills.dds");
    libNtve_gf_MakeUnitFacePoint(libDEAD_gv_playerUnit[EventPlayer()], UnitGetPosition(libDEAD_gv_dS_ClosestCrate[EventPlayer()]), 0.05);
    Wait(libDEAD_gf_ReturnObjectUseTime(libDEAD_gv_dS_ClosestCrate[EventPlayer()]), c_timeReal);
    libDEAD_gf_EnableDisableObject(false, libDEAD_gv_dS_ClosestCrate[EventPlayer()]);
    libDEAD_gf_DisplayCrateLoot(EventPlayer(), libDEAD_gv_dS_ClosestCrate[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_Crate_GenericUseP1_Init () {
    libDEAD_gt_DS_Crate_GenericUseP1 = TriggerCreate("libDEAD_gt_DS_Crate_GenericUseP1_Func");
    TriggerEnable(libDEAD_gt_DS_Crate_GenericUseP1, false);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_Crate_GenericUseP1, 1, c_keyE, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_Crate_GenericEnterP1
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_Crate_GenericEnterP1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto19FF5E3A_ae = 100;
    const int auto19FF5E3A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto19FF5E3A_ai >= 0 && lv_index <= auto19FF5E3A_ae) || (auto19FF5E3A_ai < 0 && lv_index >= auto19FF5E3A_ae) ) ; lv_index += auto19FF5E3A_ai ) {
        if (((libDEAD_gv_dS_CrateinUse[1] == true) && (libNtve_gf_UnitInRegion(libDEAD_gv_playerUnit[1], RegionCircle(UnitGetPosition(libDEAD_gv_dS_InteractableCrates[libDEAD_gv_dS_LastUsedIndex[1]]), 2.0)) == false))) {
            if ((libDEAD_gv_looting[1] == true)) {
                libDEAD_gf_ShowHideLootPanel(1, false);
            }

            libDEAD_gf_ObjectInRangeGeneric(1, libDEAD_gv_playerUnit[1], libDEAD_gv_dS_InteractableCrates[libDEAD_gv_dS_LastUsedIndex[1]], false);
            libDEAD_gf_EnableDisableObject(true, libDEAD_gv_dS_InteractableCrates[libDEAD_gv_dS_LastUsedIndex[1]]);
            libDEAD_gv_dS_LastUsedIndex[1] = 0;
            libDEAD_gv_dS_CrateinUse[1] = false;
            break;
        }
        if ((libDEAD_gv_dS_InteractableCrates[lv_index] != null)) {
            if (((libNtve_gf_UnitInRegion(libDEAD_gv_playerUnit[1], RegionCircle(UnitGetPosition(libDEAD_gv_dS_InteractableCrates[lv_index]), 2.0)) == true) && (libDEAD_gv_dS_CrateinUse[1] == false) && (libDEAD_gf_CrateIsEmpty(libDEAD_gv_dS_InteractableCrates[lv_index]) == false))) {
                libDEAD_gf_ObjectInRangeGeneric(1, libDEAD_gv_playerUnit[1], libDEAD_gv_dS_InteractableCrates[lv_index], true);
                libDEAD_gv_dS_LastUsedIndex[1] = lv_index;
                break;
            }
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_Crate_GenericEnterP1_Init () {
    libDEAD_gt_DS_Crate_GenericEnterP1 = TriggerCreate("libDEAD_gt_DS_Crate_GenericEnterP1_Func");
    TriggerEnable(libDEAD_gt_DS_Crate_GenericEnterP1, false);
    TriggerAddEventTimePeriodic(libDEAD_gt_DS_Crate_GenericEnterP1, 0.01, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_Crate_GenericUseP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_Crate_GenericUseP2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libDEAD_gf_ShowHideInteractPrompt(libDEAD_ge_InteractType_Loot, false, EventPlayer());
    libDEAD_gf_StartTimer(EventPlayer(), libDEAD_gf_ReturnObjectUseTime(libDEAD_gv_dS_ClosestCrate[EventPlayer()]), "Assets\\Textures\\Items\\ui_itemicons_pills.dds");
    libNtve_gf_MakeUnitFacePoint(libDEAD_gv_playerUnit[EventPlayer()], UnitGetPosition(libDEAD_gv_dS_ClosestCrate[EventPlayer()]), 0.05);
    Wait(libDEAD_gf_ReturnObjectUseTime(libDEAD_gv_dS_ClosestCrate[EventPlayer()]), c_timeReal);
    libDEAD_gf_EnableDisableObject(false, libDEAD_gv_dS_ClosestCrate[EventPlayer()]);
    libDEAD_gf_DisplayCrateLoot(EventPlayer(), libDEAD_gv_dS_ClosestCrate[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_Crate_GenericUseP2_Init () {
    libDEAD_gt_DS_Crate_GenericUseP2 = TriggerCreate("libDEAD_gt_DS_Crate_GenericUseP2_Func");
    TriggerEnable(libDEAD_gt_DS_Crate_GenericUseP2, false);
    TriggerAddEventKeyPressed(libDEAD_gt_DS_Crate_GenericUseP2, 2, c_keyE, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS_Crate_GenericEnterP2
//--------------------------------------------------------------------------------------------------
bool libDEAD_gt_DS_Crate_GenericEnterP2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoA2048EBC_ae = 100;
    const int autoA2048EBC_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (autoA2048EBC_ai >= 0 && lv_index <= autoA2048EBC_ae) || (autoA2048EBC_ai < 0 && lv_index >= autoA2048EBC_ae) ) ; lv_index += autoA2048EBC_ai ) {
        if (((libDEAD_gv_dS_CrateinUse[2] == true) && (libNtve_gf_UnitInRegion(libDEAD_gv_playerUnit[2], RegionCircle(UnitGetPosition(libDEAD_gv_dS_InteractableCrates[libDEAD_gv_dS_LastUsedIndex[2]]), 2.0)) == false))) {
            if ((libDEAD_gv_looting[2] == true)) {
                libDEAD_gf_ShowHideLootPanel(2, false);
            }

            TextExpressionSetToken("Param/Expression/lib_DEAD_FC6C0840", "A", IntToText(2));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_DEAD_FC6C0840"));
            libDEAD_gf_ObjectInRangeGeneric(2, libDEAD_gv_playerUnit[2], libDEAD_gv_dS_InteractableCrates[libDEAD_gv_dS_LastUsedIndex[2]], false);
            libDEAD_gf_EnableDisableObject(true, libDEAD_gv_dS_InteractableCrates[libDEAD_gv_dS_LastUsedIndex[2]]);
            libDEAD_gv_dS_LastUsedIndex[2] = 0;
            libDEAD_gv_dS_CrateinUse[2] = false;
            break;
        }
        if ((libDEAD_gv_dS_InteractableCrates[lv_index] != null)) {
            if (((libNtve_gf_UnitInRegion(libDEAD_gv_playerUnit[2], RegionCircle(UnitGetPosition(libDEAD_gv_dS_InteractableCrates[lv_index]), 2.0)) == true) && (libDEAD_gv_dS_CrateinUse[2] == false) && (libDEAD_gf_CrateIsEmpty(libDEAD_gv_dS_InteractableCrates[lv_index]) == false))) {
                TextExpressionSetToken("Param/Expression/lib_DEAD_B04D8FC7", "A", IntToText(2));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_DEAD_B04D8FC7"));
                libDEAD_gf_ObjectInRangeGeneric(2, libDEAD_gv_playerUnit[2], libDEAD_gv_dS_InteractableCrates[lv_index], true);
                libDEAD_gv_dS_LastUsedIndex[2] = lv_index;
                break;
            }
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDEAD_gt_DS_Crate_GenericEnterP2_Init () {
    libDEAD_gt_DS_Crate_GenericEnterP2 = TriggerCreate("libDEAD_gt_DS_Crate_GenericEnterP2_Func");
    TriggerEnable(libDEAD_gt_DS_Crate_GenericEnterP2, false);
    TriggerAddEventTimePeriodic(libDEAD_gt_DS_Crate_GenericEnterP2, 0.01, c_timeGame);
}

void libDEAD_InitTriggers () {
    libDEAD_gt_DS_DiscoverRecipe_Init();
    libDEAD_gt_DS_CheckItems_Init();
    libDEAD_gt_DS_Unlock_Init();
    libDEAD_gt_DS_HealthIncrease_Init();
    libDEAD_gt_DS_ConfirmYesP1_Init();
    libDEAD_gt_DS_ConfirmNoP1_Init();
    libDEAD_gt_DS_ConfirmYesP2_Init();
    libDEAD_gt_DS_ConfirmNoP2_Init();
    libDEAD_gt_DS_ExamineCloseBackgroundP1_Init();
    libDEAD_gt_DS_ExamineCloseEscP1_Init();
    libDEAD_gt_DS_ExamineCloseBackgroundP2_Init();
    libDEAD_gt_DS_ExamineCloseEscP2_Init();
    libDEAD_gt_KL_SwapWeaponTest_Init();
    libDEAD_gt_ECL__HOOKUPINVENTORYFRAMES_Init();
    libDEAD_gt_ECL__DRAG_ON_OFF_Init();
    libDEAD_gt_ECL__SETNEWOLDSLOT_Init();
    libDEAD_gt_ECL__DROPZONE_Init();
    libDEAD_gt_ECL__PICKUPLOOT_Init();
    libDEAD_gt_ECL__PICKUPLOOT_directly_Init();
    libDEAD_gt_ECL__PICKUPLOOT_highlight_Init();
    libDEAD_gt_ECL__PICKUPLOOT_unhighlight_Init();
    libDEAD_gt_DS_ShowLootOnGround_Init();
    libDEAD_gt_DS_HideLootOnGround_Init();
    libDEAD_gt_ECL_catch_permanentloot_Init();
    libDEAD_gt_ECL_FireNew_Init();
    libDEAD_gt_ECL__CONTEXTMENU_OnRightClick_Init();
    libDEAD_gt_DS_ListboxItemUsed_Init();
    libDEAD_gt_DS_Initialization_Init();
    libDEAD_gt_DS_OpenInventoryP1_Init();
    libDEAD_gt_DS_CloseInventoryP1_Init();
    libDEAD_gt_DS_OpenInventoryP2_Init();
    libDEAD_gt_DS_CloseInventoryP2_Init();
    libDEAD_gt_DS_OpenCraftingP1_Init();
    libDEAD_gt_DS_CloseCraftingP1_Init();
    libDEAD_gt_DS_OpenCraftingP2_Init();
    libDEAD_gt_DS_CloseCraftingP2_Init();
    libDEAD_gt_DS_PressFFlashlightP1_Init();
    libDEAD_gt_DS_PressFFlashlightP2_Init();
    libDEAD_gt_DS_UpdateTimers_Init();
    libDEAD_gt_DS_ContextExamineP1_Init();
    libDEAD_gt_DS_ContextDiscardP1_Init();
    libDEAD_gt_DS_ContextUseP1_Init();
    libDEAD_gt_DS_ContextEquipP1_Init();
    libDEAD_gt_DS_ContextExamineP2_Init();
    libDEAD_gt_DS_ContextDiscardP2_Init();
    libDEAD_gt_DS_ContextUseP2_Init();
    libDEAD_gt_DS_ContextEquipP2_Init();
    libDEAD_gt_DS_CrateItemFocusedP1_Init();
    libDEAD_gt_DS_TakeButtonPressedP1_Init();
    libDEAD_gt_DS_LootAllButtonP1_Init();
    libDEAD_gt_DS_CrateItemFocusedP2_Init();
    libDEAD_gt_DS_TakeButtonPressedP2_Init();
    libDEAD_gt_DS_LootAllButtonP2_Init();
    libDEAD_gt_DS_FoodLossP1_Init();
    libDEAD_gt_DS_WaterLossP1_Init();
    libDEAD_gt_DS_FoodLossP2_Init();
    libDEAD_gt_DS_WaterLossP2_Init();
    libDEAD_gt_DS_DamageTaken_Init();
    libDEAD_gt_DS_FireCooldownP1_Init();
    libDEAD_gt_DS_Fire_Init();
    libDEAD_gt_DS_Reload_Init();
    libDEAD_gt_DS_RightClickRelease_Init();
    libDEAD_gt_DS_RightClickDown_Init();
    libDEAD_gt_DS_ClickFire_Init();
    libDEAD_gt_DS_Crate_GenericUseP1_Init();
    libDEAD_gt_DS_Crate_GenericEnterP1_Init();
    libDEAD_gt_DS_Crate_GenericUseP2_Init();
    libDEAD_gt_DS_Crate_GenericEnterP2_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libDEAD_InitLib_completed = false;

void libDEAD_InitLib () {
    if (libDEAD_InitLib_completed) {
        return;
    }

    libDEAD_InitLib_completed = true;

    libDEAD_InitLibraries();
    libDEAD_InitVariables();
    libDEAD_InitTriggers();
}

